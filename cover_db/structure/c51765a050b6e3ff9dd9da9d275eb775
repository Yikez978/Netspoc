{"statement":[4,4,4,5,5,5,6,7,7,7,8,8,8,9,9,9,10,10,10,18,18,13,33,34,37,37,38,39,40,42,43,44,149,150,1479,1479,1479,1483,1483,1483,114,119,123,124,126,127,128,129,130,132,138,140,142,156,157,158,160,161,176,177,179,180,181,182,183,185,189,189,190,199,202,216,217,221,222,226,227,234,235,236,239,240,241,242,244,246,247,249,252,252,253,259,262,263,264,265,267,269,270,272,272,274,280,281,284,286,290,291,292,294,295,297,297,298,302,305,306,307,309,310,312,312,313,320,323,325,326,327,329,339,351,355,358,360,361,362,364,374,377,379,382,390,391,392,393,394,395,400,407,408,412,418,425,427,428,430,432,434,437,437,438,439,440,442,446,448,449,450,452,453,454,455,459,460,463,466,469,471,473,474,483,484,486,486,492,495,495,496,497,501,503,504,505,506,507,509,512,519,520,521,522,523,525,526,531,532,533,534,538,539,544,545,546,548,549,549,552,559,560,563,562,565,571,572,577,577,579,581,582,583,588,589,590,591,592,597,598,600,601,605,613,614,615,616,617,622,623,624,625,627,630,631,632,633,634,636,639,643,645,651,652,653,654,656,662,663,664,665,666,667,668,669,671,676,678,679,680,681,686,687,689,690,691,692,693,694,703,705,711,713,713,715,716,719,721,722,728,737,738,739,740,741,743,745,746,759,760,761,765,766,767,768,769,770,771,777,781,782,785,784,788,791,796,798,798,799,800,802,812,813,814,815,817,819,829,830,831,832,834,836,837,838,842,845,846,847,854,857,860,866,869,870,875,878,879,881,882,883,884,888,891,894,895,896,897,898,899,901,906,908,909,913,915,920,921,926,933,935,936,940,941,942,943,944,945,948,951,951,951,954,957,958,963,1039,1041,1042,1046,1047,1049,1050,1051,1052,1057,1058,1061,1061,1061,1064,1065,1066,1069,1072,1094,1098,1099,1100,1101,1103,1106,1108,1108,1109,1111,1111,1112,1114,1115,1116,1119,1125,1127,1131,1131,1132,1133,1135,1136,1138,1139,1142,1144,1147,1148,1149,1150,1152,1162,1165,1166,1167,1169,1175,1177,1178,1179,1182,1183,1184,1186,1189,1190,1196,1198,1199,1200,1203,1211,1212,1213,1214,1215,1218,1219,1220,1222,1226,1229,1230,1233,1241,1242,1243,1246,1250,1251,1256,1264,1265,1266,1270,1273,1284,1285,1286,1287,1289,1290,1291,1298,1301,1302,1304,1305,1308,1309,1312,1315,1316,1319,1323,1325,1327,1331,1337,1339,1340,1349,1350,1351,1352,1355,1356,1357,1358,1359,1365,1366,1368,1369,1372,1375,1375,1375,1378,1379,1380,1384,1384,1385,1386,1387,1393,1396,1402,1403,1406,1407,1408,1409,1411,1412,1415,1416,1419,1423,1430,1432,1439,1445,1447,1448,1451,1452,1453,1454,1455,1456,1457,1460,1473,1480,1481,1489,1482,1484,1487,1492,1500,1501,1502,1504,1505,1507,1509,1512,1522,1524,1526,1530,1531,1533,1534,1535,1537,1539,1541,1550,1552,1555,1557,1560,1562,1563,1565,1566,1568,1571,1572,1573,1577],"subroutine":[[4,"BEGIN"],[5,"BEGIN"],[6,"BEGIN"],[7,"BEGIN"],[8,"BEGIN"],[9,"BEGIN"],[10,"BEGIN"],[18,"BEGIN"],[33,"BEGIN"],[149,"BEGIN"],[1479,"BEGIN"],[1483,"BEGIN"],[114,"any_errata_seen"],[119,"detected_encoding"],[123,"encoding"],[156,"version_report"],[176,"output_string"],[189,"abandon_output_string"],[190,"abandon_output_fh"],[199,"new"],[216,"_handle_element_start"],[221,"_handle_element_end"],[226,"_handle_text"],[234,"accept_directive_as_verbatim"],[235,"accept_directive_as_data"],[236,"accept_directive_as_processed"],[239,"_accept_directives"],[259,"unaccept_directive"],[262,"unaccept_directives"],[280,"accept_target"],[281,"accept_target_as_text"],[284,"accept_targets"],[286,"accept_targets_as_text"],[290,"_accept_targets"],[302,"unaccept_target"],[305,"unaccept_targets"],[320,"accept_code"],[323,"accept_codes"],[355,"unaccept_code"],[358,"unaccept_codes"],[390,"parse_string_document"],[412,"_init_fh_source"],[425,"parse_file"],[483,"parse_from_file"],[519,"whine"],[531,"scream"],[538,"_complain_warn"],[544,"_complain_errata"],[559,"_get_initial_item_type"],[571,"_get_item_type"],[613,"_make_treelet"],[651,"_wrap_up"],[711,"_remap_sequences"],[812,"_ponder_extend"],[933,"_treat_Zs"],[1039,"_treat_Ls"],[1098,"__ANON__"],[1337,"_treat_Es"],[1430,"_treat_Ss"],[1445,"_change_S_to_nbsp"],[1480,"_accessorize"],[1484,"__ANON__"],[1500,"filter"],[1522,"_out"],[1550,"_duo"]],"pod":[[114,"any_errata_seen"],[119,"detected_encoding"],[123,"encoding"],[156,"version_report"],[176,"output_string"],[189,"abandon_output_string"],[190,"abandon_output_fh"],[199,"new"],[234,"accept_directive_as_verbatim"],[235,"accept_directive_as_data"],[236,"accept_directive_as_processed"],[259,"unaccept_directive"],[262,"unaccept_directives"],[280,"accept_target"],[281,"accept_target_as_text"],[284,"accept_targets"],[286,"accept_targets_as_text"],[302,"unaccept_target"],[305,"unaccept_targets"],[320,"accept_code"],[323,"accept_codes"],[355,"unaccept_code"],[358,"unaccept_codes"],[390,"parse_string_document"],[425,"parse_file"],[483,"parse_from_file"],[519,"whine"],[531,"scream"],[1500,"filter"]],"file":"/usr/local/lib/perl5/5.20.1/Pod/Simple.pm","condition":[[114,{"type":"or_2","left":"(shift())->{'errors_seen'}","op":"||","right":"0"}],[156,{"left":"ref $_[0]","type":"or_3","op":"||","right":"$_[0]"}],[180,{"op":"&&","right":"ref $_[0]","left":"defined $_[0]","type":"and_3"}],[199,{"type":"or_3","left":"ref $_[0]","right":"$_[0]","op":"||"}],[241,{"left":"defined $d","type":"and_3","op":"and","right":"length $d"}],[264,{"right":"length $d","op":"and","type":"and_3","left":"defined $d"}],[292,{"type":"and_3","left":"defined $t","op":"and","right":"length $t"}],[307,{"right":"length $t","op":"and","type":"and_3","left":"defined $t"}],[326,{"type":"and_3","left":"defined $new_code","op":"and","right":"length $new_code"}],[329,{"left":"$new_code =~ /[\\x00-\\x2C\\x2F\\x39\\x3B-\\x40\\x5B-\\x5E\\x60\\x7B-\\x7F]/","type":"or_3","right":"$new_code =~ /^[-\\.0-9]/s","op":"or"}],[329,{"right":"$new_code =~ /:[-\\.0-9]/s","op":"or","type":"or_3","left":"$new_code =~ /[\\x00-\\x2C\\x2F\\x39\\x3B-\\x40\\x5B-\\x5E\\x60\\x7B-\\x7F]/ or $new_code =~ /^[-\\.0-9]/s"}],[361,{"left":"defined $new_code","type":"and_3","right":"length $new_code","op":"and"}],[364,{"type":"or_3","left":"$new_code =~ /[\\x00-\\x2C\\x2F\\x39\\x3B-\\x40\\x5B-\\x5E\\x60\\x7B-\\x7F]/","right":"$new_code =~ /^[-\\.0-9]/s","op":"or"}],[364,{"op":"or","right":"$new_code =~ /:[-\\.0-9]/s","type":"or_3","left":"$new_code =~ /[\\x00-\\x2C\\x2F\\x39\\x3B-\\x40\\x5B-\\x5E\\x60\\x7B-\\x7F]/ or $new_code =~ /^[-\\.0-9]/s"}],[393,{"right":"length $line_group","op":"and","type":"and_3","left":"defined $line_group"}],[400,{"type":"or_3","left":"length $1","op":"or","right":"length $2"}],[400,{"right":"pos $line_group != length $line_group","op":"or","left":"length $1 or length $2","type":"or_3"}],[486,{"type":"or_3","left":"not length $source","right":"$source eq '-'","op":"or"}],[486,{"left":"not length $source or $source eq '-'","type":"or_3","op":"or","right":"$source =~ /^<&(STDIN|0)$/i"}],[495,{"type":"or_3","left":"not length $to","right":"$to eq '-'","op":"or"}],[495,{"right":"$to =~ /^>&?(?:STDOUT|1)$/i","op":"or","left":"not length $to or $to eq '-'","type":"or_3"}],[507,{"right":"$self->write_with_binmode","op":"and","type":"and_3","left":"$self->can('write_with_binmode')"}],[539,{"type":"or_2","left":"$$self{'source_filename'}","op":"||","right":"'Pod input'"}],[563,{"op":"and","right":"$1 ne '1'","left":"join(\"\\n\", @{$para;}[2 .. $#$para]) =~ /^\\s*(\\d+)\\.?\\s*$/s","type":"and_3"}],[579,{"right":"$content =~ /^\\s*$/s","op":"or","left":"$content =~ /^\\s*\\*\\s*$/s","type":"or_3"}],[617,{"left":"ref $_[0]","type":"and_3","right":"ref $_[0][0]","op":"and"}],[617,{"right":"$_[0][0][0] eq '~Top'","op":"and","type":"and_3","left":"ref $_[0] and ref $_[0][0]"}],[654,{"left":"$nixx","type":"or_3","op":"or","right":"$merge"}],[667,{"left":"$nixx","type":"and_3","right":"ref $$treelet[$i]","op":"and"}],[667,{"right":"$$treelet[$i][0] eq 'X'","op":"and","left":"$nixx and ref $$treelet[$i]","type":"and_3"}],[667,{"type":"and_3","left":"$merge","right":"$i != 2","op":"and"}],[667,{"left":"$merge and $i != 2","type":"and_3","right":"not ref $$treelet[$i]","op":"and"}],[667,{"left":"$merge and $i != 2 and not ref $$treelet[$i]","type":"and_3","op":"and","right":"not ref $$treelet[$i - 1]"}],[692,{"left":"defined($thing = $$treelet[$i][1]{$attrname})","type":"and_3","op":"and","right":"ref $thing"}],[713,{"right":"@{$stack[0];} == 3","op":"and","left":"@stack == 1","type":"and_3"}],[713,{"type":"and_3","left":"@stack == 1 and @{$stack[0];} == 3","right":"not ref $stack[0][2]","op":"and"}],[719,{"right":"die(\"NO accept_codes in $self?!?\")","op":"||","left":"$$self{'accept_codes'}","type":"or_2"}],[798,{"right":"@{$_[1];} == 3","op":"and","left":"@_ == 2","type":"and_3"}],[798,{"type":"and_3","left":"@_ == 2 and @{$_[1];} == 3","right":"not ref $_[1][2]","op":"and"}],[836,{"left":"$new_letter =~ /^[A-Z]$/s","type":"or_3","right":"$new_letter","op":"or"}],[857,{"right":"$fallbacks_one eq '0'","op":"or","type":"or_3","left":"$fallbacks_one =~ /^[A-Z](,[A-Z])*$/s"}],[857,{"type":"or_3","left":"$fallbacks_one =~ /^[A-Z](,[A-Z])*$/s or $fallbacks_one eq '0'","op":"or","right":"$fallbacks_one eq '1'"}],[882,{"right":"$f eq '0'","op":"or","type":"or_3","left":"exists $Pod::Simple::Known_formatting_codes{$f}"}],[882,{"op":"or","right":"$f eq '1'","left":"exists $Pod::Simple::Known_formatting_codes{$f} or $f eq '0'","type":"or_3"}],[951,{"right":"$$treelet[$i][2] eq ''","op":"and","type":"and_3","left":"@{$$treelet[$i];} == 3"}],[951,{"left":"@{$$treelet[$i];} == 2","type":"or_3","op":"or","right":"@{$$treelet[$i];} == 3 and $$treelet[$i][2] eq ''"}],[1061,{"type":"and_3","left":"@{$ell;} == 3","op":"and","right":"$$ell[2] eq ''"}],[1061,{"right":"@{$ell;} == 3 and $$ell[2] eq ''","op":"or","type":"or_3","left":"@{$ell;} == 2"}],[1069,{"type":"and_3","left":"not ref $$ell[2]","right":"$$ell[2] =~ /\\A\\s/","op":"and"}],[1069,{"op":"and","right":"$$ell[-1] =~ /\\s\\z/","type":"and_3","left":"not ref $$ell[-1]"}],[1069,{"left":"not ref $$ell[2] and $$ell[2] =~ /\\A\\s/","type":"or_3","op":"or","right":"not ref $$ell[-1] and $$ell[-1] =~ /\\s\\z/"}],[1131,{"type":"and_3","left":"@{$ell;} == 3","right":"not ref $$ell[2]","op":"and"}],[1198,{"left":"ref $_","type":"or_3","op":"||","right":"length $_"}],[1199,{"right":"length $_","op":"||","left":"ref $_","type":"or_3"}],[1229,{"op":"||","right":"length $_","type":"or_3","left":"ref $_"}],[1230,{"left":"ref $_","type":"or_3","op":"||","right":"length $_"}],[1233,{"type":"and_3","left":"@section_name","right":"not ref $section_name[0]","op":"and"}],[1233,{"right":"not ref $section_name[-1]","op":"and","left":"@section_name and not ref $section_name[0]","type":"and_3"}],[1233,{"right":"$section_name[0] =~ /^\\\"/s","op":"and","left":"@section_name and not ref $section_name[0] and not ref $section_name[-1]","type":"and_3"}],[1233,{"left":"@section_name and not ref $section_name[0] and not ref $section_name[-1] and $section_name[0] =~ /^\\\"/s","type":"and_3","op":"and","right":"$section_name[-1] =~ /\\\"$/s"}],[1233,{"right":"$section_name[0] eq '\"'","op":"&&","type":"and_3","left":"@section_name == 1"}],[1233,{"left":"@section_name and not ref $section_name[0] and not ref $section_name[-1] and $section_name[0] =~ /^\\\"/s and $section_name[-1] =~ /\\\"$/s","type":"and_3","right":"not @section_name == 1 && $section_name[0] eq '\"'","op":"and"}],[1256,{"op":"and","right":"@ell_content","type":"and_3","left":"not $section_name"}],[1256,{"right":"not ref $ell_content[0]","op":"and","type":"and_3","left":"not $section_name and @ell_content"}],[1256,{"left":"not $section_name and @ell_content and not ref $ell_content[0]","type":"and_3","op":"and","right":"not ref $ell_content[-1]"}],[1256,{"op":"and","right":"$ell_content[0] =~ /^\\\"/s","type":"and_3","left":"not $section_name and @ell_content and not ref $ell_content[0] and not ref $ell_content[-1]"}],[1256,{"type":"and_3","left":"not $section_name and @ell_content and not ref $ell_content[0] and not ref $ell_content[-1] and $ell_content[0] =~ /^\\\"/s","right":"$ell_content[-1] =~ /\\\"$/s","op":"and"}],[1256,{"op":"&&","right":"$ell_content[0] eq '\"'","left":"@ell_content == 1","type":"and_3"}],[1256,{"left":"not $section_name and @ell_content and not ref $ell_content[0] and not ref $ell_content[-1] and $ell_content[0] =~ /^\\\"/s and $ell_content[-1] =~ /\\\"$/s","type":"and_3","op":"and","right":"not @ell_content == 1 && $ell_content[0] eq '\"'"}],[1270,{"right":"$link_text","op":"||","left":"$section_name","type":"or_3"}],[1270,{"right":"@ell_content","op":"and","type":"and_3","left":"not $section_name || $link_text"}],[1270,{"op":"&&","right":"/ /s","type":"and_3","left":"!ref($_)"}],[1270,{"type":"and_3","left":"not $section_name || $link_text and @ell_content","op":"and","right":"grep((!ref($_) && / /s), @ell_content)"}],[1298,{"left":"@ell_content == 1","type":"and_3","right":"not ref $ell_content[0]","op":"and"}],[1298,{"type":"and_3","left":"@ell_content == 1 and not ref $ell_content[0]","right":"$ell_content[0] =~ m[^[^/]+[(][-a-zA-Z0-9]+[)]$]s","op":"and"}],[1357,{"right":"ref $thing","op":"and","left":"defined($thing = $$treelet[$i][1]{$attrname})","type":"and_3"}],[1375,{"type":"and_3","left":"@{$$treelet[$i];} == 3","op":"and","right":"$$treelet[$i][2] eq ''"}],[1375,{"right":"@{$$treelet[$i];} == 3 and $$treelet[$i][2] eq ''","op":"or","left":"@{$$treelet[$i];} == 2","type":"or_3"}],[1384,{"left":"@{$$treelet[$i];} == 3","type":"and_3","op":"and","right":"not ref($content = $$treelet[$i][2])"}],[1406,{"right":"!1","op":"and","type":"and_2","left":"$charnum >= 255"}],[1448,{"left":"$in_s","type":"or_3","right":"$is_s","op":"||="}],[1484,{"left":"@_ == 1","type":"or_3","right":"@_ == 2","op":"||"}],[1484,{"left":"@_ == 1 || @_ == 2","type":"and_3","op":"and","right":"ref $_[0]"}],[1504,{"op":"||","right":"''","type":"or_2","left":"$source"}],[1524,{"type":"or_2","left":"$_[0]","right":"''","op":"||"}],[1524,{"right":"ref($_[0] || '') eq 'CODE'","op":"and","type":"and_3","left":"@_"}],[1530,{"type":"and_3","left":"ref $class","right":"$class->isa('Pod::Simple')","op":"&&"}],[1555,{"right":"''","op":"||","left":"$_[0]","type":"or_2"}],[1555,{"op":"and","right":"ref($_[0] || '') eq 'CODE'","type":"and_3","left":"@_"}]],"digest":"c51765a050b6e3ff9dd9da9d275eb775","start":{"1337":{"_treat_Es":[{"time":null,"statement":513,"condition":75,"pod":28,"branch":120,"subroutine":57}]},"-1":{"__COVER__":[{"statement":610,"condition":89,"time":null,"subroutine":65,"branch":144,"pod":29}]},"8":{"BEGIN":[{"subroutine":4,"branch":1,"pod":null,"statement":10,"condition":null,"time":null}]},"284":{"accept_targets":[{"condition":6,"statement":104,"time":null,"subroutine":31,"pod":15,"branch":22}]},"259":{"unaccept_directive":[{"statement":91,"condition":5,"time":null,"subroutine":27,"branch":18,"pod":11}]},"234":{"accept_directive_as_verbatim":[{"statement":77,"condition":4,"time":null,"subroutine":23,"pod":8,"branch":14}]},"149":{"BEGIN":[{"branch":6,"pod":null,"subroutine":9,"time":null,"statement":32,"condition":null}]},"1039":{"_treat_Ls":[{"subroutine":55,"branch":91,"pod":28,"statement":393,"condition":46,"time":null}]},"613":{"_make_treelet":[{"time":null,"condition":25,"statement":240,"pod":28,"branch":62,"subroutine":50}]},"226":{"_handle_text":[{"statement":75,"condition":4,"time":null,"subroutine":22,"branch":14,"pod":8}]},"933":{"_treat_Zs":[{"subroutine":54,"pod":28,"branch":88,"statement":376,"condition":44,"time":null}]},"7":{"BEGIN":[{"pod":null,"branch":1,"subroutine":3,"time":null,"condition":null,"statement":7}]},"281":{"accept_target_as_text":[{"condition":6,"statement":103,"time":null,"subroutine":30,"branch":22,"pod":14}]},"483":{"parse_from_file":[{"subroutine":43,"pod":25,"branch":41,"statement":180,"condition":17,"time":null}]},"1098":{"__ANON__":[{"time":null,"condition":75,"statement":513,"branch":120,"pod":28,"subroutine":56}]},"425":{"parse_file":[{"branch":33,"pod":24,"subroutine":42,"time":null,"condition":17,"statement":152}]},"216":{"_handle_element_start":[{"branch":14,"pod":8,"subroutine":20,"time":null,"statement":71,"condition":4}]},"262":{"unaccept_directives":[{"subroutine":28,"branch":18,"pod":12,"statement":92,"condition":5,"time":null}]},"320":{"accept_code":[{"pod":19,"branch":26,"subroutine":36,"time":null,"condition":8,"statement":123}]},"9":{"BEGIN":[{"branch":1,"pod":null,"subroutine":5,"time":null,"statement":13,"condition":null}]},"114":{"any_errata_seen":[{"condition":null,"statement":40,"time":null,"subroutine":12,"branch":6,"pod":null}]},"119":{"detected_encoding":[{"time":null,"statement":41,"condition":1,"pod":1,"branch":6,"subroutine":13}]},"651":{"_wrap_up":[{"pod":28,"branch":65,"subroutine":51,"time":null,"statement":259,"condition":27}]},"199":{"new":[{"branch":14,"pod":7,"subroutine":19,"time":null,"statement":69,"condition":3}]},"711":{"_remap_sequences":[{"subroutine":52,"pod":28,"branch":71,"statement":288,"condition":34,"time":null}]},"1550":{"_duo":[{"time":null,"statement":596,"condition":87,"branch":140,"pod":29,"subroutine":64}]},"1430":{"_treat_Ss":[{"time":null,"condition":80,"statement":555,"branch":128,"pod":28,"subroutine":58}]},"221":{"_handle_element_end":[{"condition":4,"statement":73,"time":null,"subroutine":21,"branch":14,"pod":8}]},"176":{"output_string":[{"branch":11,"pod":4,"subroutine":16,"time":null,"condition":2,"statement":58}]},"1500":{"filter":[{"time":null,"statement":577,"condition":83,"pod":28,"branch":135,"subroutine":62}]},"358":{"unaccept_codes":[{"condition":11,"statement":132,"time":null,"subroutine":39,"branch":28,"pod":22}]},"6":{"BEGIN":[{"time":null,"condition":null,"statement":6,"pod":null,"branch":null,"subroutine":2}]},"239":{"_accept_directives":[{"pod":11,"branch":14,"subroutine":26,"time":null,"condition":4,"statement":80}]},"236":{"accept_directive_as_processed":[{"statement":79,"condition":4,"time":null,"subroutine":25,"pod":10,"branch":14}]},"1484":{"__ANON__":[{"subroutine":61,"pod":28,"branch":135,"statement":577,"condition":83,"time":null}]},"33":{"BEGIN":[{"statement":22,"condition":null,"time":null,"subroutine":8,"pod":null,"branch":1}]},"1483":{"BEGIN":[{"branch":6,"pod":null,"subroutine":11,"time":null,"statement":37,"condition":null}]},"531":{"scream":[{"statement":204,"condition":22,"time":null,"subroutine":45,"pod":27,"branch":54}]},"305":{"unaccept_targets":[{"pod":18,"branch":24,"subroutine":35,"time":null,"condition":7,"statement":115}]},"412":{"_init_fh_source":[{"time":null,"statement":150,"condition":17,"pod":24,"branch":33,"subroutine":41}]},"544":{"_complain_errata":[{"time":null,"statement":210,"condition":23,"branch":55,"pod":28,"subroutine":47}]},"323":{"accept_codes":[{"subroutine":37,"pod":20,"branch":26,"statement":124,"condition":8,"time":null}]},"559":{"_get_initial_item_type":[{"time":null,"statement":217,"condition":23,"pod":28,"branch":56,"subroutine":48}]},"189":{"abandon_output_string":[{"statement":66,"condition":3,"time":null,"subroutine":17,"branch":14,"pod":5}]},"538":{"_complain_warn":[{"subroutine":46,"branch":55,"pod":28,"condition":22,"statement":208,"time":null}]},"4":{"BEGIN":[{"subroutine":null,"pod":null,"branch":null,"statement":null,"condition":null,"time":null}]},"571":{"_get_item_type":[{"branch":58,"pod":28,"subroutine":49,"time":null,"statement":222,"condition":24}]},"1480":{"_accessorize":[{"branch":132,"pod":28,"subroutine":60,"time":null,"condition":81,"statement":570}]},"18":{"BEGIN":[{"time":null,"statement":19,"condition":null,"branch":1,"pod":null,"subroutine":7}]},"812":{"_ponder_extend":[{"time":null,"statement":328,"condition":39,"pod":28,"branch":78,"subroutine":53}]},"190":{"abandon_output_fh":[{"subroutine":18,"branch":14,"pod":6,"condition":3,"statement":68,"time":null}]},"1522":{"_out":[{"condition":84,"statement":585,"time":null,"subroutine":63,"pod":29,"branch":137}]},"286":{"accept_targets_as_text":[{"branch":22,"pod":16,"subroutine":32,"time":null,"statement":105,"condition":6}]},"156":{"version_report":[{"time":null,"condition":1,"statement":53,"branch":10,"pod":3,"subroutine":15}]},"235":{"accept_directive_as_data":[{"branch":14,"pod":9,"subroutine":24,"time":null,"condition":4,"statement":78}]},"280":{"accept_target":[{"subroutine":29,"branch":22,"pod":13,"statement":102,"condition":6,"time":null}]},"355":{"unaccept_code":[{"subroutine":38,"branch":28,"pod":21,"statement":131,"condition":11,"time":null}]},"390":{"parse_string_document":[{"branch":31,"pod":23,"subroutine":40,"time":null,"condition":14,"statement":141}]},"290":{"_accept_targets":[{"condition":6,"statement":106,"time":null,"subroutine":33,"branch":22,"pod":17}]},"1479":{"BEGIN":[{"branch":6,"pod":null,"subroutine":10,"time":null,"condition":null,"statement":34}]},"123":{"encoding":[{"subroutine":14,"branch":6,"pod":2,"condition":1,"statement":42,"time":null}]},"5":{"BEGIN":[{"subroutine":1,"pod":null,"branch":null,"statement":3,"condition":null,"time":null}]},"1445":{"_change_S_to_nbsp":[{"branch":129,"pod":28,"subroutine":59,"time":null,"statement":558,"condition":80}]},"10":{"BEGIN":[{"branch":1,"pod":null,"subroutine":6,"time":null,"statement":16,"condition":null}]},"302":{"unaccept_target":[{"time":null,"condition":7,"statement":114,"pod":17,"branch":24,"subroutine":34}]},"519":{"whine":[{"subroutine":44,"branch":52,"pod":26,"condition":22,"statement":197,"time":null}]}},"branch":[[6,{"text":"unless defined &DEBUG"}],[33,{"text":"if (defined &ASCII) { }"}],[37,{"text":"unless (defined &MANY_LINES)"}],[39,{"text":"unless (MANY_LINES >= 1)"}],[42,{"text":"if (defined &UNICODE) { }"}],[42,{"text":"elsif ($] >= 5.008) { }"}],[124,{"text":"unless @_"}],[129,{"text":"if (not $$this{'encoding_command_statuses'}) { }"}],[129,{"text":"elsif ($$this{'encoding_command_statuses'}[-1]) { }"}],[127,{"text":"if ($$this{'_processed_encoding'}) { }"}],[157,{"text":"if ($class eq 'Pod::Simple') { }"}],[177,{"text":"unless @_"}],[180,{"text":"defined $_[0] && ref $_[0] ? :"}],[181,{"text":"unless defined $$x"}],[241,{"text":"unless defined $d and length $d"}],[242,{"text":"unless $d =~ /^[a-zA-Z][a-zA-Z0-9]*$/s"}],[244,{"text":"if exists $Pod::Simple::Known_directives{$d}"}],[252,{"text":"if wantarray"}],[264,{"text":"unless defined $d and length $d"}],[265,{"text":"unless $d =~ /^[a-zA-Z][a-zA-Z0-9]*$/s"}],[267,{"text":"if exists $Pod::Simple::Known_directives{$d}"}],[272,{"text":"if wantarray"}],[292,{"text":"unless defined $t and length $t"}],[297,{"text":"if wantarray"}],[307,{"text":"unless defined $t and length $t"}],[312,{"text":"if wantarray"}],[326,{"text":"unless defined $new_code and length $new_code"}],[329,{"text":"if $new_code =~ /[\\x00-\\x2C\\x2F\\x39\\x3B-\\x40\\x5B-\\x5E\\x60\\x7B-\\x7F]/ or $new_code =~ /^[-\\.0-9]/s or $new_code =~ /:[-\\.0-9]/s"}],[361,{"text":"unless defined $new_code and length $new_code"}],[364,{"text":"if $new_code =~ /[\\x00-\\x2C\\x2F\\x39\\x3B-\\x40\\x5B-\\x5E\\x60\\x7B-\\x7F]/ or $new_code =~ /^[-\\.0-9]/s or $new_code =~ /:[-\\.0-9]/s"}],[374,{"text":"if grep(($new_code eq $_), @Pod::Simple::Known_formatting_codes)"}],[393,{"text":"unless defined $line_group and length $line_group"}],[400,{"text":"if length $1 or length $2 or pos $line_group != length $line_group"}],[438,{"text":"unless open PODSOURCE, \"<$source\""}],[427,{"text":"if (not defined $source) { }"}],[427,{"text":"elsif (ref \\$source eq 'GLOB') { }"}],[427,{"text":"elsif (ref $source) { }"}],[427,{"text":"elsif (not length $source) { }"}],[455,{"text":"unless defined $lines[-1]"}],[460,{"text":"if $at_eof"}],[469,{"text":"if $at_eof"}],[484,{"text":"unless ref $self"}],[486,{"text":"if (not defined $source) { }"}],[486,{"text":"elsif (ref \\$source eq 'GLOB') { }"}],[486,{"text":"elsif (ref $source) { }"}],[486,{"text":"elsif (not length $source or $source eq '-' or $source =~ /^<&(STDIN|0)$/i) { }"}],[506,{"text":"unless open $out_fh, \">$to\""}],[507,{"text":"if $self->can('write_with_binmode') and $self->write_with_binmode"}],[495,{"text":"if (not defined $to) { }"}],[495,{"text":"elsif (ref \\$to eq 'GLOB') { }"}],[495,{"text":"elsif (ref $to) { }"}],[495,{"text":"elsif (not length $to or $to eq '-' or $to =~ /^>&?(?:STDOUT|1)$/i) { }"}],[521,{"text":"if ($$self{'no_whining'})"}],[525,{"text":"if $$self{'complain_stderr'}"}],[533,{"text":"if $$self{'complain_stderr'}"}],[545,{"text":"if ($$self{'no_errata_section'}) { }"}],[560,{"text":"if $$para[1]{'~type'}"}],[563,{"text":"if join(\"\\n\", @{$para;}[2 .. $#$para]) =~ /^\\s*(\\d+)\\.?\\s*$/s and $1 ne '1'"}],[572,{"text":"if $$para[1]{'~type'}"}],[579,{"text":"if ($content =~ /^\\s*\\*\\s*$/s or $content =~ /^\\s*$/s) { }"}],[579,{"text":"elsif ($content =~ /^\\s*\\*\\s+(.+)/s) { }"}],[579,{"text":"elsif ($content =~ /^\\s*(\\d+)\\.?\\s*$/s) { }"}],[615,{"text":"unless (@_)"}],[617,{"text":"if (ref $_[0] and ref $_[0][0] and $_[0][0][0] eq '~Top') { }"}],[630,{"text":"if ($self->_remap_sequences($treelet)) { }"}],[654,{"text":"unless $nixx or $merge"}],[692,{"text":"if (defined($thing = $$treelet[$i][1]{$attrname}) and ref $thing)"}],[689,{"text":"if ($$treelet[$i][0] eq 'L')"}],[667,{"text":"if ($nixx and ref $$treelet[$i] and $$treelet[$i][0] eq 'X') { }"}],[667,{"text":"elsif ($merge and $i != 2 and not ref $$treelet[$i] and not ref $$treelet[$i - 1]) { }"}],[667,{"text":"elsif (ref $$treelet[$i]) { }"}],[713,{"text":"if (@stack == 1 and @{$stack[0];} == 3 and not ref $stack[0][2])"}],[741,{"text":"unless ref $$treelet[$i]"}],[759,{"text":"unless (defined $is)"}],[765,{"text":"if (ref $is) { }"}],[765,{"text":"elsif ($is eq '0') { }"}],[765,{"text":"elsif ($is eq '1') { }"}],[798,{"text":"if (@_ == 2 and @{$_[1];} == 3 and not ref $_[1][2])"}],[832,{"text":"defined $3 ? :"}],[836,{"text":"unless ($new_letter =~ /^[A-Z]$/s or $new_letter)"}],[845,{"text":"if (grep(($new_letter eq $_), @Pod::Simple::Known_formatting_codes))"}],[857,{"text":"unless ($fallbacks_one =~ /^[A-Z](,[A-Z])*$/s or $fallbacks_one eq '0' or $fallbacks_one eq '1')"}],[869,{"text":"unless ($elements_one =~ /^[^ ,]+(,[^ ,]+)*$/s)"}],[882,{"text":"if exists $Pod::Simple::Known_formatting_codes{$f} or $f eq '0' or $f eq '1'"}],[896,{"text":"if (exists $$self{'accept_codes'}{$e}) { }"}],[913,{"text":"@fallbacks == 1 ? :"}],[906,{"text":"if (defined $canonical_form) { }"}],[819,{"text":"if ($content =~ /^\n\f      (\\S+)         # 1 : new item\n\f      \\s+\n\f      (\\S+)         # 2 : fallback(s)\n\f      (?:\\s+(\\S+))? # 3 : element name(s)\n\f      \\s*\n\f      $\n\f    /sx) { }"}],[942,{"text":"unless ref $$treelet[$i]"}],[943,{"text":"unless ($$treelet[$i][0] eq 'Z')"}],[951,{"text":"unless (@{$$treelet[$i];} == 2 or @{$$treelet[$i];} == 3 and $$treelet[$i][2] eq '')"}],[1049,{"text":"unless ref $$treelet[$i]"}],[1050,{"text":"unless ($$treelet[$i][0] eq 'L')"}],[1061,{"text":"if (@{$ell;} == 2 or @{$ell;} == 3 and $$ell[2] eq '')"}],[1069,{"text":"if (not ref $$ell[2] and $$ell[2] =~ /\\A\\s/ or not ref $$ell[-1] and $$ell[-1] =~ /\\s\\z/)"}],[1099,{"text":"if ref $$ell[$_]"}],[1100,{"text":"unless $$ell[$_] =~ /^(?:([^|]*)\\|)?(\\w+:[^:\\s]\\S*)$/s"}],[1109,{"text":"if defined $text_part"}],[1114,{"text":"unless (@text)"}],[1119,{"text":"@url == 1 ? :"}],[1094,{"text":"if (my($url_index, $text_part, $url_part) = sub {\n\tforeach $_ (2 .. $#$ell) {\n\tnext if ref $$ell[$_];\nnext unless $$ell[$_] =~ /^(?:([^|]*)\\|)?(\\w+:[^:\\s]\\S*)$/s;\nreturn $_, $1, $2;\n}\u000b;\nreturn;\n}\n->())"}],[1133,{"text":"if ($it =~ m[^[^/|]+[(][-a-zA-Z0-9]+[)]$]s)"}],[1144,{"text":"if ($it =~ /^[^\\/\\|,\\$\\%\\@\\ \\\"\\<\\>\\:\\#\\&\\*\\{\\}\\[\\]\\(\\)]+(\\:\\:[^\\/\\|,\\$\\%\\@\\ \\\"\\<\\>\\:\\#\\&\\*\\{\\}\\[\\]\\(\\)]+)*$/s)"}],[1131,{"text":"if (@{$ell;} == 3 and not ref $$ell[2])"}],[1178,{"text":"if ref $ell_content[$j]"}],[1189,{"text":"if ($link_text[0] =~ m[[|/]])"}],[1182,{"text":"if ($ell_content[$j] =~ /^([^\\|]*)\\|(.*)$/s)"}],[1214,{"text":"if ref $ell_content[$j]"}],[1233,{"text":"if (@section_name and not ref $section_name[0] and not ref $section_name[-1] and $section_name[0] =~ /^\\\"/s and $section_name[-1] =~ /\\\"$/s and not @section_name == 1 && $section_name[0] eq '\"') { }"}],[1218,{"text":"if ($ell_content[$j] =~ m[^([^/]*)/(.*)$]s)"}],[1256,{"text":"if (not $section_name and @ell_content and not ref $ell_content[0] and not ref $ell_content[-1] and $ell_content[0] =~ /^\\\"/s and $ell_content[-1] =~ /\\\"$/s and not @ell_content == 1 && $ell_content[0] eq '\"')"}],[1270,{"text":"if (not $section_name || $link_text and @ell_content and grep((!ref($_) && / /s), @ell_content))"}],[1287,{"text":"if $section_name"}],[1290,{"text":"if $section_name"}],[1289,{"text":"if (@ell_content)"}],[1284,{"text":"unless ($link_text)"}],[1298,{"text":"if (@ell_content == 1 and not ref $ell_content[0] and $ell_content[0] =~ m[^[^/]+[(][-a-zA-Z0-9]+[)]$]s) { }"}],[1308,{"text":"if (defined $section_name)"}],[1315,{"text":"if (@ell_content)"}],[1323,{"text":"defined $link_text ? :"}],[1351,{"text":"unless ref $$treelet[$i]"}],[1357,{"text":"if (defined($thing = $$treelet[$i][1]{$attrname}) and ref $thing)"}],[1352,{"text":"if ($$treelet[$i][0] eq 'L') { }"}],[1352,{"text":"elsif ($$treelet[$i][0] ne 'E') { }"}],[1375,{"text":"if (@{$$treelet[$i];} == 2 or @{$$treelet[$i];} == 3 and $$treelet[$i][2] eq '')"}],[1384,{"text":"unless (@{$$treelet[$i];} == 3 and not ref($content = $$treelet[$i][2]))"}],[1406,{"text":"if (not defined $charnum) { }"}],[1406,{"text":"elsif ($charnum >= 255 and !1) { }"}],[1432,{"text":"if $$self{'nbsp_for_S'}"}],[1453,{"text":"if (_change_S_to_nbsp($$treelet[$i], $in_s))"}],[1460,{"text":"if $in_s"}],[1452,{"text":"if (ref $$treelet[$i]) { }"}],[1481,{"text":"if $attrname =~ /::/"}],[1484,{"text":"unless @_ == 1 || @_ == 2 and ref $_[0]"}],[1487,{"text":"@_ == 1 ? :"}],[1504,{"text":"if (ref($source || '') eq 'SCALAR') { }"}],[1504,{"text":"elsif (ref $source) { }"}],[1524,{"text":"if @_ and ref($_[0] || '') eq 'CODE'"}],[1530,{"text":"ref $class && $class->isa('Pod::Simple') ? :"}],[1537,{"text":"if $mutor"}],[1552,{"text":"unless wantarray"}],[1555,{"text":"if @_ and ref($_[0] || '') eq 'CODE'"}],[1557,{"text":"unless @_ == 2"}],[1572,{"text":"if $mutor"}]]}
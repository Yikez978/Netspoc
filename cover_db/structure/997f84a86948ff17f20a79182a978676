{"subroutine":[[29,"_fetch_sub"],[128,"export_fail"],[132,"_cgc"],[137,"longmess"],[158,"shortmess"],[166,"croak"],[167,"confess"],[168,"carp"],[169,"cluck"],[181,"caller_info"],[253,"format_arg"],[261,"__ANON__"],[272,"__ANON__"],[314,"CARP_TRACE"],[343,"get_status"],[352,"get_subname"],[376,"long_error_loc"],[413,"longmess_heavy"],[421,"ret_backtrace"],[454,"ret_summary"],[472,"short_error_loc"],[506,"shortmess_heavy"],[519,"str_len_trim"],[534,"trusts"],[554,"trusts_directly"]],"pod":[[128,"export_fail"],[137,"longmess"],[158,"shortmess"],[166,"croak"],[167,"confess"],[168,"carp"],[169,"cluck"],[181,"caller_info"],[253,"format_arg"],[343,"get_status"],[352,"get_subname"],[376,"long_error_loc"],[413,"longmess_heavy"],[421,"ret_backtrace"],[454,"ret_summary"],[472,"short_error_loc"],[506,"shortmess_heavy"],[519,"str_len_trim"],[534,"trusts"],[554,"trusts_directly"]],"statement":[29,30,32,33,34,35,36,128,128,128,132,132,132,133,137,144,145,146,147,150,151,158,159,162,163,166,167,168,169,181,182,183,192,192,195,199,200,203,204,205,206,209,210,211,225,228,229,230,232,233,236,236,238,239,244,246,247,253,255,257,259,260,261,261,262,262,265,270,271,272,272,273,273,273,276,280,281,284,285,286,288,289,290,291,293,306,307,307,309,310,314,315,316,324,324,326,327,328,329,331,332,333,335,343,344,345,346,346,352,353,354,355,356,359,360,366,367,370,376,377,379,379,380,381,382,383,386,387,388,389,398,399,402,405,406,407,409,413,414,415,421,422,423,424,426,427,428,429,432,433,434,435,436,437,438,440,441,444,446,447,450,454,455,456,458,459,460,461,464,465,472,473,474,476,476,477,478,479,481,482,483,487,488,489,492,495,496,497,498,499,500,502,506,507,508,509,510,513,519,520,521,522,524,534,535,536,537,540,541,542,543,544,545,546,547,549,554,556,556,557,560,560,560,561,561,564],"start":{"166":{"croak":[{"subroutine":5,"pod":3,"branch":8,"condition":3,"statement":25,"time":null}]},"413":{"longmess_heavy":[{"subroutine":17,"branch":36,"pod":12,"condition":13,"statement":137,"time":null}]},"158":{"shortmess":[{"statement":21,"condition":3,"time":null,"subroutine":4,"branch":7,"pod":2}]},"132":{"_cgc":[{"time":null,"statement":10,"condition":2,"branch":4,"pod":1,"subroutine":2}]},"352":{"get_subname":[{"time":null,"statement":108,"condition":13,"branch":24,"pod":10,"subroutine":15}]},"-1":{"__COVER__":[{"statement":226,"condition":19,"time":null,"subroutine":25,"branch":62,"pod":20}]},"261":{"__ANON__":[{"time":null,"condition":11,"statement":90,"branch":22,"pod":9,"subroutine":11}]},"128":{"export_fail":[{"statement":7,"condition":2,"time":null,"subroutine":1,"pod":null,"branch":3}]},"167":{"confess":[{"subroutine":6,"branch":8,"pod":4,"condition":3,"statement":26,"time":null}]},"376":{"long_error_loc":[{"pod":11,"branch":28,"subroutine":16,"time":null,"condition":13,"statement":118}]},"343":{"get_status":[{"pod":9,"branch":24,"subroutine":14,"time":null,"statement":103,"condition":12}]},"169":{"cluck":[{"subroutine":8,"pod":6,"branch":8,"condition":3,"statement":28,"time":null}]},"421":{"ret_backtrace":[{"condition":13,"statement":140,"time":null,"subroutine":18,"pod":13,"branch":37}]},"554":{"trusts_directly":[{"pod":19,"branch":61,"subroutine":24,"time":null,"statement":216,"condition":17}]},"137":{"longmess":[{"subroutine":3,"branch":5,"pod":1,"condition":2,"statement":14,"time":null}]},"272":{"__ANON__":[{"pod":9,"branch":22,"subroutine":12,"time":null,"condition":11,"statement":90}]},"534":{"trusts":[{"branch":60,"pod":18,"subroutine":23,"time":null,"condition":16,"statement":203}]},"472":{"short_error_loc":[{"condition":13,"statement":170,"time":null,"subroutine":20,"branch":43,"pod":15}]},"181":{"caller_info":[{"subroutine":9,"pod":7,"branch":8,"condition":3,"statement":29,"time":null}]},"29":{"_fetch_sub":[{"condition":null,"statement":null,"time":null,"subroutine":null,"pod":null,"branch":null}]},"314":{"CARP_TRACE":[{"pod":9,"branch":22,"subroutine":13,"time":null,"condition":11,"statement":90}]},"519":{"str_len_trim":[{"branch":59,"pod":17,"subroutine":22,"time":null,"statement":198,"condition":14}]},"506":{"shortmess_heavy":[{"time":null,"condition":14,"statement":192,"pod":16,"branch":56,"subroutine":21}]},"168":{"carp":[{"branch":8,"pod":5,"subroutine":7,"time":null,"statement":27,"condition":3}]},"454":{"ret_summary":[{"subroutine":19,"branch":41,"pod":14,"statement":161,"condition":13,"time":null}]},"253":{"format_arg":[{"pod":8,"branch":15,"subroutine":10,"time":null,"condition":7,"statement":57}]}},"branch":[[32,{"text":"unless exists $main::main::{$pack}"}],[34,{"text":"unless ref \\$_ eq 'GLOB' and *$_{'HASH'} and exists $$_{$sub}"}],[36,{"text":"ref \\$_ eq 'GLOB' ? :"}],[128,{"text":"if $_[0] eq 'verbose'"}],[132,{"text":"if defined &{'CORE::GLOBAL::caller';}"}],[145,{"text":"$cgc ? :"}],[146,{"text":"if ($Internal{$call_pack} or $CarpInternal{$call_pack}) { }"}],[162,{"text":"$cgc ? :"}],[195,{"text":"$cgc ? :"}],[199,{"text":"unless (defined $call_info{'file'})"}],[230,{"text":"if ($MaxArgNums and @args > $MaxArgNums)"}],[238,{"text":"if ($overflow)"}],[206,{"text":"if (@DB::args == 1 and ref $DB::args[0] eq ref \\$i and $DB::args[0] == \\$i) { }"}],[204,{"text":"if ($call_info{'has_args'})"}],[247,{"text":"wantarray ? :"}],[281,{"text":"$sub ? :"}],[257,{"text":"if (not $in_recurse and do {\n\tlocal $@;\nlocal $in_recurse = 1;\nlocal $SIG{'__DIE__'} = sub {\n\t\n}\n;\neval {\n\tdo {\n\t$arg->can('CARP_TRACE')\n}\n}\n}) { }"}],[257,{"text":"elsif (not $in_recurse and defined $RefArgFormatter and do {\n\tlocal $@;\nlocal $in_recurse = 1;\nlocal $SIG{'__DIE__'} = sub {\n\t\n}\n;\neval {\n\tdo {\n\t$arg = &$RefArgFormatter($arg);\n1\n}\n}\n}) { }"}],[255,{"text":"if (ref $arg)"}],[284,{"text":"unless defined $arg"}],[286,{"text":"if $arg =~ /\\A-?[0-9]+(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?\\z/"}],[289,{"text":"if (2 < $MaxArgLen and $MaxArgLen < length $arg)"}],[328,{"text":"if ($arg =~ /\\A\\(\\?\\^?([a-z]*)(?:-[a-z]*)?:(.*)\\)\\z/s)"}],[331,{"text":"if (2 < $MaxArgLen and $MaxArgLen < length $arg)"}],[355,{"text":"if ($$info{'is_require'}) { }"}],[353,{"text":"if (defined $$info{'evaltext'})"}],[366,{"text":"unless (defined $$info{'sub'})"}],[370,{"text":"$$info{'sub'} eq '(eval)' ? :"}],[381,{"text":"$cgc ? :"}],[398,{"text":"unless 0 > --$lvl"}],[386,{"text":"if (%Internal) { }"}],[386,{"text":"elsif (defined $caller[2]) { }"}],[383,{"text":"unless (defined $pkg)"}],[405,{"text":"if $CarpInternal{$pkg}"}],[406,{"text":"unless 0 > --$lvl"}],[407,{"text":"if $Internal{$pkg}"}],[413,{"text":"if ref $_[0]"}],[429,{"text":"if $tid"}],[427,{"text":"if (defined &threads::tid)"}],[440,{"text":"if ($@ =~ /^Died at .*(, <.*?> line \\d+).$/)"}],[434,{"text":"if (defined $.)"}],[461,{"text":"if $tid"}],[459,{"text":"if (defined &threads::tid)"}],[477,{"text":"$cgc ? :"}],[479,{"text":"$cgc ? :"}],[482,{"text":"$cgc ? :"}],[487,{"text":"if defined $called and $CarpInternal{$called}"}],[488,{"text":"unless 0 > --$lvl"}],[483,{"text":"if (@caller) { }"}],[481,{"text":"unless (defined $caller)"}],[495,{"text":"if $Internal{$caller}"}],[496,{"text":"if $CarpInternal{$caller}"}],[497,{"text":"if $CarpInternal{$called}"}],[498,{"text":"if trusts($called, $caller, $cache)"}],[499,{"text":"if trusts($caller, $called, $cache)"}],[500,{"text":"unless 0 > --$lvl"}],[506,{"text":"if $Verbose"}],[507,{"text":"if ref $_[0]"}],[509,{"text":"if ($i) { }"}],[521,{"text":"if (2 < $max and $max < length $str)"}],[542,{"text":"if exists $$known{$anc}"}],[560,{"text":"if ($$stash{$var} and *{$$stash{$var};}{'ARRAY'} and @{$$stash{$var};})"}]],"file":"/usr/local/lib/perl5/5.20.1/Carp.pm","condition":[[34,{"left":"ref \\$_ eq 'GLOB'","type":"and_2","right":"*$_{'HASH'}","op":"and"}],[34,{"left":"ref \\$_ eq 'GLOB' and *$_{'HASH'}","type":"and_3","right":"exists $$_{$sub}","op":"and"}],[146,{"right":"$CarpInternal{$call_pack}","op":"or","type":"or_3","left":"$Internal{$call_pack}"}],[206,{"op":"and","right":"ref $DB::args[0] eq ref \\$i","left":"@DB::args == 1","type":"and_3"}],[206,{"left":"@DB::args == 1 and ref $DB::args[0] eq ref \\$i","type":"and_3","op":"and","right":"$DB::args[0] == \\$i"}],[211,{"type":"or_2","left":"eval {\n\tdo {\n\treturn '' unless my $func = $cgc;\nmy $gv = (_fetch_sub('B', 'svref_2object') || (return ''))->($func)->GV;\nmy $package = $gv->STASH->NAME;\nmy $subname = $gv->NAME;\nreturn unless defined $package and defined $subname;\nreturn if $package eq 'CORE::GLOBAL' and $subname eq 'caller';\n\" in &${package}::$subname\"\n}\n}","op":"||","right":"''"}],[230,{"right":"@args > $MaxArgNums","op":"and","left":"$MaxArgNums","type":"and_3"}],[257,{"type":"and_3","left":"not $in_recurse","right":"do {\n\tlocal $@;\nlocal $in_recurse = 1;\nlocal $SIG{'__DIE__'} = sub {\n\t\n}\n;\neval {\n\tdo {\n\t$arg->can('CARP_TRACE')\n}\n}\n}","op":"and"}],[257,{"right":"defined $RefArgFormatter","op":"and","left":"not $in_recurse","type":"and_3"}],[257,{"left":"not $in_recurse and defined $RefArgFormatter","type":"and_3","right":"do {\n\tlocal $@;\nlocal $in_recurse = 1;\nlocal $SIG{'__DIE__'} = sub {\n\t\n}\n;\neval {\n\tdo {\n\t$arg = &$RefArgFormatter($arg);\n1\n}\n}\n}","op":"and"}],[289,{"left":"2 < $MaxArgLen","type":"and_3","right":"$MaxArgLen < length $arg","op":"and"}],[331,{"op":"and","right":"$MaxArgLen < length $arg","left":"2 < $MaxArgLen","type":"and_3"}],[345,{"op":"||=","right":"[{$pkg, $pkg}, [trusts_directly($pkg)]]","left":"$$cache{$pkg}","type":"or_2"}],[487,{"type":"and_3","left":"defined $called","right":"$CarpInternal{$called}","op":"and"}],[520,{"op":"||","right":"0","type":"or_2","left":"shift()"}],[521,{"left":"2 < $max","type":"and_3","right":"$max < length $str","op":"and"}],[540,{"right":"not exists $$known{$parent}","op":"and","left":"@$partial","type":"and_3"}],[560,{"type":"and_2","left":"$$stash{$var}","op":"and","right":"*{$$stash{$var};}{'ARRAY'}"}],[560,{"left":"$$stash{$var} and *{$$stash{$var};}{'ARRAY'}","type":"and_3","right":"@{$$stash{$var};}","op":"and"}]],"digest":"997f84a86948ff17f20a79182a978676"}
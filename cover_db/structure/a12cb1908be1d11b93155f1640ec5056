{"branch":[[42,{"text":"unless $ops_seen{$_}"}],[45,{"text":"unless (ref $sub)"}],[36,{"text":"if ($_ eq 'fallback') { }"}],[67,{"text":"unless $ops_seen{$_}"}],[69,{"text":"$_ eq 'fallback' ? :"}],[75,{"text":"if ref $package"}],[76,{"text":"unless mycan($package, '()')"}],[81,{"text":"unless $globref"}],[84,{"text":"if not ref $sub or $sub != \\&nil"}],[90,{"text":"if ref $package"}],[92,{"text":"unless ov_method(mycan($package, '(\"\"'), $package) or ov_method(mycan($package, '(0+'), $package) or ov_method(mycan($package, '(bool'), $package)"}],[105,{"text":"unless defined $package"}],[100,{"text":"if (ref $package)"}],[130,{"text":"if defined &{$fqmeth;}"}],[159,{"text":"unless defined $_[1]"}],[158,{"text":"if (warnings::enabled())"}],[148,{"text":"if (@_ == 1) { }"}],[148,{"text":"elsif (not exists $constants{$_[0]}) { }"}],[148,{"text":"elsif (not ref $_[1] && \"$_[1]\" =~ /(^|=)CODE\\(0x[0-9a-f]+\\)$/) { }"}]],"start":{"28":{"nil":[{"statement":null,"condition":null,"time":null,"subroutine":null,"branch":null,"pod":null}]},"31":{"OVERLOAD":[{"time":null,"condition":null,"statement":1,"pod":1,"branch":null,"subroutine":1}]},"147":{"constant":[{"subroutine":10,"branch":14,"pod":8,"statement":65,"condition":3,"time":null}]},"56":{"import":[{"branch":3,"pod":2,"subroutine":2,"time":null,"statement":21,"condition":null}]},"-1":{"__COVER__":[{"time":null,"condition":4,"statement":80,"branch":19,"pod":10,"subroutine":12}]},"173":{"remove_constant":[{"pod":9,"branch":19,"subroutine":11,"time":null,"condition":4,"statement":76}]},"115":{"AddrRef":[{"time":null,"condition":3,"statement":53,"branch":13,"pod":6,"subroutine":8}]},"80":{"ov_method":[{"branch":7,"pod":3,"subroutine":5,"time":null,"statement":35,"condition":null}]},"74":{"Overloaded":[{"statement":32,"condition":null,"time":null,"subroutine":4,"pod":2,"branch":5}]},"99":{"Method":[{"subroutine":7,"pod":5,"branch":11,"statement":45,"condition":3,"time":null}]},"89":{"OverloadedStringify":[{"condition":1,"statement":42,"time":null,"subroutine":6,"pod":4,"branch":9}]},"63":{"unimport":[{"subroutine":3,"pod":2,"branch":3,"condition":null,"statement":24,"time":null}]},"121":{"mycan":[{"subroutine":9,"branch":13,"pod":7,"condition":3,"statement":54,"time":null}]}},"file":"/usr/local/lib/perl5/5.20.1/overload.pm","condition":[[84,{"left":"not ref $sub","type":"or_3","right":"$sub != \\&nil","op":"or"}],[92,{"left":"ov_method(mycan($package, '(\"\"'), $package)","type":"or_3","right":"ov_method(mycan($package, '(0+'), $package)","op":"or"}],[92,{"left":"ov_method(mycan($package, '(\"\"'), $package) or ov_method(mycan($package, '(0+'), $package)","type":"or_3","right":"ov_method(mycan($package, '(bool'), $package)","op":"or"}],[148,{"type":"and_3","left":"ref $_[1]","op":"&&","right":"\"$_[1]\" =~ /(^|=)CODE\\(0x[0-9a-f]+\\)$/"}]],"digest":"a12cb1908be1d11b93155f1640ec5056","subroutine":[[28,"nil"],[31,"OVERLOAD"],[56,"import"],[63,"unimport"],[74,"Overloaded"],[80,"ov_method"],[89,"OverloadedStringify"],[99,"Method"],[115,"AddrRef"],[121,"mycan"],[147,"constant"],[173,"remove_constant"]],"pod":[[28,"nil"],[31,"OVERLOAD"],[74,"Overloaded"],[80,"ov_method"],[89,"OverloadedStringify"],[99,"Method"],[115,"AddrRef"],[121,"mycan"],[147,"constant"],[173,"remove_constant"]],"statement":[28,31,32,33,34,34,35,36,37,37,38,39,42,44,45,46,46,47,50,50,50,56,58,59,63,64,65,65,66,67,69,69,74,75,76,80,81,82,82,84,85,85,89,90,92,99,100,101,102,103,104,105,108,115,121,123,124,125,127,128,129,130,130,130,133,147,148,149,150,153,158,159,160,164,165,167,173,174,175,176]}
{"pod":[[145,"store_description"],[157,"fast_mode"],[308,"equal"],[316,"unique"],[321,"find_duplicates"],[327,"intersect"],[334,"subset_of"],[341,"max"],[351,"aref_delete"],[365,"aref_eq"],[374,"keys_eq"],[383,"warn_msg"],[405,"context"],[418,"syntax_err"],[423,"at_line"],[429,"check_abort"],[436,"abort_on_error"],[443,"error_atline"],[450,"err_msg"],[457,"internal_err"],[481,"skip_space_and_comment"],[495,"check"],[503,"skip"],[509,"check_int"],[519,"read_int"],[526,"check_ip"],[539,"read_ip"],[547,"read_ip_prefix"],[559,"read_ip_prefix_pair"],[564,"gen_ip"],[571,"print_ip"],[576,"read_identifier"],[587,"read_owner_pattern"],[598,"read_name"],[609,"read_string"],[623,"read_union"],[652,"check_typed_name"],[679,"read_typed_name"],[708,"read_extended_name"],[777,"read_user_id"],[788,"check_hostname"],[804,"read_complement"],[813,"read_intersection"],[835,"read_time_val"],[842,"add_description"],[858,"check_permit_deny"],[868,"check_nat_name"],[878,"split_typed_name"],[885,"check_flag"],[896,"check_assign"],[914,"read_list"],[930,"read_list_or_null"],[936,"read_assign_list"],[943,"check_assign_list"],[952,"check_assign_pair"],[973,"new"],[979,"add_attribute"],[988,"check_radius_attributes"],[1003,"check_routing"],[1010,"check_managed"],[1040,"check_model"],[1071,"host_as_interface"],[1112,"read_host"],[1223,"read_nat"],[1280,"read_network"],[1497,"read_interface"],[1799,"set_pix_interface_level"],[1843,"check_no_in_acl"],[1899,"read_router"],[2472,"move_locked_interfaces"],[2522,"read_aggregate"],[2572,"check_router_attributes"],[2607,"read_area"],[2671,"read_group"],[2684,"read_protocolgroup"],[2691,"read_port_range"],[2721,"read_port_ranges"],[2736,"read_icmp_type_code"],[2764,"read_proto_nr"],[2792,"gen_protocol_name"],[2838,"cache_anonymous_protocol"],[2852,"read_simple_protocol"],[2889,"check_protocol_modifiers"],[2906,"read_typed_name_or_simple_protocol"],[2910,"read_protocol"],[2921,"assign_union_allow_user"],[2931,"read_service"],[3015,"read_pathrestriction"],[3026,"read_attributed_object"],[3104,"read_isakmp"],[3142,"read_ipsec"],[3149,"read_crypto"],[3176,"read_owner"],[3241,"read_netspoc"],[3262,"read_file"],[3291,"read_file_or_dir"],[3357,"show_read_statistics"],[3372,"is_network"],[3373,"is_router"],[3374,"is_interface"],[3375,"is_host"],[3376,"is_subnet"],[3377,"is_area"],[3378,"is_zone"],[3379,"is_group"],[3380,"is_protocolgroup"],[3381,"is_autointerface"],[3386,"print_rule"],[3408,"get_orig_prt"],[3429,"prepare_prt_ordering"],[3491,"order_icmp"],[3517,"order_proto"],[3534,"order_ranges"],[3683,"expand_splitted_protocol"],[3738,"order_protocols"],[3787,"link_to_owner"],[3803,"link_to_real_owner"],[3822,"expand_watchers"],[3866,"link_owners"],[3958,"link_policy_distribution_point"],[3983,"link_general_permit"],[4029,"link_areas"],[4089,"link_interfaces"],[4144,"check_interface_ip"],[4206,"link_routers"],[4215,"link_subnet"],[4269,"link_subnets"],[4284,"add_pathrestriction"],[4298,"link_pathrestrictions"],[4397,"link_virtual_interfaces"],[4516,"is_redundany_group"],[4524,"check_ip_addresses"],[4624,"link_topology"],[4653,"disable_behind"],[4706,"check_bridged_networks"],[4769,"mark_disabled"],[4915,"split_ip_range"],[4931,"owner_eq"],[4938,"check_host_compatibility"],[4974,"convert_hosts"],[5158,"combine_subnets"],[5211,"get_intf"],[5226,"get_auto_intf"],[5266,"check_auto_intf"],[5332,"expand_group1"],[5830,"remove_duplicates"],[5849,"expand_group"],[5868,"expand_group_in_rule"],[5918,"check_unused_groups"],[5942,"expand_protocols"],[6003,"split_protocols"],[6050,"collect_log"],[6060,"check_log"],[6074,"normalize_log"],[6103,"expand_auto_intf_with_dst_list"],[6157,"substitute_auto_intf"],[6185,"classify_protocols"],[6235,"check_private_service"],[6268,"normalize_service_rules"],[6377,"normalize_services"],[6433,"propagate_owners"],[6754,"show_unknown_owners"],[6778,"set_service_owner"],[6899,"apply_src_dst_modifier"],[6933,"convert_hosts_in_rules"],[7011,"collect_unenforceable"],[7078,"show_unenforceable"],[7123,"warn_useless_unenforceable"],[7134,"remove_unenforceable_rules"],[7160,"split_rules_by_path"],[7204,"group_path_rules"],[7236,"build_rule_tree"],[7263,"get_zone"],[7313,"add_managed_hosts"],[7327,"show_duplicate_rules"],[7382,"collect_redundant_rules"],[7403,"show_redundant_rules"],[7443,"warn_unused_overlaps"],[7461,"expand_rules"],[7480,"check_expanded_rules"],[7527,"set_policy_distribution_ip"],[7665,"set_natdomain"],[7747,"distribute_nat1"],[7893,"distribute_nat"],[7905,"distribute_nat_info"],[8199,"invert_nat_set"],[8272,"adjust_crypto_nat"],[8300,"get_nat_network"],[8318,"check_subnets"],[8364,"nat_to_loopback_ok"],[8391,"by_name"],[8398,"find_subnets_in_zone"],[8665,"find_subnets_in_nat_domain"],[8889,"cluster_crosslink_routers"],[8943,"check_crosslink"],[9046,"get_managed_local_clusters"],[9168,"mark_managed_local"],[9222,"link_reroute_permit"],[9258,"add_managed_hosts_to_aggregate"],[9303,"link_aggregate_to_zone"],[9336,"link_implicit_aggregate_to_zone"],[9402,"link_aggregates"],[9494,"duplicate_aggregate_to_cluster"],[9531,"get_any"],[9587,"get_cluster_aggregates"],[9600,"set_zone1"],[9673,"set_zone_cluster"],[9718,"zone_eq"],[9732,"set_area1"],[9800,"inherit_router_attributes"],[9841,"nat_equal"],[9859,"check_useless_nat"],[9876,"inherit_area_nat"],[9909,"inherit_attributes_from_area"],[9922,"inherit_nat_to_subnets_in_zone"],[9984,"inherit_nat_in_zone"],[10011,"cleanup_after_inheritance"],[10029,"inherit_attributes"],[10040,"set_zones"],[10082,"cluster_zones"],[10103,"prepare_area_borders"],[10131,"set_area"],[10156,"set_areas"],[10214,"find_area_subset_relations"],[10276,"check_routers_in_nested_areas"],[10327,"clean_areas"],[10340,"set_zone"],[10361,"check_virtual_interfaces"],[10406,"check_pathrestrictions"],[10535,"traverse_loop_part"],[10578,"apply_pathrestriction_optimization"],[10642,"optimize_pathrestrictions"],[10709,"setpath_obj"],[10806,"set_loop_cluster"],[10839,"find_dists_and_loops"],[10866,"process_loops"],[10904,"setpath"],[10924,"get_path"],[11024,"cluster_path_mark1"],[11197,"cluster_navigation"],[11274,"cluster_path_mark"],[11635,"path_mark"],[11763,"loop_path_walk"],[11829,"path_walk"],[11960,"single_path_walk"],[11971,"set_auto_intf_from_border"],[12012,"add_pathresticted_interfaces"],[12023,"path_auto_interfaces"],[12138,"link_ipsec"],[12156,"link_crypto"],[12177,"gen_tunnel_rules"],[12216,"link_tunnels"],[12397,"crypto_behind"],[12441,"verify_asa_vpn_attributes"],[12473,"verify_subject_name"],[12496,"verify_asa_trustpoint"],[12509,"expand_crypto"],[12761,"setup_ref2obj"],[12805,"find_supernet"],[12831,"find_zone_network"],[12884,"find_matching_supernet"],[12925,"check_supernet_in_zone"],[12966,"is_filtered_at"],[12999,"check_supernet_src_rule"],[13139,"check_supernet_dst_rule"],[13208,"check_missing_supernet_rules"],[13244,"match_prt"],[13273,"match_prt_list"],[13283,"elements_in_one_zone"],[13317,"check_transient_supernet_rules"],[13431,"mark_stateful"],[13453,"check_supernet_rules"],[13483,"gen_reverse_rules1"],[13617,"gen_reverse_rules"],[13650,"mark_secondary"],[13680,"mark_primary"],[13706,"mark_local_secondary"],[13730,"get_zones"],[13744,"have_different_marks"],[13754,"have_set_and_equal_marks"],[13761,"mark_secondary_rules"],[13807,"get_zone_cluster_borders"],[13822,"mark_dynamic_host_nets"],[13857,"check_dynamic_nat_rules"],[14084,"find_redundant_rules"],[14160,"collect_nat_path"],[14179,"distribute_nat_to_device"],[14244,"add_networks"],[14268,"prepare_nat_commands"],[14321,"get_route_networks"],[14364,"set_routes_in_zone"],[14526,"add_path_routes"],[14563,"add_end_routes"],[14595,"get_route_path"],[14627,"generate_routing_tree1"],[14717,"generate_routing_tree"],[14776,"generate_routing_info"],[14857,"find_active_routes"],[14886,"fix_bridged_hops"],[14910,"check_and_convert_routes"],[15169,"print_header"],[15177,"print_routes"],[15425,"print_nat1"],[15507,"print_pix_static"],[15602,"optimize_nat_networks"],[15655,"print_nat"],[15671,"distribute_rule"],[15822,"add_router_acls"],[15939,"create_general_permit_rules"],[15954,"distribute_general_permit"],[16018,"rules_distribution"],[16048,"address"],[16118,"ios_route_code"],[16128,"prefix_code"],[16136,"full_prefix_code"],[16146,"print_acl_placeholder"],[16156,"get_split_tunnel_nets"],[16181,"print_asavpn"],[16487,"print_acl_prefix"],[16520,"print_acl_suffix"],[16533,"print_iptables_acls"],[16579,"print_cisco_acls"],[16716,"generate_acls"],[16731,"gen_crypto_rules"],[16736,"print_ezvpn"],[16822,"print_crypto_acl"],[16852,"print_crypto_filter_acl"],[16875,"print_crypto_map_attributes"],[16918,"print_tunnel_group"],[16944,"print_ca_and_tunnel_group_map"],[16955,"print_static_crypto_map"],[17033,"print_dynamic_crypto_map"],[17083,"print_crypto"],[17272,"print_interface"],[17342,"print_address"],[17349,"print_prt"],[17372,"print_acls"],[17613,"check_output_dir"],[17642,"print_code"],[17739,"copy_raw"],[17785,"show_version"],[17791,"concurrent"],[17858,"init_protocols"],[17977,"init_global_vars"],[18007,"compile"]],"start":{"11763":{"loop_path_walk":[{"statement":5096,"pod":242,"condition":269,"time":null,"branch":1505,"subroutine":276}]},"495":{"check":[{"condition":null,"statement":118,"pod":21,"subroutine":31,"branch":13,"time":null}]},"17272":{"print_interface":[{"subroutine":380,"branch":2150,"time":null,"condition":414,"pod":333,"statement":7636}]},"5573":{"__ANON__":[{"statement":2521,"pod":145,"condition":111,"time":null,"branch":800,"subroutine":160}]},"15822":{"add_router_acls":[{"time":null,"branch":2014,"subroutine":353,"pod":307,"statement":6923,"condition":401}]},"3104":{"read_isakmp":[{"branch":455,"time":null,"subroutine":100,"condition":61,"pod":89,"statement":1297}]},"4769":{"mark_disabled":[{"subroutine":150,"time":null,"branch":653,"statement":2036,"pod":135,"condition":87}]},"3291":{"read_file_or_dir":[{"subroutine":106,"time":null,"branch":479,"statement":1363,"pod":95,"condition":62}]},"15169":{"print_header":[{"condition":375,"statement":6597,"pod":300,"subroutine":342,"branch":1935,"time":null}]},"3822":{"expand_watchers":[{"time":null,"branch":531,"subroutine":131,"pod":117,"statement":1571,"condition":70}]},"3376":{"is_subnet":[{"condition":64,"statement":1413,"pod":101,"subroutine":114,"branch":490,"time":null}]},"11024":{"cluster_path_mark1":[{"condition":243,"pod":238,"statement":4847,"branch":1416,"time":null,"subroutine":272}]},"16918":{"print_tunnel_group":[{"condition":412,"pod":328,"statement":7450,"branch":2110,"time":null,"subroutine":375}]},"7905":{"distribute_nat_info":[{"subroutine":208,"branch":1067,"time":null,"condition":177,"pod":184,"statement":3543}]},"15655":{"print_nat":[{"subroutine":350,"time":null,"branch":1986,"statement":6845,"pod":305,"condition":396}]},"503":{"skip":[{"statement":122,"pod":22,"condition":1,"subroutine":32,"time":null,"branch":13}]},"15939":{"create_general_permit_rules":[{"time":null,"branch":2025,"subroutine":354,"pod":308,"statement":6972,"condition":401}]},"4931":{"owner_eq":[{"subroutine":152,"time":null,"branch":674,"statement":2116,"pod":137,"condition":90}]},"3176":{"read_owner":[{"statement":1316,"pod":92,"condition":61,"time":null,"branch":461,"subroutine":103}]},"10361":{"check_virtual_interfaces":[{"condition":231,"statement":4615,"pod":227,"branch":1346,"time":null,"subroutine":261}]},"15602":{"optimize_nat_networks":[{"statement":6816,"pod":304,"condition":392,"subroutine":349,"time":null,"branch":1981}]},"16018":{"rules_distribution":[{"time":null,"branch":2038,"subroutine":356,"statement":7010,"pod":310,"condition":401}]},"930":{"read_list_or_null":[{"condition":13,"pod":51,"statement":300,"branch":70,"time":null,"subroutine":61}]},"334":{"subset_of":[{"subroutine":16,"branch":3,"time":null,"condition":null,"pod":6,"statement":54}]},"9718":{"zone_eq":[{"condition":218,"statement":4353,"pod":207,"subroutine":241,"branch":1278,"time":null}]},"11960":{"single_path_walk":[{"subroutine":278,"time":null,"branch":1519,"statement":5155,"pod":244,"condition":286}]},"914":{"read_list":[{"statement":291,"pod":50,"condition":13,"subroutine":60,"time":null,"branch":67}]},"13893":{"__ANON__":[{"statement":6120,"pod":284,"condition":348,"time":null,"branch":1817,"subroutine":321}]},"7542":{"__ANON__":[{"condition":170,"pod":181,"statement":3443,"branch":1036,"time":null,"subroutine":204}]},"6576":{"__ANON__":[{"branch":928,"time":null,"subroutine":182,"condition":135,"pod":161,"statement":2979}]},"35":{"BEGIN":[{"subroutine":6,"branch":null,"time":null,"condition":null,"pod":null,"statement":18}]},"15954":{"distribute_general_permit":[{"branch":2027,"time":null,"subroutine":355,"condition":401,"statement":6977,"pod":309}]},"6268":{"normalize_service_rules":[{"condition":124,"pod":158,"statement":2718,"subroutine":176,"branch":850,"time":null}]},"2522":{"read_aggregate":[{"statement":1013,"pod":70,"condition":46,"subroutine":80,"time":null,"branch":351}]},"13540":{"BEGIN":[{"statement":27,"pod":null,"condition":null,"time":null,"branch":null,"subroutine":9}]},"17785":{"show_version":[{"statement":7895,"pod":340,"condition":430,"time":null,"branch":2230,"subroutine":388}]},"341":{"max":[{"pod":7,"statement":60,"condition":null,"subroutine":17,"time":null,"branch":3}]},"10276":{"check_routers_in_nested_areas":[{"condition":230,"pod":224,"statement":4574,"subroutine":258,"branch":1342,"time":null}]},"5830":{"remove_duplicates":[{"branch":800,"time":null,"subroutine":162,"condition":111,"pod":145,"statement":2521}]},"12177":{"gen_tunnel_rules":[{"time":null,"branch":1548,"subroutine":285,"statement":5267,"pod":250,"condition":294}]},"13680":{"mark_primary":[{"condition":337,"pod":275,"statement":5894,"subroutine":312,"branch":1749,"time":null}]},"2910":{"read_protocol":[{"subroutine":95,"branch":427,"time":null,"condition":58,"statement":1206,"pod":84}]},"16520":{"print_acl_suffix":[{"condition":405,"statement":7256,"pod":319,"subroutine":366,"branch":2075,"time":null}]},"14985":{"__ANON__":[{"subroutine":341,"branch":1935,"time":null,"condition":375,"statement":6597,"pod":300}]},"10866":{"process_loops":[{"time":null,"branch":1401,"subroutine":269,"pod":235,"statement":4798,"condition":238}]},"5918":{"check_unused_groups":[{"branch":817,"time":null,"subroutine":166,"condition":111,"statement":2573,"pod":148}]},"31":{"BEGIN":[{"branch":null,"time":null,"subroutine":2,"condition":null,"statement":6,"pod":null}]},"6235":{"check_private_service":[{"subroutine":175,"time":null,"branch":846,"statement":2707,"pod":157,"condition":121}]},"1497":{"read_interface":[{"pod":65,"statement":562,"condition":21,"subroutine":75,"time":null,"branch":166}]},"2736":{"read_icmp_type_code":[{"condition":52,"statement":1122,"pod":77,"subroutine":87,"branch":397,"time":null}]},"17739":{"copy_raw":[{"subroutine":387,"time":null,"branch":2221,"pod":339,"statement":7870,"condition":429}]},"8889":{"cluster_crosslink_routers":[{"condition":204,"statement":3964,"pod":193,"branch":1181,"time":null,"subroutine":222}]},"3149":{"read_crypto":[{"time":null,"branch":455,"subroutine":102,"statement":1301,"pod":91,"condition":61}]},"6933":{"convert_hosts_in_rules":[{"statement":3065,"pod":164,"condition":143,"subroutine":187,"time":null,"branch":953}]},"17977":{"init_global_vars":[{"condition":430,"statement":7935,"pod":343,"branch":2240,"time":null,"subroutine":391}]},"34":{"BEGIN":[{"pod":null,"statement":15,"condition":null,"subroutine":5,"time":null,"branch":null}]},"2921":{"assign_union_allow_user":[{"time":null,"branch":427,"subroutine":96,"pod":85,"statement":1212,"condition":58}]},"8318":{"check_subnets":[{"statement":3735,"pod":188,"condition":183,"subroutine":214,"time":null,"branch":1114}]},"10642":{"optimize_pathrestrictions":[{"subroutine":265,"time":null,"branch":1382,"statement":4727,"pod":231,"condition":235}]},"5332":{"expand_group1":[{"time":null,"branch":723,"subroutine":159,"statement":2300,"pod":144,"condition":103}]},"4298":{"link_pathrestrictions":[{"pod":128,"statement":1802,"condition":73,"time":null,"branch":590,"subroutine":143}]},"17791":{"concurrent":[{"time":null,"branch":2230,"subroutine":389,"statement":7897,"pod":341,"condition":430}]},"3379":{"is_group":[{"subroutine":117,"branch":490,"time":null,"condition":64,"statement":1416,"pod":104}]},"7236":{"build_rule_tree":[{"condition":159,"pod":171,"statement":3200,"branch":986,"time":null,"subroutine":194}]},"14526":{"add_path_routes":[{"pod":291,"statement":6335,"condition":357,"time":null,"branch":1878,"subroutine":332}]},"7403":{"show_redundant_rules":[{"time":null,"branch":1009,"subroutine":199,"statement":3295,"pod":176,"condition":164}]},"858":{"check_permit_deny":[{"time":null,"branch":62,"subroutine":55,"pod":45,"statement":265,"condition":13}]},"12831":{"find_zone_network":[{"subroutine":295,"branch":1630,"time":null,"condition":313,"statement":5552,"pod":259}]},"8391":{"by_name":[{"condition":190,"pod":190,"statement":3775,"subroutine":217,"branch":1123,"time":null}]},"813":{"read_intersection":[{"condition":13,"statement":248,"pod":42,"branch":58,"time":null,"subroutine":52}]},"609":{"read_string":[{"subroutine":44,"time":null,"branch":23,"pod":34,"statement":165,"condition":5}]},"12012":{"add_pathresticted_interfaces":[{"condition":288,"statement":5190,"pod":246,"branch":1525,"time":null,"subroutine":281}]},"708":{"read_extended_name":[{"subroutine":48,"branch":35,"time":null,"condition":8,"pod":38,"statement":200}]},"936":{"read_assign_list":[{"statement":303,"pod":52,"condition":13,"time":null,"branch":71,"subroutine":62}]},"11971":{"set_auto_intf_from_border":[{"pod":245,"statement":5161,"condition":288,"time":null,"branch":1519,"subroutine":279}]},"9222":{"link_reroute_permit":[{"time":null,"branch":1219,"subroutine":230,"pod":197,"statement":4132,"condition":211}]},"33":{"BEGIN":[{"branch":null,"time":null,"subroutine":4,"condition":null,"statement":12,"pod":null}]},"9922":{"inherit_nat_to_subnets_in_zone":[{"condition":227,"statement":4429,"pod":214,"subroutine":248,"branch":1303,"time":null}]},"316":{"unique":[{"subroutine":13,"branch":3,"time":null,"condition":null,"pod":3,"statement":42}]},"2472":{"move_locked_interfaces":[{"subroutine":79,"branch":348,"time":null,"condition":45,"pod":69,"statement":991}]},"3373":{"is_router":[{"condition":64,"statement":1410,"pod":98,"branch":490,"time":null,"subroutine":111}]},"12441":{"verify_asa_vpn_attributes":[{"time":null,"branch":1577,"subroutine":288,"statement":5387,"pod":253,"condition":307}]},"6377":{"normalize_services":[{"time":null,"branch":875,"subroutine":177,"statement":2781,"pod":159,"condition":126}]},"32":{"BEGIN":[{"subroutine":3,"time":null,"branch":null,"pod":null,"statement":9,"condition":null}]},"15712":{"__ANON__":[{"pod":307,"statement":6923,"condition":401,"subroutine":352,"time":null,"branch":2014}]},"13139":{"check_supernet_dst_rule":[{"pod":264,"statement":5665,"condition":320,"time":null,"branch":1672,"subroutine":300}]},"1280":{"read_network":[{"pod":64,"statement":472,"condition":17,"time":null,"branch":127,"subroutine":74}]},"10340":{"set_zone":[{"pod":226,"statement":4602,"condition":231,"time":null,"branch":1346,"subroutine":260}]},"4029":{"link_areas":[{"time":null,"branch":557,"subroutine":135,"pod":121,"statement":1686,"condition":73}]},"587":{"read_owner_pattern":[{"subroutine":42,"time":null,"branch":21,"pod":32,"statement":157,"condition":5}]},"10578":{"apply_pathrestriction_optimization":[{"time":null,"branch":1377,"subroutine":264,"pod":230,"statement":4708,"condition":234}]},"9531":{"get_any":[{"branch":1247,"time":null,"subroutine":237,"condition":214,"statement":4267,"pod":203}]},"7665":{"set_natdomain":[{"subroutine":205,"branch":1036,"time":null,"condition":170,"statement":3443,"pod":181}]},"12805":{"find_supernet":[{"statement":5544,"pod":258,"condition":313,"subroutine":294,"time":null,"branch":1626}]},"14268":{"prepare_nat_commands":[{"branch":1848,"time":null,"subroutine":327,"condition":353,"pod":288,"statement":6209}]},"10103":{"prepare_area_borders":[{"statement":4497,"pod":220,"condition":230,"time":null,"branch":1321,"subroutine":254}]},"13744":{"have_different_marks":[{"condition":337,"statement":5937,"pod":278,"branch":1765,"time":null,"subroutine":315}]},"4397":{"link_virtual_interfaces":[{"subroutine":144,"time":null,"branch":605,"statement":1850,"pod":129,"condition":74}]},"3241":{"read_netspoc":[{"branch":474,"time":null,"subroutine":104,"condition":62,"pod":93,"statement":1339}]},"1799":{"set_pix_interface_level":[{"subroutine":76,"branch":237,"time":null,"condition":25,"pod":66,"statement":713}]},"6531":{"__ANON__":[{"time":null,"branch":928,"subroutine":180,"statement":2979,"pod":161,"condition":135}]},"16533":{"print_iptables_acls":[{"subroutine":367,"time":null,"branch":2076,"statement":7266,"pod":320,"condition":405}]},"17372":{"print_acls":[{"statement":7694,"pod":336,"condition":419,"time":null,"branch":2169,"subroutine":383}]},"868":{"check_nat_name":[{"pod":46,"statement":269,"condition":13,"time":null,"branch":63,"subroutine":56}]},"4284":{"add_pathrestriction":[{"branch":589,"time":null,"subroutine":142,"condition":73,"statement":1793,"pod":127}]},"12496":{"verify_asa_trustpoint":[{"subroutine":291,"branch":1591,"time":null,"condition":308,"statement":5417,"pod":255}]},"16221":{"__ANON__":[{"condition":405,"statement":7232,"pod":318,"branch":2074,"time":null,"subroutine":364}]},"7747":{"distribute_nat1":[{"subroutine":206,"time":null,"branch":1047,"statement":3483,"pod":182,"condition":177}]},"3380":{"is_protocolgroup":[{"time":null,"branch":490,"subroutine":118,"statement":1417,"pod":105,"condition":64}]},"2572":{"check_router_attributes":[{"subroutine":81,"branch":363,"time":null,"condition":46,"pod":71,"statement":1042}]},"327":{"intersect":[{"time":null,"branch":3,"subroutine":15,"statement":49,"pod":5,"condition":null}]},"9175":{"__ANON__":[{"pod":197,"statement":4132,"condition":211,"time":null,"branch":1219,"subroutine":229}]},"1899":{"read_router":[{"statement":754,"pod":68,"condition":27,"subroutine":78,"time":null,"branch":251}]},"10040":{"set_zones":[{"pod":218,"statement":4475,"condition":228,"time":null,"branch":1314,"subroutine":252}]},"12884":{"find_matching_supernet":[{"subroutine":296,"time":null,"branch":1638,"statement":5580,"pod":260,"condition":316}]},"10029":{"inherit_attributes":[{"subroutine":251,"branch":1314,"time":null,"condition":228,"pod":217,"statement":4471}]},"559":{"read_ip_prefix_pair":[{"branch":20,"time":null,"subroutine":38,"condition":5,"statement":147,"pod":28}]},"3372":{"is_network":[{"condition":64,"statement":1409,"pod":97,"branch":490,"time":null,"subroutine":110}]},"12473":{"verify_subject_name":[{"time":null,"branch":1586,"subroutine":289,"statement":5401,"pod":254,"condition":307}]},"12023":{"path_auto_interfaces":[{"statement":5195,"pod":247,"condition":288,"subroutine":282,"time":null,"branch":1527}]},"1003":{"check_routing":[{"pod":58,"statement":339,"condition":13,"time":null,"branch":77,"subroutine":68}]},"3386":{"print_rule":[{"condition":64,"pod":107,"statement":1419,"subroutine":120,"branch":490,"time":null}]},"12999":{"check_supernet_src_rule":[{"statement":5623,"pod":263,"condition":317,"time":null,"branch":1650,"subroutine":299}]},"3983":{"link_general_permit":[{"condition":71,"pod":120,"statement":1663,"subroutine":134,"branch":549,"time":null}]},"14857":{"find_active_routes":[{"subroutine":338,"branch":1904,"time":null,"condition":365,"pod":297,"statement":6464}]},"13517":{"__ANON__":[{"statement":5872,"pod":273,"condition":337,"subroutine":309,"time":null,"branch":1742}]},"14886":{"fix_bridged_hops":[{"condition":365,"pod":298,"statement":6471,"branch":1904,"time":null,"subroutine":339}]},"8560":{"__ANON__":[{"condition":191,"pod":192,"statement":3886,"branch":1156,"time":null,"subroutine":219}]},"16955":{"print_static_crypto_map":[{"subroutine":377,"time":null,"branch":2112,"statement":7470,"pod":330,"condition":412}]},"15577":{"__ANON__":[{"pod":304,"statement":6816,"condition":392,"subroutine":348,"time":null,"branch":1981}]},"3303":{"__ANON__":[{"branch":490,"time":null,"subroutine":107,"condition":64,"statement":1399,"pod":96}]},"457":{"internal_err":[{"branch":12,"time":null,"subroutine":29,"condition":null,"statement":105,"pod":19}]},"9494":{"duplicate_aggregate_to_cluster":[{"statement":4255,"pod":202,"condition":214,"time":null,"branch":1245,"subroutine":236}]},"374":{"keys_eq":[{"subroutine":20,"time":null,"branch":7,"pod":10,"statement":75,"condition":null}]},"8199":{"invert_nat_set":[{"time":null,"branch":1102,"subroutine":210,"statement":3668,"pod":185,"condition":179}]},"481":{"skip_space_and_comment":[{"condition":null,"pod":20,"statement":114,"branch":13,"time":null,"subroutine":30}]},"351":{"aref_delete":[{"branch":4,"time":null,"subroutine":18,"condition":null,"pod":8,"statement":64}]},"7011":{"collect_unenforceable":[{"subroutine":188,"time":null,"branch":961,"statement":3098,"pod":165,"condition":144}]},"383":{"warn_msg":[{"subroutine":21,"branch":9,"time":null,"condition":null,"pod":11,"statement":80}]},"429":{"check_abort":[{"condition":null,"pod":15,"statement":91,"subroutine":25,"branch":10,"time":null}]},"13431":{"mark_stateful":[{"time":null,"branch":1716,"subroutine":306,"pod":270,"statement":5781,"condition":329}]},"4144":{"check_interface_ip":[{"pod":123,"statement":1736,"condition":73,"subroutine":137,"time":null,"branch":570}]},"16487":{"print_acl_prefix":[{"subroutine":365,"time":null,"branch":2074,"pod":318,"statement":7232,"condition":405}]},"13283":{"elements_in_one_zone":[{"condition":323,"statement":5741,"pod":268,"subroutine":304,"branch":1702,"time":null}]},"9600":{"set_zone1":[{"branch":1258,"time":null,"subroutine":239,"condition":214,"statement":4297,"pod":205}]},"804":{"read_complement":[{"statement":245,"pod":41,"condition":13,"time":null,"branch":57,"subroutine":51}]},"9841":{"nat_equal":[{"pod":210,"statement":4399,"condition":226,"subroutine":244,"time":null,"branch":1296}]},"7327":{"show_duplicate_rules":[{"time":null,"branch":998,"subroutine":197,"pod":174,"statement":3243,"condition":162}]},"13244":{"match_prt":[{"time":null,"branch":1691,"subroutine":302,"pod":266,"statement":5713,"condition":321}]},"13916":{"__ANON__":[{"subroutine":322,"time":null,"branch":1817,"statement":6120,"pod":284,"condition":348}]},"4524":{"check_ip_addresses":[{"condition":79,"pod":131,"statement":1916,"subroutine":146,"branch":620,"time":null}]},"6050":{"collect_log":[{"branch":829,"time":null,"subroutine":169,"condition":114,"pod":151,"statement":2629}]},"10131":{"set_area":[{"branch":1323,"time":null,"subroutine":255,"condition":230,"statement":4508,"pod":221}]},"5849":{"expand_group":[{"subroutine":163,"branch":802,"time":null,"condition":111,"statement":2534,"pod":146}]},"571":{"print_ip":[{"time":null,"branch":20,"subroutine":40,"pod":30,"statement":151,"condition":5}]},"973":{"new":[{"time":null,"branch":73,"subroutine":65,"statement":321,"pod":55,"condition":13}]},"7160":{"split_rules_by_path":[{"subroutine":192,"branch":983,"time":null,"condition":156,"pod":169,"statement":3163}]},"13273":{"match_prt_list":[{"condition":323,"statement":5736,"pod":267,"branch":1701,"time":null,"subroutine":303}]},"3803":{"link_to_real_owner":[{"subroutine":130,"branch":529,"time":null,"condition":70,"pod":116,"statement":1565}]},"9079":{"__ANON__":[{"condition":210,"pod":196,"statement":4105,"branch":1214,"time":null,"subroutine":227}]},"10904":{"setpath":[{"subroutine":270,"time":null,"branch":1404,"pod":236,"statement":4815,"condition":238}]},"2607":{"read_area":[{"condition":46,"pod":72,"statement":1055,"subroutine":82,"branch":368,"time":null}]},"10924":{"get_path":[{"condition":238,"statement":4822,"pod":237,"subroutine":271,"branch":1404,"time":null}]},"12761":{"setup_ref2obj":[{"subroutine":293,"time":null,"branch":1626,"statement":5537,"pod":257,"condition":313}]},"2721":{"read_port_ranges":[{"pod":76,"statement":1114,"condition":52,"time":null,"branch":395,"subroutine":86}]},"10082":{"cluster_zones":[{"subroutine":253,"time":null,"branch":1319,"statement":4491,"pod":219,"condition":230}]},"11635":{"path_mark":[{"time":null,"branch":1492,"subroutine":275,"statement":5060,"pod":241,"condition":267}]},"418":{"syntax_err":[{"subroutine":23,"branch":10,"time":null,"condition":null,"pod":13,"statement":88}]},"3517":{"order_proto":[{"branch":510,"time":null,"subroutine":124,"condition":68,"statement":1474,"pod":111}]},"3738":{"order_protocols":[{"statement":1543,"pod":114,"condition":69,"time":null,"branch":526,"subroutine":128}]},"12216":{"link_tunnels":[{"subroutine":286,"branch":1553,"time":null,"condition":298,"statement":5285,"pod":251}]},"29":{"BEGIN":[{"subroutine":null,"time":null,"branch":null,"pod":null,"statement":null,"condition":null}]},"5590":{"__ANON__":[{"statement":2521,"pod":145,"condition":111,"time":null,"branch":800,"subroutine":161}]},"17858":{"init_protocols":[{"condition":430,"pod":342,"statement":7921,"subroutine":390,"branch":2240,"time":null}]},"8364":{"nat_to_loopback_ok":[{"subroutine":216,"time":null,"branch":1121,"statement":3758,"pod":189,"condition":190}]},"13807":{"get_zone_cluster_borders":[{"branch":1774,"time":null,"subroutine":318,"condition":339,"pod":281,"statement":5974}]},"14563":{"add_end_routes":[{"statement":6349,"pod":292,"condition":358,"subroutine":333,"time":null,"branch":1880}]},"6060":{"check_log":[{"statement":2634,"pod":152,"condition":114,"time":null,"branch":830,"subroutine":170}]},"11829":{"path_walk":[{"subroutine":277,"branch":1508,"time":null,"condition":275,"pod":243,"statement":5111}]},"6433":{"propagate_owners":[{"subroutine":178,"branch":882,"time":null,"condition":126,"statement":2804,"pod":160}]},"13617":{"gen_reverse_rules":[{"branch":1742,"time":null,"subroutine":310,"condition":337,"pod":273,"statement":5872}]},"450":{"err_msg":[{"branch":12,"time":null,"subroutine":28,"condition":null,"pod":18,"statement":101}]},"10327":{"clean_areas":[{"condition":231,"statement":4595,"pod":225,"branch":1346,"time":null,"subroutine":259}]},"3026":{"read_attributed_object":[{"branch":446,"time":null,"subroutine":99,"condition":61,"pod":88,"statement":1267}]},"3551":{"__ANON__":[{"pod":113,"statement":1537,"condition":69,"subroutine":126,"time":null,"branch":524}]},"16716":{"generate_acls":[{"time":null,"branch":2096,"subroutine":369,"pod":322,"statement":7350,"condition":411}]},"835":{"read_time_val":[{"statement":254,"pod":43,"condition":13,"time":null,"branch":59,"subroutine":53}]},"9258":{"add_managed_hosts_to_aggregate":[{"pod":198,"statement":4147,"condition":211,"time":null,"branch":1222,"subroutine":231}]},"2764":{"read_proto_nr":[{"time":null,"branch":403,"subroutine":88,"statement":1135,"pod":78,"condition":54}]},"443":{"error_atline":[{"time":null,"branch":12,"subroutine":27,"statement":97,"pod":17,"condition":null}]},"7461":{"expand_rules":[{"time":null,"branch":1016,"subroutine":201,"pod":178,"statement":3331,"condition":164}]},"16048":{"address":[{"statement":7023,"pod":311,"condition":401,"subroutine":357,"time":null,"branch":2039}]},"6003":{"split_protocols":[{"branch":826,"time":null,"subroutine":168,"condition":111,"statement":2609,"pod":150}]},"6778":{"set_service_owner":[{"pod":162,"statement":2990,"condition":136,"time":null,"branch":930,"subroutine":184}]},"9345":{"__ANON__":[{"statement":4214,"pod":201,"condition":212,"subroutine":234,"time":null,"branch":1235}]},"14392":{"__ANON__":[{"time":null,"branch":1878,"subroutine":330,"statement":6335,"pod":291,"condition":357}]},"2931":{"read_service":[{"subroutine":97,"time":null,"branch":427,"pod":86,"statement":1219,"condition":58}]},"5158":{"combine_subnets":[{"condition":99,"statement":2221,"pod":140,"subroutine":155,"branch":705,"time":null}]},"8272":{"adjust_crypto_nat":[{"branch":1107,"time":null,"subroutine":212,"condition":182,"pod":186,"statement":3710}]},"14364":{"set_routes_in_zone":[{"time":null,"branch":1857,"subroutine":329,"pod":290,"statement":6254,"condition":356}]},"7204":{"group_path_rules":[{"subroutine":193,"branch":985,"time":null,"condition":159,"pod":170,"statement":3188}]},"2838":{"cache_anonymous_protocol":[{"condition":57,"pod":80,"statement":1172,"branch":419,"time":null,"subroutine":91}]},"12477":{"__ANON__":[{"condition":308,"statement":5417,"pod":255,"subroutine":290,"branch":1591,"time":null}]},"13208":{"check_missing_supernet_rules":[{"statement":5689,"pod":265,"condition":321,"subroutine":301,"time":null,"branch":1686}]},"7527":{"set_policy_distribution_ip":[{"condition":165,"pod":180,"statement":3361,"subroutine":203,"branch":1016,"time":null}]},"6546":{"__ANON__":[{"time":null,"branch":928,"subroutine":181,"statement":2979,"pod":161,"condition":135}]},"14627":{"generate_routing_tree1":[{"subroutine":335,"time":null,"branch":1885,"statement":6369,"pod":294,"condition":360}]},"1843":{"check_no_in_acl":[{"subroutine":77,"time":null,"branch":242,"pod":67,"statement":730,"condition":27}]},"15520":{"__ANON__":[{"condition":392,"statement":6816,"pod":304,"branch":1981,"time":null,"subroutine":346}]},"-1":{"__COVER__":[{"subroutine":395,"time":null,"branch":2241,"pod":345,"statement":8006,"condition":431}]},"539":{"read_ip":[{"branch":17,"time":null,"subroutine":36,"condition":5,"pod":26,"statement":137}]},"17083":{"print_crypto":[{"subroutine":379,"branch":2119,"time":null,"condition":412,"statement":7532,"pod":332}]},"18062":{"__ANON__":[{"subroutine":394,"time":null,"branch":2241,"pod":345,"statement":8006,"condition":431}]},"1223":{"read_nat":[{"branch":116,"time":null,"subroutine":73,"condition":17,"statement":444,"pod":63}]},"10156":{"set_areas":[{"statement":4519,"pod":222,"condition":230,"time":null,"branch":1327,"subroutine":256}]},"4206":{"link_routers":[{"subroutine":138,"branch":581,"time":null,"condition":73,"statement":1754,"pod":124}]},"16944":{"print_ca_and_tunnel_group_map":[{"pod":329,"statement":7465,"condition":412,"time":null,"branch":2112,"subroutine":376}]},"9984":{"inherit_nat_in_zone":[{"pod":215,"statement":4450,"condition":228,"time":null,"branch":1309,"subroutine":249}]},"13754":{"have_set_and_equal_marks":[{"subroutine":316,"branch":1766,"time":null,"condition":338,"statement":5945,"pod":279}]},"3015":{"read_pathrestriction":[{"subroutine":98,"time":null,"branch":445,"statement":1259,"pod":87,"condition":61}]},"885":{"check_flag":[{"condition":13,"statement":275,"pod":48,"branch":64,"time":null,"subroutine":58}]},"17613":{"check_output_dir":[{"subroutine":384,"branch":2202,"time":null,"condition":429,"statement":7804,"pod":337}]},"943":{"check_assign_list":[{"branch":71,"time":null,"subroutine":63,"condition":13,"statement":307,"pod":53}]},"8665":{"find_subnets_in_nat_domain":[{"subroutine":221,"branch":1156,"time":null,"condition":191,"pod":192,"statement":3886}]},"7263":{"get_zone":[{"subroutine":195,"time":null,"branch":987,"pod":172,"statement":3215,"condition":162}]},"842":{"add_description":[{"time":null,"branch":60,"subroutine":54,"pod":44,"statement":258,"condition":13}]},"17033":{"print_dynamic_crypto_map":[{"subroutine":378,"branch":2118,"time":null,"condition":412,"statement":7508,"pod":331}]},"10214":{"find_area_subset_relations":[{"statement":4546,"pod":223,"condition":230,"subroutine":257,"time":null,"branch":1335}]},"5868":{"expand_group_in_rule":[{"condition":111,"statement":2545,"pod":147,"branch":804,"time":null,"subroutine":164}]},"12138":{"link_ipsec":[{"condition":294,"statement":5250,"pod":248,"subroutine":283,"branch":1544,"time":null}]},"8322":{"__ANON__":[{"subroutine":215,"time":null,"branch":1121,"statement":3758,"pod":189,"condition":190}]},"15425":{"print_nat1":[{"pod":302,"statement":6732,"condition":381,"subroutine":344,"time":null,"branch":1966}]},"12156":{"link_crypto":[{"subroutine":284,"branch":1546,"time":null,"condition":294,"statement":5258,"pod":249}]},"7955":{"__ANON__":[{"condition":179,"pod":185,"statement":3668,"branch":1102,"time":null,"subroutine":209}]},"1071":{"host_as_interface":[{"time":null,"branch":88,"subroutine":71,"pod":61,"statement":368,"condition":14}]},"16181":{"print_asavpn":[{"condition":402,"statement":7081,"pod":317,"subroutine":363,"branch":2053,"time":null}]},"14776":{"generate_routing_info":[{"pod":296,"statement":6422,"condition":365,"time":null,"branch":1898,"subroutine":337}]},"777":{"read_user_id":[{"condition":13,"pod":39,"statement":235,"branch":54,"time":null,"subroutine":49}]},"598":{"read_name":[{"subroutine":43,"branch":22,"time":null,"condition":5,"statement":161,"pod":33}]},"5211":{"get_intf":[{"subroutine":156,"branch":709,"time":null,"condition":100,"statement":2241,"pod":141}]},"15177":{"print_routes":[{"time":null,"branch":1936,"subroutine":343,"statement":6602,"pod":301,"condition":375}]},"3408":{"get_orig_prt":[{"condition":65,"pod":108,"statement":1435,"branch":495,"time":null,"subroutine":121}]},"4624":{"link_topology":[{"statement":1961,"pod":132,"condition":85,"subroutine":147,"time":null,"branch":635}]},"3321":{"__ANON__":[{"statement":1399,"pod":96,"condition":64,"time":null,"branch":490,"subroutine":108}]},"4915":{"split_ip_range":[{"time":null,"branch":673,"subroutine":151,"statement":2107,"pod":136,"condition":89}]},"564":{"gen_ip":[{"subroutine":39,"branch":20,"time":null,"condition":5,"pod":29,"statement":149}]},"623":{"read_union":[{"branch":24,"time":null,"subroutine":45,"condition":5,"statement":169,"pod":35}]},"16736":{"print_ezvpn":[{"pod":324,"statement":7360,"condition":411,"time":null,"branch":2097,"subroutine":371}]},"3491":{"order_icmp":[{"subroutine":123,"time":null,"branch":507,"pod":110,"statement":1464,"condition":67}]},"16128":{"prefix_code":[{"time":null,"branch":2049,"subroutine":359,"pod":313,"statement":7056,"condition":401}]},"3374":{"is_interface":[{"statement":1411,"pod":99,"condition":64,"time":null,"branch":490,"subroutine":112}]},"9800":{"inherit_router_attributes":[{"subroutine":243,"branch":1291,"time":null,"condition":222,"pod":209,"statement":4386}]},"3534":{"order_ranges":[{"pod":112,"statement":1479,"condition":68,"time":null,"branch":510,"subroutine":125}]},"3378":{"is_zone":[{"statement":1415,"pod":103,"condition":64,"subroutine":116,"time":null,"branch":490}]},"6074":{"normalize_log":[{"time":null,"branch":831,"subroutine":171,"statement":2640,"pod":153,"condition":114}]},"14084":{"find_redundant_rules":[{"condition":348,"pod":284,"statement":6120,"subroutine":323,"branch":1817,"time":null}]},"1112":{"read_host":[{"branch":92,"time":null,"subroutine":72,"condition":14,"statement":392,"pod":62}]},"9061":{"__ANON__":[{"condition":210,"pod":196,"statement":4105,"subroutine":226,"branch":1214,"time":null}]},"16118":{"ios_route_code":[{"condition":401,"statement":7051,"pod":312,"subroutine":358,"branch":2049,"time":null}]},"13857":{"check_dynamic_nat_rules":[{"subroutine":320,"branch":1780,"time":null,"condition":342,"pod":283,"statement":6004}]},"526":{"check_ip":[{"subroutine":35,"branch":15,"time":null,"condition":2,"statement":131,"pod":25}]},"17703":{"__ANON__":[{"subroutine":386,"time":null,"branch":2221,"pod":339,"statement":7870,"condition":429}]},"988":{"check_radius_attributes":[{"statement":328,"pod":57,"condition":13,"subroutine":67,"time":null,"branch":74}]},"16579":{"print_cisco_acls":[{"branch":2077,"time":null,"subroutine":368,"condition":405,"statement":7288,"pod":321}]},"16136":{"full_prefix_code":[{"time":null,"branch":2050,"subroutine":360,"statement":7061,"pod":314,"condition":401}]},"3897":{"BEGIN":[{"condition":null,"statement":24,"pod":null,"branch":null,"time":null,"subroutine":8}]},"14437":{"__ANON__":[{"condition":357,"pod":291,"statement":6335,"subroutine":331,"branch":1878,"time":null}]},"10709":{"setpath_obj":[{"statement":4748,"pod":232,"condition":235,"time":null,"branch":1385,"subroutine":266}]},"145":{"store_description":[{"time":null,"branch":null,"subroutine":10,"statement":30,"pod":null,"condition":null}]},"6506":{"__ANON__":[{"condition":135,"statement":2979,"pod":161,"subroutine":179,"branch":928,"time":null}]},"547":{"read_ip_prefix":[{"time":null,"branch":18,"subroutine":37,"pod":27,"statement":140,"condition":5}]},"7078":{"show_unenforceable":[{"branch":971,"time":null,"subroutine":189,"condition":151,"statement":3122,"pod":166}]},"12397":{"crypto_behind":[{"statement":5376,"pod":252,"condition":307,"time":null,"branch":1574,"subroutine":287}]},"4218":{"__ANON__":[{"condition":73,"statement":1785,"pod":126,"branch":588,"time":null,"subroutine":140}]},"7893":{"distribute_nat":[{"pod":183,"statement":3537,"condition":177,"time":null,"branch":1066,"subroutine":207}]},"14244":{"add_networks":[{"branch":1845,"time":null,"subroutine":326,"condition":352,"statement":6196,"pod":287}]},"4706":{"check_bridged_networks":[{"statement":1995,"pod":134,"condition":86,"subroutine":149,"time":null,"branch":639}]},"14321":{"get_route_networks":[{"condition":355,"statement":6238,"pod":289,"branch":1852,"time":null,"subroutine":328}]},"423":{"at_line":[{"subroutine":24,"branch":10,"time":null,"condition":null,"statement":90,"pod":14}]},"652":{"check_typed_name":[{"pod":36,"statement":185,"condition":6,"time":null,"branch":28,"subroutine":46}]},"3866":{"link_owners":[{"subroutine":132,"time":null,"branch":536,"statement":1598,"pod":118,"condition":70}]},"7313":{"add_managed_hosts":[{"subroutine":196,"time":null,"branch":996,"pod":173,"statement":3234,"condition":162}]},"11975":{"__ANON__":[{"condition":288,"pod":246,"statement":5190,"branch":1525,"time":null,"subroutine":280}]},"952":{"check_assign_pair":[{"condition":13,"pod":54,"statement":312,"subroutine":64,"branch":72,"time":null}]},"4089":{"link_interfaces":[{"subroutine":136,"branch":565,"time":null,"condition":73,"statement":1714,"pod":122}]},"3429":{"prepare_prt_ordering":[{"pod":109,"statement":1441,"condition":66,"subroutine":122,"time":null,"branch":496}]},"16156":{"get_split_tunnel_nets":[{"statement":7068,"pod":316,"condition":401,"subroutine":362,"time":null,"branch":2050}]},"5226":{"get_auto_intf":[{"branch":711,"time":null,"subroutine":157,"condition":100,"pod":142,"statement":2248}]},"9876":{"inherit_area_nat":[{"subroutine":246,"branch":1301,"time":null,"condition":227,"statement":4411,"pod":212}]},"896":{"check_assign":[{"branch":65,"time":null,"subroutine":59,"condition":13,"statement":280,"pod":49}]},"9336":{"link_implicit_aggregate_to_zone":[{"subroutine":233,"branch":1229,"time":null,"condition":212,"pod":200,"statement":4175}]},"9402":{"link_aggregates":[{"condition":212,"pod":201,"statement":4214,"branch":1235,"time":null,"subroutine":235}]},"3787":{"link_to_owner":[{"statement":1557,"pod":115,"condition":69,"subroutine":129,"time":null,"branch":527}]},"17342":{"print_address":[{"time":null,"branch":2163,"subroutine":381,"pod":334,"statement":7678,"condition":417}]},"2889":{"check_protocol_modifiers":[{"condition":57,"pod":82,"statement":1198,"branch":426,"time":null,"subroutine":93}]},"13483":{"gen_reverse_rules1":[{"condition":330,"statement":5809,"pod":272,"subroutine":308,"branch":1724,"time":null}]},"13650":{"mark_secondary":[{"branch":1742,"time":null,"subroutine":311,"condition":337,"statement":5876,"pod":274}]},"15671":{"distribute_rule":[{"subroutine":351,"branch":1987,"time":null,"condition":396,"pod":306,"statement":6851}]},"7480":{"check_expanded_rules":[{"statement":3341,"pod":179,"condition":164,"time":null,"branch":1016,"subroutine":202}]},"5911":{"__ANON__":[{"statement":2567,"pod":148,"condition":111,"subroutine":165,"time":null,"branch":815}]},"436":{"abort_on_error":[{"pod":16,"statement":94,"condition":null,"subroutine":26,"time":null,"branch":11}]},"3375":{"is_host":[{"condition":64,"pod":100,"statement":1412,"branch":490,"time":null,"subroutine":113}]},"8202":{"__ANON__":[{"condition":182,"pod":186,"statement":3710,"branch":1107,"time":null,"subroutine":211}]},"9732":{"set_area1":[{"branch":1278,"time":null,"subroutine":242,"condition":220,"statement":4355,"pod":208}]},"15568":{"__ANON__":[{"subroutine":347,"branch":1981,"time":null,"condition":392,"statement":6816,"pod":304}]},"10011":{"cleanup_after_inheritance":[{"condition":228,"statement":4460,"pod":216,"branch":1310,"time":null,"subroutine":250}]},"12509":{"expand_crypto":[{"condition":308,"statement":5422,"pod":256,"branch":1593,"time":null,"subroutine":292}]},"7443":{"warn_unused_overlaps":[{"branch":1012,"time":null,"subroutine":200,"condition":164,"pod":177,"statement":3322}]},"3381":{"is_autointerface":[{"statement":1418,"pod":106,"condition":64,"subroutine":119,"time":null,"branch":490}]},"8590":{"__ANON__":[{"statement":3886,"pod":192,"condition":191,"time":null,"branch":1156,"subroutine":220}]},"6157":{"substitute_auto_intf":[{"condition":116,"pod":155,"statement":2668,"branch":836,"time":null,"subroutine":173}]},"308":{"equal":[{"statement":38,"pod":2,"condition":null,"time":null,"branch":2,"subroutine":12}]},"4215":{"link_subnet":[{"condition":73,"pod":125,"statement":1759,"branch":581,"time":null,"subroutine":139}]},"509":{"check_int":[{"time":null,"branch":13,"subroutine":33,"pod":23,"statement":124,"condition":2}]},"2800":{"__ANON__":[{"condition":57,"pod":80,"statement":1172,"subroutine":90,"branch":419,"time":null}]},"1040":{"check_model":[{"condition":13,"statement":353,"pod":60,"subroutine":70,"branch":83,"time":null}]},"9587":{"get_cluster_aggregates":[{"statement":4292,"pod":204,"condition":214,"time":null,"branch":1257,"subroutine":238}]},"14910":{"check_and_convert_routes":[{"branch":1907,"time":null,"subroutine":340,"condition":365,"statement":6487,"pod":299}]},"9909":{"inherit_attributes_from_area":[{"condition":227,"statement":4422,"pod":213,"branch":1303,"time":null,"subroutine":247}]},"4516":{"is_redundany_group":[{"pod":130,"statement":1911,"condition":79,"time":null,"branch":618,"subroutine":145}]},"3377":{"is_area":[{"pod":102,"statement":1414,"condition":64,"time":null,"branch":490,"subroutine":115}]},"5942":{"expand_protocols":[{"subroutine":167,"time":null,"branch":819,"pod":149,"statement":2582,"condition":111}]},"8398":{"find_subnets_in_zone":[{"subroutine":218,"time":null,"branch":1123,"statement":3776,"pod":191,"condition":190}]},"6754":{"show_unknown_owners":[{"condition":135,"pod":161,"statement":2979,"branch":928,"time":null,"subroutine":183}]},"7382":{"collect_redundant_rules":[{"pod":175,"statement":3282,"condition":163,"subroutine":198,"time":null,"branch":1006}]},"3357":{"show_read_statistics":[{"condition":64,"pod":96,"statement":1399,"subroutine":109,"branch":490,"time":null}]},"9046":{"get_managed_local_clusters":[{"branch":1198,"time":null,"subroutine":225,"condition":206,"pod":195,"statement":4034}]},"12966":{"is_filtered_at":[{"statement":5612,"pod":262,"condition":316,"subroutine":298,"time":null,"branch":1646}]},"3958":{"link_policy_distribution_point":[{"branch":546,"time":null,"subroutine":133,"condition":71,"statement":1649,"pod":119}]},"10806":{"set_loop_cluster":[{"statement":4780,"pod":233,"condition":237,"time":null,"branch":1396,"subroutine":267}]},"18056":{"__ANON__":[{"condition":431,"pod":345,"statement":8006,"subroutine":393,"branch":2241,"time":null}]},"4974":{"convert_hosts":[{"pod":139,"statement":2134,"condition":94,"subroutine":154,"time":null,"branch":680}]},"10535":{"traverse_loop_part":[{"subroutine":263,"time":null,"branch":1369,"statement":4691,"pod":229,"condition":234}]},"17642":{"print_code":[{"branch":2209,"time":null,"subroutine":385,"condition":429,"statement":7817,"pod":338}]},"2852":{"read_simple_protocol":[{"branch":420,"time":null,"subroutine":92,"condition":57,"statement":1180,"pod":81}]},"14595":{"get_route_path":[{"subroutine":334,"time":null,"branch":1883,"statement":6360,"pod":293,"condition":359}]},"16852":{"print_crypto_filter_acl":[{"branch":2103,"time":null,"subroutine":373,"condition":411,"pod":326,"statement":7423}]},"2906":{"read_typed_name_or_simple_protocol":[{"subroutine":94,"branch":427,"time":null,"condition":57,"pod":83,"statement":1205}]},"4269":{"link_subnets":[{"subroutine":141,"branch":588,"time":null,"condition":73,"statement":1785,"pod":126}]},"13822":{"mark_dynamic_host_nets":[{"condition":340,"statement":5980,"pod":282,"subroutine":319,"branch":1774,"time":null}]},"576":{"read_identifier":[{"subroutine":41,"branch":20,"time":null,"condition":5,"pod":31,"statement":153}]},"13706":{"mark_local_secondary":[{"pod":276,"statement":5912,"condition":337,"time":null,"branch":1756,"subroutine":313}]},"2792":{"gen_protocol_name":[{"time":null,"branch":409,"subroutine":89,"pod":79,"statement":1148,"condition":54}]},"788":{"check_hostname":[{"subroutine":50,"time":null,"branch":55,"statement":239,"pod":40,"condition":13}]},"2684":{"read_protocolgroup":[{"time":null,"branch":386,"subroutine":84,"statement":1096,"pod":74,"condition":51}]},"9859":{"check_useless_nat":[{"condition":227,"pod":211,"statement":4405,"branch":1299,"time":null,"subroutine":245}]},"10406":{"check_pathrestrictions":[{"statement":4632,"pod":228,"condition":232,"time":null,"branch":1352,"subroutine":262}]},"11197":{"cluster_navigation":[{"subroutine":273,"time":null,"branch":1440,"statement":4901,"pod":239,"condition":245}]},"13730":{"get_zones":[{"subroutine":314,"branch":1763,"time":null,"condition":337,"pod":277,"statement":5930}]},"8943":{"check_crosslink":[{"subroutine":224,"branch":1186,"time":null,"condition":204,"statement":3994,"pod":194}]},"3683":{"expand_splitted_protocol":[{"pod":113,"statement":1537,"condition":69,"subroutine":127,"time":null,"branch":524}]},"3262":{"read_file":[{"statement":1348,"pod":94,"condition":62,"time":null,"branch":477,"subroutine":105}]},"2691":{"read_port_range":[{"pod":75,"statement":1100,"condition":51,"time":null,"branch":386,"subroutine":85}]},"12925":{"check_supernet_in_zone":[{"pod":261,"statement":5592,"condition":316,"subroutine":297,"time":null,"branch":1640}]},"3142":{"read_ipsec":[{"condition":61,"statement":1299,"pod":90,"branch":455,"time":null,"subroutine":101}]},"16146":{"print_acl_placeholder":[{"subroutine":361,"branch":2050,"time":null,"condition":401,"statement":7066,"pod":315}]},"13761":{"mark_secondary_rules":[{"subroutine":317,"branch":1768,"time":null,"condition":338,"pod":280,"statement":5951}]},"519":{"read_int":[{"branch":14,"time":null,"subroutine":34,"condition":2,"pod":24,"statement":128}]},"8896":{"__ANON__":[{"time":null,"branch":1186,"subroutine":223,"pod":194,"statement":3994,"condition":204}]},"405":{"context":[{"subroutine":22,"time":null,"branch":9,"pod":12,"statement":82,"condition":null}]},"5266":{"check_auto_intf":[{"condition":101,"pod":143,"statement":2261,"branch":714,"time":null,"subroutine":158}]},"6103":{"expand_auto_intf_with_dst_list":[{"condition":115,"statement":2644,"pod":154,"branch":831,"time":null,"subroutine":172}]},"11274":{"cluster_path_mark":[{"time":null,"branch":1444,"subroutine":274,"statement":4924,"pod":240,"condition":246}]},"8300":{"get_nat_network":[{"condition":182,"statement":3729,"pod":187,"branch":1112,"time":null,"subroutine":213}]},"14179":{"distribute_nat_to_device":[{"branch":1834,"time":null,"subroutine":325,"condition":351,"statement":6168,"pod":286}]},"365":{"aref_eq":[{"statement":70,"pod":9,"condition":null,"time":null,"branch":5,"subroutine":19}]},"679":{"read_typed_name":[{"condition":7,"pod":37,"statement":199,"branch":35,"time":null,"subroutine":47}]},"979":{"add_attribute":[{"subroutine":66,"time":null,"branch":73,"statement":324,"pod":56,"condition":13}]},"15507":{"print_pix_static":[{"statement":6764,"pod":303,"condition":387,"subroutine":345,"time":null,"branch":1973}]},"7134":{"remove_unenforceable_rules":[{"subroutine":191,"time":null,"branch":982,"pod":168,"statement":3150,"condition":154}]},"4938":{"check_host_compatibility":[{"subroutine":153,"branch":674,"time":null,"condition":91,"statement":2120,"pod":138}]},"18007":{"compile":[{"condition":431,"statement":7962,"pod":344,"branch":2240,"time":null,"subroutine":392}]},"9168":{"mark_managed_local":[{"subroutine":228,"time":null,"branch":1214,"statement":4105,"pod":196,"condition":210}]},"6185":{"classify_protocols":[{"branch":838,"time":null,"subroutine":174,"condition":116,"pod":156,"statement":2683}]},"1010":{"check_managed":[{"branch":79,"time":null,"subroutine":69,"condition":13,"pod":59,"statement":342}]},"9303":{"link_aggregate_to_zone":[{"pod":199,"statement":4165,"condition":211,"subroutine":232,"time":null,"branch":1226}]},"14160":{"collect_nat_path":[{"condition":351,"statement":6158,"pod":285,"branch":1830,"time":null,"subroutine":324}]},"30":{"BEGIN":[{"pod":null,"statement":3,"condition":null,"subroutine":1,"time":null,"branch":null}]},"16731":{"gen_crypto_rules":[{"statement":7358,"pod":323,"condition":411,"time":null,"branch":2097,"subroutine":370}]},"878":{"split_typed_name":[{"subroutine":57,"branch":64,"time":null,"condition":13,"statement":273,"pod":47}]},"6858":{"__ANON__":[{"subroutine":185,"time":null,"branch":947,"statement":3045,"pod":163,"condition":142}]},"6899":{"apply_src_dst_modifier":[{"subroutine":186,"branch":947,"time":null,"condition":142,"pod":163,"statement":3045}]},"321":{"find_duplicates":[{"subroutine":14,"branch":3,"time":null,"condition":null,"pod":4,"statement":45}]},"13453":{"check_supernet_rules":[{"condition":330,"pod":271,"statement":5797,"branch":1721,"time":null,"subroutine":307}]},"16875":{"print_crypto_map_attributes":[{"statement":7434,"pod":327,"condition":411,"subroutine":374,"time":null,"branch":2104}]},"13317":{"check_transient_supernet_rules":[{"condition":325,"pod":269,"statement":5748,"subroutine":305,"branch":1703,"time":null}]},"42":{"BEGIN":[{"statement":21,"pod":null,"condition":null,"time":null,"branch":null,"subroutine":7}]},"4653":{"disable_behind":[{"subroutine":148,"branch":635,"time":null,"condition":85,"statement":1973,"pod":133}]},"157":{"fast_mode":[{"subroutine":11,"branch":1,"time":null,"condition":null,"statement":34,"pod":1}]},"9673":{"set_zone_cluster":[{"subroutine":240,"time":null,"branch":1269,"pod":206,"statement":4331,"condition":216}]},"10839":{"find_dists_and_loops":[{"condition":237,"pod":234,"statement":4788,"subroutine":268,"branch":1398,"time":null}]},"7123":{"warn_useless_unenforceable":[{"subroutine":190,"branch":979,"time":null,"condition":154,"pod":167,"statement":3143}]},"16822":{"print_crypto_acl":[{"subroutine":372,"branch":2100,"time":null,"condition":411,"statement":7407,"pod":325}]},"2671":{"read_group":[{"condition":51,"statement":1088,"pod":73,"branch":385,"time":null,"subroutine":83}]},"17349":{"print_prt":[{"subroutine":382,"branch":2163,"time":null,"condition":418,"statement":7680,"pod":335}]},"14717":{"generate_routing_tree":[{"pod":295,"statement":6403,"condition":365,"subroutine":336,"time":null,"branch":1895}]}},"statement":[29,29,29,30,30,30,31,31,31,32,32,32,33,33,33,34,34,34,35,35,35,42,42,42,3897,3897,3897,13540,13540,13540,145,146,147,150,157,158,159,162,308,309,310,310,316,317,317,321,322,323,323,327,328,328,329,329,334,335,335,336,336,337,341,342,343,345,351,352,353,354,357,360,365,366,367,368,370,374,375,376,377,379,383,384,405,406,407,410,412,414,418,419,423,429,430,431,436,437,439,443,444,445,446,450,451,452,453,457,461,463,464,465,466,467,468,469,481,482,486,487,495,496,497,498,503,504,509,510,511,514,519,520,521,526,527,528,529,531,534,539,540,541,547,548,549,550,551,554,555,559,560,564,565,571,572,576,577,578,581,587,588,589,592,598,599,600,603,609,610,611,614,623,624,625,626,627,628,629,630,631,634,636,637,638,639,643,647,652,653,654,655,656,657,658,661,664,665,666,669,672,675,679,708,711,713,714,716,717,718,719,721,722,723,724,727,728,729,731,734,736,739,741,746,749,751,752,753,754,755,757,758,761,762,764,767,768,772,777,778,779,782,788,789,790,791,794,798,804,805,808,813,814,815,817,818,821,835,836,837,838,842,843,844,849,850,851,853,858,859,860,863,868,869,870,873,878,881,885,886,887,888,891,896,897,898,899,900,901,902,905,906,907,910,914,915,916,917,918,919,922,924,926,930,931,932,936,937,938,939,943,944,945,946,948,952,953,954,955,956,957,958,959,961,973,974,975,979,980,981,982,988,989,990,991,992,993,994,995,996,997,999,1003,1004,1006,1010,1011,1012,1013,1016,1017,1022,1025,1031,1034,1036,1040,1042,1043,1044,1047,1049,1052,1051,1053,1054,1056,1057,1058,1059,1061,1071,1072,1073,1074,1075,1076,1079,1082,1084,1085,1090,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1107,1108,1112,1113,1114,1115,1118,1119,1121,1122,1123,1124,1125,1126,1127,1128,1131,1132,1138,1140,1143,1144,1147,1150,1153,1156,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1170,1173,1177,1180,1183,1184,1195,1196,1197,1200,1201,1203,1204,1207,1210,1211,1216,1219,1223,1226,1227,1228,1229,1230,1231,1232,1233,1234,1237,1240,1246,1249,1252,1255,1256,1257,1257,1258,1262,1265,1266,1266,1267,1269,1272,1274,1280,1284,1285,1286,1287,1288,1290,1291,1292,1293,1294,1295,1296,1297,1300,1301,1306,1311,1314,1317,1320,1323,1324,1325,1326,1326,1327,1332,1332,1333,1336,1336,1339,1341,1342,1343,1344,1345,1347,1349,1352,1353,1356,1357,1360,1365,1368,1370,1371,1374,1375,1376,1385,1397,1398,1399,1406,1407,1408,1409,1410,1412,1417,1418,1418,1421,1422,1423,1428,1428,1429,1434,1439,1445,1445,1446,1448,1451,1451,1452,1453,1462,1462,1462,1465,1465,1469,1470,1473,1477,1497,1498,1501,1502,1503,1504,1507,1508,1509,1510,1511,1512,1513,1514,1518,1519,1520,1522,1526,1529,1532,1535,1538,1541,1546,1549,1550,1551,1552,1552,1556,1557,1558,1561,1564,1567,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1581,1586,1587,1588,1589,1590,1591,1592,1595,1598,1599,1602,1606,1610,1613,1618,1619,1620,1621,1622,1623,1626,1628,1631,1633,1634,1637,1640,1641,1646,1647,1650,1653,1656,1659,1659,1660,1661,1663,1666,1669,1672,1679,1680,1686,1687,1688,1689,1693,1695,1699,1702,1701,1701,1703,1706,1708,1709,1710,1713,1714,1715,1718,1720,1721,1722,1724,1725,1729,1732,1733,1733,1734,1735,1737,1738,1739,1740,1744,1747,1748,1749,1749,1750,1750,1751,1754,1756,1760,1767,1771,1772,1773,1775,1776,1776,1779,1780,1781,1783,1786,1787,1788,1789,1792,1799,1800,1800,1801,1802,1803,1804,1804,1805,1808,1809,1815,1819,1822,1830,1832,1834,1843,1844,1847,1847,1848,1849,1852,1853,1856,1856,1856,1862,1865,1867,1870,1875,1879,1879,1879,1880,1887,1887,1888,1891,1899,1900,1905,1907,1908,1911,1912,1914,1915,1916,1917,1918,1919,1920,1922,1927,1930,1933,1936,1939,1942,1945,1948,1951,1954,1959,1967,1970,1971,1972,1973,1975,1976,1977,1978,1981,1985,1986,1987,1987,1988,1989,1990,1994,1997,2000,2003,2008,2013,2013,2014,2014,2015,2016,2019,2020,2023,2026,2024,2029,2036,2037,2039,2040,2043,2047,2048,2049,2050,2053,2060,2061,2061,2064,2065,2068,2072,2075,2076,2080,2083,2084,2089,2097,2098,2099,2099,2100,2101,2105,2111,2115,2116,2119,2123,2123,2129,2130,2138,2139,2141,2144,2145,2153,2154,2155,2156,2157,2159,2163,2168,2169,2170,2173,2175,2177,2178,2180,2181,2184,2189,2190,2195,2199,2200,2204,2205,2205,2206,2209,2212,2213,2214,2218,2221,2222,2228,2229,2229,2230,2231,2232,2233,2234,2240,2244,2246,2247,2252,2256,2260,2261,2265,2271,2272,2277,2278,2279,2279,2280,2281,2282,2286,2287,2290,2290,2290,2293,2294,2297,2299,2300,2303,2306,2306,2309,2313,2314,2318,2319,2319,2319,2325,2329,2332,2335,2336,2342,2343,2344,2346,2346,2347,2348,2351,2352,2357,2358,2363,2364,2369,2371,2371,2374,2375,2381,2386,2387,2394,2395,2397,2398,2409,2410,2412,2414,2419,2420,2421,2429,2430,2431,2434,2435,2437,2438,2438,2441,2446,2447,2449,2452,2452,2455,2458,2462,2464,2472,2473,2474,2478,2479,2486,2487,2490,2494,2495,2496,2498,2499,2500,2501,2504,2505,2506,2506,2509,2512,2516,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2535,2538,2541,2544,2545,2546,2548,2551,2554,2555,2556,2557,2558,2560,2560,2562,2566,2568,2572,2575,2576,2577,2578,2579,2580,2581,2582,2587,2595,2598,2601,2607,2608,2609,2610,2611,2612,2613,2614,2615,2615,2616,2617,2619,2624,2624,2625,2626,2628,2631,2634,2635,2636,2638,2641,2644,2647,2648,2649,2651,2654,2657,2662,2665,2671,2672,2673,2674,2675,2676,2677,2678,2684,2685,2686,2687,2691,2692,2693,2694,2695,2696,2697,2698,2700,2701,2704,2708,2712,2716,2721,2722,2723,2724,2725,2727,2730,2732,2736,2737,2738,2739,2740,2741,2742,2743,2746,2750,2751,2752,2760,2764,2765,2766,2767,2768,2769,2774,2775,2778,2779,2782,2786,2788,2792,2793,2794,2796,2810,2800,2801,2802,2805,2808,2811,2812,2813,2813,2814,2815,2816,2817,2820,2821,2822,2825,2830,2832,2838,2839,2840,2841,2844,2845,2846,2847,2852,2853,2854,2855,2856,2859,2860,2863,2864,2867,2868,2871,2874,2877,2879,2880,2883,2885,2889,2890,2891,2892,2896,2899,2902,2906,2910,2911,2912,2913,2914,2915,2921,2922,2923,2924,2925,2926,2927,2931,2932,2933,2934,2935,2936,2937,2938,2939,2940,2943,2946,2949,2952,2955,2958,2961,2966,2967,2968,2970,2971,2973,2974,2975,2976,2977,2978,2980,2981,2982,2985,2987,2988,2994,3002,3003,3003,3006,3009,3015,3016,3017,3018,3019,3020,3021,3022,3026,3027,3028,3029,3030,3031,3032,3033,3034,3036,3037,3038,3039,3040,3040,3044,3047,3049,3050,3052,3053,3054,3055,3056,3059,3064,3065,3066,3067,3071,3104,3105,3142,3143,3149,3150,3151,3152,3153,3154,3155,3156,3157,3158,3161,3163,3166,3169,3170,3176,3177,3178,3179,3180,3181,3182,3183,3184,3186,3189,3191,3194,3196,3199,3202,3205,3208,3211,3214,3215,3217,3219,3241,3242,3243,3245,3246,3247,3248,3249,3257,3262,3263,3266,3267,3269,3270,3275,3276,3279,3280,3282,3283,3284,3285,3287,3291,3292,3295,3296,3297,3301,3317,3303,3304,3305,3306,3307,3308,3309,3310,3312,3315,3334,3321,3324,3325,3326,3328,3329,3332,3338,3339,3339,3340,3342,3344,3345,3348,3350,3351,3353,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3372,3373,3374,3375,3376,3377,3378,3379,3380,3381,3386,3388,3389,3390,3391,3392,3393,3394,3395,3396,3397,3398,3399,3401,3402,3404,3408,3409,3410,3411,3412,3415,3429,3430,3431,3432,3440,3443,3444,3445,3446,3447,3452,3455,3457,3461,3462,3463,3464,3468,3474,3475,3478,3485,3487,3491,3494,3495,3496,3498,3501,3504,3507,3511,3513,3517,3518,3519,3522,3524,3534,3541,3535,3548,3662,3551,3552,3553,3554,3555,3555,3559,3563,3568,3573,3574,3577,3580,3581,3590,3591,3592,3593,3654,3597,3598,3599,3600,3602,3603,3603,3607,3608,3609,3613,3617,3618,3619,3623,3626,3631,3636,3638,3648,3651,3653,3655,3656,3657,3660,3665,3667,3668,3669,3669,3673,3678,3679,3683,3686,3687,3690,3691,3695,3738,3745,3745,3758,3761,3762,3767,3769,3770,3771,3772,3773,3776,3777,3787,3788,3789,3790,3791,3794,3797,3799,3803,3804,3805,3808,3809,3815,3822,3823,3826,3827,3831,3832,3832,3834,3835,3836,3838,3839,3840,3841,3842,3843,3844,3845,3847,3849,3850,3850,3853,3856,3859,3861,3861,3866,3869,3870,3873,3874,3875,3876,3877,3878,3879,3882,3886,3889,3890,3890,3896,3898,3907,3913,3913,3913,3914,3915,3915,3916,3916,3917,3921,3921,3922,3924,3929,3930,3931,3931,3932,3935,3936,3938,3939,3940,3941,3944,3945,3946,3947,3947,3948,3951,3952,3954,3958,3959,3960,3961,3962,3966,3967,3969,3970,3971,3975,3976,3978,3979,3983,3984,3985,3994,3990,3992,3999,4000,4002,4003,4004,4005,4008,4009,4011,4012,4013,4015,4016,4018,4019,4020,4024,4029,4030,4032,4031,4033,4034,4035,4036,4039,4043,4047,4049,4054,4055,4056,4057,4057,4058,4059,4060,4065,4066,4070,4074,4079,4080,4081,4084,4089,4090,4090,4091,4092,4094,4095,4097,4098,4101,4104,4109,4110,4113,4117,4118,4119,4127,4137,4137,4138,4140,4144,4145,4146,4147,4154,4159,4174,4175,4176,4179,4180,4181,4190,4191,4193,4194,4195,4199,4206,4207,4208,4209,4211,4215,4221,4218,4222,4223,4223,4224,4225,4229,4230,4232,4233,4234,4241,4242,4244,4245,4246,4247,4250,4251,4255,4256,4261,4262,4265,4269,4270,4272,4273,4274,4274,4275,4278,4284,4285,4286,4289,4289,4290,4291,4293,4294,4298,4299,4301,4302,4303,4303,4304,4305,4306,4307,4308,4314,4314,4318,4319,4322,4328,4329,4330,4336,4337,4342,4343,4346,4347,4347,4347,4349,4349,4350,4351,4355,4358,4364,4364,4365,4369,4370,4371,4371,4372,4373,4374,4377,4377,4378,4378,4382,4397,4402,4403,4404,4405,4406,4407,4408,4409,4410,4411,4412,4414,4416,4417,4419,4424,4425,4428,4433,4434,4436,4441,4455,4456,4457,4458,4459,4459,4460,4460,4461,4462,4462,4463,4464,4465,4466,4469,4467,4468,4469,4470,4471,4472,4473,4474,4475,4475,4476,4478,4481,4495,4496,4497,4498,4499,4500,4501,4502,4507,4516,4517,4519,4518,4520,4524,4525,4525,4529,4531,4531,4532,4534,4537,4542,4543,4543,4544,4545,4548,4548,4549,4553,4554,4555,4558,4560,4561,4564,4569,4573,4574,4579,4580,4580,4581,4582,4583,4587,4591,4592,4593,4597,4601,4601,4602,4603,4604,4605,4616,4624,4625,4626,4627,4628,4629,4630,4631,4632,4633,4634,4635,4653,4656,4657,4658,4661,4663,4664,4664,4665,4667,4667,4668,4671,4674,4676,4677,4678,4679,4679,4680,4681,4684,4706,4707,4708,4709,4711,4712,4713,4718,4719,4720,4721,4722,4723,4724,4724,4728,4729,4729,4730,4733,4734,4734,4735,4736,4737,4738,4739,4740,4741,4745,4745,4746,4747,4748,4749,4750,4751,4753,4757,4758,4765,4769,4769,4771,4772,4773,4774,4780,4784,4787,4788,4789,4790,4795,4796,4797,4798,4801,4802,4803,4803,4804,4805,4809,4810,4813,4817,4818,4819,4820,4821,4824,4830,4831,4832,4833,4834,4834,4836,4837,4840,4838,4850,4851,4852,4852,4853,4854,4855,4861,4865,4866,4867,4868,4876,4877,4878,4878,4879,4880,4881,4886,4887,4888,4889,4890,4891,4894,4899,4899,4900,4901,4915,4916,4918,4919,4920,4921,4922,4923,4927,4931,4932,4933,4934,4938,4939,4940,4941,4942,4943,4948,4951,4952,4955,4956,4961,4965,4968,4974,4975,4976,4977,4981,4981,4983,4982,4984,4985,4986,4987,4988,4989,4996,5001,5001,5002,5003,5004,5005,5009,5012,5018,5020,5021,5022,5023,5024,5025,5025,5028,5035,5036,5037,5038,5039,5040,5043,5044,5044,5045,5045,5052,5053,5054,5055,5058,5059,5060,5061,5062,5063,5064,5069,5074,5075,5076,5077,5078,5079,5080,5082,5099,5102,5103,5104,5105,5106,5109,5117,5119,5120,5128,5129,5131,5132,5132,5134,5135,5138,5147,5147,5148,5149,5150,5153,5158,5159,5159,5160,5161,5162,5163,5164,5165,5166,5167,5168,5170,5171,5174,5178,5179,5182,5190,5190,5211,5212,5213,5213,5216,5219,5219,5226,5227,5228,5229,5230,5231,5232,5235,5237,5238,5244,5245,5249,5266,5267,5270,5271,5272,5273,5274,5275,5276,5277,5278,5281,5282,5283,5284,5285,5286,5287,5289,5292,5293,5293,5294,5295,5296,5297,5298,5301,5305,5306,5312,5313,5314,5315,5316,5317,5317,5320,5324,5332,5333,5334,5336,5337,5338,5340,5341,5342,5345,5343,5344,5344,5350,5351,5352,5355,5358,5361,5362,5363,5364,5366,5367,5368,5369,5370,5373,5375,5376,5377,5384,5384,5387,5393,5394,5397,5398,5399,5401,5402,5404,5405,5406,5407,5408,5409,5410,5415,5420,5420,5427,5423,5425,5430,5430,5434,5435,5440,5445,5446,5453,5456,5460,5466,5466,5467,5472,5472,5473,5474,5477,5478,5479,5482,5486,5485,5493,5490,5492,5491,5495,5496,5496,5499,5499,5503,5504,5505,5512,5515,5519,5524,5532,5533,5536,5537,5538,5541,5545,5552,5555,5563,5560,5561,5570,5567,5568,5568,5569,5588,5573,5574,5575,5576,5579,5577,5579,5582,5585,5587,5623,5590,5591,5592,5593,5594,5597,5598,5605,5605,5615,5615,5609,5620,5622,5624,5625,5626,5627,5628,5629,5630,5633,5634,5637,5642,5643,5643,5644,5645,5650,5654,5655,5655,5657,5660,5661,5662,5663,5692,5672,5673,5674,5675,5676,5679,5680,5685,5689,5672,5696,5697,5704,5707,5708,5709,5710,5712,5716,5715,5719,5720,5728,5731,5738,5743,5746,5747,5749,5752,5753,5754,5755,5762,5765,5767,5770,5775,5776,5777,5778,5787,5789,5790,5791,5792,5795,5796,5796,5798,5797,5799,5804,5806,5811,5811,5812,5817,5822,5825,5830,5831,5833,5834,5835,5836,5839,5841,5840,5842,5843,5843,5845,5849,5850,5851,5854,5855,5856,5857,5858,5861,5861,5862,5868,5869,5872,5873,5874,5875,5876,5877,5880,5883,5884,5887,5892,5893,5897,5899,5900,5901,5902,5905,5905,5906,5911,5912,5913,5914,5915,5916,5918,5919,5920,5921,5924,5925,5926,5931,5932,5942,5943,5944,5947,5948,5949,5952,5953,5954,5955,5958,5961,5962,5966,5967,5968,5969,5970,5978,5979,5980,5983,5987,5990,5991,5995,5998,6003,6004,6005,6006,6007,6008,6009,6013,6014,6021,6022,6023,6024,6025,6026,6029,6031,6034,6035,6039,6050,6051,6052,6053,6056,6060,6061,6062,6063,6064,6066,6074,6075,6076,6077,6103,6104,6108,6109,6110,6113,6114,6116,6117,6118,6119,6120,6129,6135,6135,6138,6141,6143,6145,6145,6152,6147,6147,6150,6157,6158,6159,6160,6161,6162,6166,6167,6168,6169,6170,6175,6176,6179,6181,6185,6186,6187,6190,6195,6197,6198,6201,6202,6204,6205,6206,6208,6213,6216,6217,6218,6219,6219,6225,6225,6228,6228,6231,6235,6236,6237,6238,6239,6241,6242,6243,6244,6252,6257,6268,6269,6270,6271,6272,6274,6275,6276,6277,6278,6279,6280,6281,6284,6287,6290,6291,6293,6294,6295,6298,6299,6304,6305,6307,6308,6310,6312,6311,6314,6315,6318,6320,6321,6322,6323,6325,6324,6327,6328,6329,6335,6336,6337,6338,6338,6340,6341,6342,6346,6347,6353,6354,6355,6356,6357,6358,6359,6361,6363,6365,6365,6373,6377,6379,6382,6383,6384,6387,6388,6389,6390,6391,6392,6396,6399,6403,6409,6410,6411,6412,6412,6413,6417,6423,6424,6433,6436,6437,6438,6443,6448,6449,6449,6450,6451,6452,6453,6454,6457,6460,6463,6464,6471,6472,6472,6474,6476,6481,6490,6491,6492,6492,6493,6493,6493,6493,6494,6502,6504,6511,6506,6507,6507,6508,6509,6510,6514,6515,6516,6521,6522,6522,6523,6524,6541,6531,6532,6532,6533,6535,6535,6536,6537,6538,6544,6553,6546,6547,6548,6549,6550,6551,6556,6557,6557,6558,6559,6565,6564,6565,6569,6624,6576,6577,6578,6579,6582,6583,6584,6585,6586,6594,6595,6599,6600,6601,6602,6602,6604,6605,6606,6610,6611,6612,6613,6616,6617,6619,6620,6621,6625,6626,6631,6632,6633,6635,6636,6637,6638,6639,6640,6641,6642,6646,6647,6648,6648,6649,6657,6660,6661,6664,6665,6667,6668,6669,6670,6671,6672,6675,6676,6676,6677,6689,6689,6689,6689,6690,6691,6692,6693,6693,6694,6695,6696,6703,6708,6709,6710,6712,6715,6721,6722,6723,6723,6724,6725,6726,6727,6728,6732,6737,6738,6738,6739,6740,6741,6742,6744,6747,6754,6755,6757,6762,6763,6764,6765,6768,6771,6773,6774,6778,6780,6782,6783,6784,6785,6786,6787,6788,6790,6793,6797,6798,6799,6802,6806,6807,6808,6809,6809,6814,6815,6816,6819,6822,6823,6824,6825,6826,6829,6833,6838,6839,6840,6845,6848,6849,6850,6858,6858,6860,6859,6862,6867,6870,6871,6874,6875,6876,6877,6877,6886,6887,6890,6891,6899,6900,6902,6903,6904,6905,6906,6907,6910,6911,6912,6914,6917,6918,6919,6921,6924,6926,6927,6929,6933,6934,6935,6936,6937,6938,6939,6940,6942,6943,6946,6947,6948,6950,6951,6954,6955,6956,6958,6958,6966,6967,6968,6971,6977,6980,6981,6982,6986,6987,6991,6991,6992,7011,7012,7014,7015,7016,7017,7020,7021,7022,7022,7024,7025,7029,7031,7038,7039,7042,7044,7054,7060,7063,7069,7071,7074,7078,7079,7080,7082,7086,7088,7089,7091,7096,7099,7102,7104,7106,7108,7109,7110,7111,7112,7113,7116,7118,7123,7124,7125,7126,7127,7128,7130,7134,7135,7136,7137,7137,7138,7139,7140,7141,7142,7143,7149,7150,7160,7161,7162,7163,7164,7165,7166,7167,7170,7170,7172,7173,7175,7176,7177,7178,7178,7180,7181,7182,7183,7186,7192,7193,7196,7204,7205,7207,7208,7212,7213,7214,7215,7216,7218,7220,7221,7236,7237,7238,7240,7239,7241,7242,7243,7244,7247,7250,7251,7252,7256,7259,7263,7264,7265,7268,7269,7270,7273,7274,7277,7280,7281,7284,7290,7291,7294,7300,7303,7306,7308,7313,7314,7315,7316,7317,7319,7320,7321,7323,7327,7328,7330,7331,7333,7334,7335,7337,7338,7339,7340,7341,7342,7343,7347,7348,7349,7350,7351,7355,7356,7357,7358,7359,7360,7361,7361,7363,7365,7366,7367,7368,7369,7370,7371,7372,7372,7373,7376,7382,7384,7385,7386,7388,7389,7390,7391,7392,7393,7394,7398,7399,7403,7404,7405,7406,7408,7409,7410,7411,7412,7413,7414,7415,7416,7416,7420,7422,7423,7424,7425,7426,7427,7428,7432,7429,7433,7436,7439,7443,7444,7445,7446,7447,7448,7449,7450,7456,7461,7462,7463,7464,7464,7465,7466,7467,7468,7476,7480,7481,7487,7488,7490,7490,7490,7491,7492,7493,7493,7495,7496,7510,7511,7512,7516,7517,7518,7519,7527,7534,7530,7532,7531,7535,7535,7536,7536,7540,7554,7542,7543,7544,7545,7547,7547,7547,7548,7549,7550,7553,7555,7556,7556,7557,7558,7559,7560,7561,7561,7561,7562,7563,7563,7563,7564,7564,7564,7565,7565,7567,7568,7569,7570,7573,7574,7579,7583,7584,7585,7591,7593,7592,7593,7598,7604,7607,7605,7606,7610,7612,7613,7614,7615,7616,7617,7618,7619,7621,7628,7626,7632,7635,7637,7640,7641,7642,7643,7645,7646,7652,7665,7668,7671,7672,7672,7673,7673,7676,7677,7680,7681,7687,7688,7689,7690,7691,7692,7696,7701,7703,7704,7705,7708,7709,7713,7714,7716,7717,7723,7724,7725,7725,7726,7726,7729,7729,7732,7732,7733,7737,7747,7750,7754,7758,7759,7763,7764,7765,7766,7767,7778,7782,7782,7783,7784,7785,7793,7797,7798,7801,7801,7802,7803,7807,7807,7811,7811,7812,7813,7816,7816,7819,7822,7825,7832,7832,7833,7834,7838,7839,7840,7841,7842,7847,7848,7854,7855,7863,7864,7872,7878,7884,7885,7889,7893,7894,7897,7899,7898,7901,7905,7909,7911,7912,7913,7914,7915,7916,7925,7946,7947,7948,7953,7972,7955,7956,7957,7958,7959,7963,7963,7964,7970,7971,7975,7976,7977,7981,7982,7983,7984,7990,7991,7995,7995,7998,7999,8000,8003,8006,8007,8008,8009,8015,8016,8017,8028,8033,8034,8034,8035,8038,8043,8044,8052,8052,8057,8058,8059,8060,8061,8062,8066,8067,8068,8069,8070,8077,8078,8082,8083,8083,8084,8091,8093,8094,8095,8096,8096,8097,8098,8099,8100,8109,8113,8114,8115,8117,8120,8132,8133,8133,8133,8134,8135,8135,8136,8137,8140,8141,8141,8142,8143,8148,8157,8158,8164,8165,8166,8167,8168,8169,8169,8170,8173,8175,8176,8177,8177,8178,8179,8179,8180,8190,8191,8199,8213,8202,8203,8206,8207,8207,8208,8208,8209,8210,8214,8215,8216,8217,8221,8222,8223,8224,8224,8225,8226,8227,8233,8234,8235,8236,8239,8240,8240,8241,8250,8251,8252,8252,8253,8253,8254,8255,8258,8259,8264,8272,8273,8274,8274,8275,8276,8276,8277,8278,8279,8280,8281,8284,8285,8286,8287,8288,8291,8296,8300,8301,8302,8303,8304,8307,8318,8319,8320,8320,8344,8322,8323,8331,8334,8334,8338,8341,8345,8345,8346,8347,8348,8350,8350,8351,8352,8355,8358,8364,8366,8367,8368,8373,8373,8374,8375,8378,8378,8379,8380,8380,8381,8382,8386,8388,8391,8398,8399,8407,8408,8415,8415,8416,8419,8423,8425,8425,8425,8428,8430,8431,8432,8433,8434,8434,8435,8436,8440,8441,8442,8443,8451,8453,8453,8456,8457,8458,8459,8465,8471,8472,8475,8477,8479,8481,8485,8487,8488,8491,8492,8499,8496,8497,8503,8509,8510,8511,8522,8535,8537,8538,8539,8557,8577,8560,8561,8562,8563,8565,8566,8567,8571,8573,8574,8576,8578,8578,8584,8584,8585,8603,8590,8591,8596,8597,8598,8599,8602,8604,8605,8606,8608,8611,8612,8613,8614,8615,8616,8617,8623,8624,8624,8625,8626,8629,8630,8632,8634,8635,8643,8642,8643,8646,8646,8647,8655,8665,8666,8667,8669,8670,8673,8675,8676,8677,8678,8679,8679,8683,8684,8685,8686,8687,8688,8695,8696,8705,8708,8716,8718,8719,8720,8721,8727,8728,8728,8734,8739,8740,8741,8742,8749,8750,8753,8755,8756,8762,8766,8767,8768,8769,8770,8774,8779,8780,8783,8789,8792,8793,8795,8797,8802,8814,8816,8823,8824,8827,8832,8833,8846,8847,8848,8849,8850,8852,8853,8854,8855,8856,8859,8860,8862,8865,8867,8889,8890,8892,8910,8896,8897,8898,8899,8899,8900,8901,8902,8903,8903,8904,8905,8906,8907,8913,8914,8917,8918,8924,8921,8923,8922,8923,8929,8930,8933,8943,8946,8947,8948,8951,8952,8953,8956,8956,8957,8958,8959,8962,8963,8967,8969,8969,8969,8975,8976,8978,8978,8980,8981,8984,8985,8989,8988,8989,8993,8994,8994,8995,8999,9002,9011,9010,9014,9014,9019,9046,9047,9048,9049,9050,9051,9052,9053,9072,9061,9062,9063,9064,9065,9065,9066,9067,9070,9075,9145,9079,9080,9081,9086,9085,9086,9089,9087,9089,9090,9098,9098,9102,9103,9104,9105,9106,9107,9108,9111,9115,9114,9116,9116,9117,9118,9119,9120,9123,9124,9126,9130,9135,9135,9136,9137,9138,9139,9140,9141,9147,9148,9149,9151,9151,9152,9153,9154,9155,9156,9160,9168,9169,9171,9170,9173,9204,9175,9176,9178,9179,9182,9183,9184,9185,9185,9186,9187,9188,9191,9192,9196,9197,9200,9205,9206,9211,9213,9222,9223,9223,9224,9225,9227,9228,9229,9230,9231,9232,9239,9243,9249,9252,9258,9261,9262,9263,9264,9265,9265,9273,9273,9274,9275,9275,9276,9277,9280,9278,9279,9284,9303,9306,9307,9311,9314,9315,9317,9318,9323,9325,9336,9337,9338,9342,9342,9343,9349,9345,9346,9347,9348,9350,9350,9351,9351,9354,9354,9355,9355,9358,9359,9359,9360,9363,9364,9366,9371,9369,9370,9378,9378,9379,9379,9380,9381,9384,9387,9388,9389,9402,9404,9405,9406,9406,9409,9410,9411,9412,9416,9417,9418,9420,9421,9423,9424,9425,9429,9430,9433,9434,9435,9436,9441,9441,9442,9443,9444,9445,9446,9452,9453,9462,9463,9464,9465,9466,9473,9477,9478,9480,9494,9495,9496,9496,9497,9500,9501,9506,9515,9516,9519,9522,9531,9532,9533,9534,9540,9541,9542,9541,9545,9546,9547,9550,9553,9558,9559,9560,9561,9562,9569,9570,9572,9573,9576,9577,9580,9587,9588,9590,9590,9590,9600,9603,9604,9608,9609,9610,9610,9616,9617,9620,9621,9622,9623,9624,9625,9635,9639,9639,9640,9641,9644,9645,9646,9646,9651,9652,9653,9653,9656,9656,9657,9658,9659,9663,9673,9676,9677,9679,9682,9682,9683,9684,9685,9686,9687,9688,9691,9691,9692,9693,9694,9695,9698,9699,9708,9711,9718,9719,9732,9734,9736,9738,9741,9742,9743,9743,9747,9747,9750,9751,9753,9753,9756,9759,9762,9763,9766,9767,9771,9772,9777,9779,9778,9782,9787,9788,9789,9790,9793,9800,9803,9804,9807,9807,9808,9810,9813,9814,9815,9822,9831,9835,9841,9844,9845,9846,9847,9851,9859,9860,9861,9866,9867,9869,9876,9877,9880,9881,9884,9884,9887,9890,9891,9895,9900,9909,9909,9909,9909,9910,9911,9913,9922,9925,9923,9927,9928,9929,9934,9934,9935,9935,9938,9939,9942,9946,9951,9959,9969,9972,9973,9976,9980,9984,9989,9988,9988,9988,9993,9996,9996,9999,10002,10011,10012,10013,10014,10015,10017,10018,10019,10020,10021,10025,10029,10030,10031,10032,10040,10041,10044,10045,10046,10049,10053,10052,10056,10056,10057,10061,10062,10066,10067,10070,10082,10083,10086,10087,10090,10095,10103,10106,10107,10108,10109,10112,10113,10114,10117,10118,10123,10131,10132,10135,10136,10137,10138,10139,10146,10140,10148,10150,10156,10157,10158,10159,10164,10166,10170,10171,10172,10172,10173,10176,10177,10183,10184,10185,10188,10189,10190,10190,10194,10192,10197,10196,10202,10202,10207,10214,10217,10218,10224,10222,10221,10222,10222,10227,10229,10230,10231,10232,10235,10236,10236,10237,10238,10239,10240,10245,10246,10246,10246,10247,10252,10259,10262,10276,10279,10287,10284,10282,10284,10284,10290,10293,10294,10295,10296,10297,10298,10307,10308,10311,10311,10312,10313,10321,10327,10328,10329,10329,10330,10331,10334,10340,10341,10342,10343,10344,10345,10346,10347,10348,10349,10350,10351,10352,10361,10362,10363,10366,10367,10369,10370,10373,10374,10375,10376,10378,10381,10387,10384,10384,10391,10406,10407,10408,10410,10412,10413,10414,10415,10416,10423,10424,10425,10427,10428,10429,10433,10434,10435,10436,10440,10441,10445,10446,10451,10452,10452,10453,10454,10459,10460,10461,10466,10466,10471,10471,10471,10475,10476,10477,10478,10481,10482,10482,10483,10486,10486,10487,10488,10489,10490,10492,10493,10496,10505,10509,10513,10513,10513,10516,10535,10538,10539,10541,10542,10545,10550,10550,10553,10554,10557,10558,10559,10564,10565,10566,10569,10578,10591,10592,10593,10596,10599,10604,10605,10606,10607,10608,10608,10616,10617,10620,10625,10625,10626,10633,10642,10645,10646,10650,10651,10652,10656,10657,10658,10659,10662,10665,10666,10667,10668,10672,10675,10676,10681,10682,10685,10709,10714,10717,10718,10722,10726,10727,10728,10731,10731,10734,10735,10738,10739,10742,10743,10746,10747,10748,10751,10757,10762,10765,10766,10767,10770,10777,10783,10788,10789,10793,10794,10806,10809,10810,10815,10818,10821,10826,10829,10839,10840,10840,10841,10844,10845,10848,10853,10854,10856,10866,10866,10867,10868,10871,10874,10876,10879,10882,10886,10887,10887,10888,10889,10890,10892,10896,10904,10905,10906,10907,10908,10909,10910,10924,10925,10926,10929,10930,10933,10936,10937,10942,10946,10947,10950,10954,10960,10961,10964,10970,10975,10980,10981,10984,10989,10994,10999,11003,11024,11027,11028,11034,11035,11036,11038,11049,11051,11052,11055,11056,11057,11058,11062,11072,11073,11076,11079,11088,11091,11095,11098,11101,11106,11107,11108,11109,11110,11111,11114,11121,11126,11127,11130,11134,11135,11138,11141,11145,11145,11146,11147,11148,11149,11150,11155,11164,11165,11167,11173,11174,11177,11180,11197,11200,11202,11204,11208,11211,11212,11213,11216,11217,11220,11225,11226,11230,11235,11238,11239,11245,11246,11247,11248,11251,11254,11274,11277,11281,11286,11289,11292,11293,11298,11301,11304,11307,11308,11312,11315,11318,11319,11323,11328,11329,11334,11339,11342,11343,11345,11354,11354,11358,11359,11360,11364,11365,11372,11373,11374,11375,11378,11381,11382,11387,11389,11394,11395,11396,11403,11404,11405,11406,11407,11408,11408,11424,11425,11428,11429,11432,11433,11436,11436,11437,11440,11442,11447,11448,11454,11458,11466,11466,11467,11475,11476,11479,11480,11481,11485,11486,11487,11490,11494,11495,11496,11501,11502,11503,11504,11507,11509,11511,11515,11519,11526,11527,11534,11537,11538,11539,11541,11542,11543,11545,11546,11553,11556,11557,11558,11561,11562,11564,11564,11563,11568,11569,11570,11571,11572,11572,11573,11574,11577,11583,11584,11585,11586,11591,11592,11593,11594,11595,11596,11596,11602,11603,11607,11608,11615,11616,11618,11635,11639,11640,11650,11651,11654,11658,11661,11662,11666,11670,11675,11678,11681,11684,11687,11690,11691,11694,11697,11704,11707,11708,11709,11715,11718,11721,11724,11725,11728,11731,11738,11741,11742,11743,11746,11763,11772,11790,11790,11791,11796,11799,11800,11801,11806,11810,11813,11813,11814,11817,11829,11832,11833,11836,11837,11841,11855,11856,11859,11860,11863,11872,11873,11878,11879,11881,11882,11885,11889,11892,11896,11898,11902,11903,11904,11907,11911,11914,11918,11919,11921,11926,11929,11933,11934,11935,11940,11941,11945,11947,11951,11952,11953,11956,11960,11961,11962,11963,11964,11965,11971,11972,12000,11975,11976,11977,11980,11980,11981,11982,11983,11984,11985,11986,11987,11991,11991,11992,11993,11994,11995,11997,11999,12001,12002,12003,12004,12006,12007,12012,12013,12014,12016,12015,12023,12026,12024,12028,12030,12031,12032,12033,12035,12039,12040,12041,12042,12043,12044,12045,12046,12047,12050,12053,12053,12054,12057,12057,12058,12062,12066,12067,12068,12069,12073,12078,12079,12087,12089,12089,12094,12095,12096,12097,12098,12100,12101,12102,12105,12108,12109,12114,12115,12121,12122,12125,12126,12130,12130,12138,12141,12141,12142,12143,12146,12149,12152,12156,12157,12160,12160,12162,12163,12166,12169,12172,12177,12178,12179,12180,12182,12183,12184,12185,12187,12188,12189,12190,12191,12192,12194,12201,12202,12209,12216,12221,12222,12223,12224,12225,12226,12226,12227,12227,12228,12231,12234,12235,12236,12239,12239,12240,12247,12248,12252,12258,12259,12261,12263,12270,12271,12272,12272,12273,12274,12275,12276,12279,12280,12281,12282,12283,12285,12286,12287,12301,12303,12303,12304,12304,12305,12305,12306,12306,12307,12307,12308,12311,12312,12315,12316,12317,12318,12323,12324,12325,12326,12335,12339,12346,12347,12349,12349,12350,12351,12352,12355,12358,12361,12359,12363,12365,12366,12374,12375,12376,12382,12383,12383,12384,12387,12388,12388,12389,12393,12397,12398,12399,12400,12400,12403,12404,12407,12408,12408,12411,12441,12442,12443,12444,12445,12446,12447,12448,12456,12457,12462,12462,12462,12468,12473,12474,12475,12480,12477,12478,12479,12481,12482,12483,12484,12485,12486,12488,12489,12492,12496,12497,12498,12499,12505,12509,12511,12513,12514,12515,12516,12520,12520,12521,12522,12522,12523,12524,12525,12526,12527,12529,12530,12532,12532,12533,12534,12535,12536,12539,12541,12542,12543,12544,12547,12549,12551,12552,12553,12554,12555,12559,12562,12566,12566,12567,12571,12572,12573,12574,12575,12576,12577,12583,12585,12593,12596,12597,12605,12601,12612,12607,12615,12616,12617,12618,12619,12620,12622,12623,12632,12643,12639,12647,12656,12657,12660,12661,12662,12663,12668,12669,12676,12679,12679,12680,12681,12686,12690,12691,12693,12693,12705,12706,12707,12708,12710,12709,12710,12711,12712,12713,12714,12715,12716,12717,12718,12726,12732,12733,12734,12735,12738,12742,12745,12745,12746,12747,12753,12754,12761,12762,12763,12763,12763,12764,12767,12805,12808,12809,12810,12811,12813,12814,12816,12831,12832,12833,12834,12835,12835,12836,12837,12838,12840,12841,12845,12846,12847,12848,12849,12850,12850,12851,12853,12858,12859,12860,12864,12865,12868,12869,12875,12884,12885,12889,12890,12895,12896,12900,12903,12904,12905,12906,12910,12925,12927,12928,12930,12931,12932,12933,12934,12935,12941,12942,12943,12945,12945,12948,12950,12951,12952,12954,12960,12966,12967,12968,12969,12970,12971,12972,12973,12974,12975,12977,12999,13003,13006,13007,13009,13013,13014,13017,13018,13021,13022,13023,13026,13038,13042,13043,13046,13049,13050,13050,13061,13062,13063,13064,13065,13070,13073,13074,13077,13090,13099,13099,13100,13101,13105,13106,13107,13108,13109,13117,13120,13121,13139,13142,13145,13146,13148,13152,13153,13156,13157,13160,13161,13164,13177,13179,13185,13185,13193,13194,13197,13198,13199,13200,13201,13203,13208,13209,13210,13211,13213,13214,13215,13216,13217,13217,13221,13222,13223,13224,13225,13227,13228,13229,13230,13231,13232,13233,13234,13237,13244,13245,13246,13247,13248,13249,13250,13251,13251,13252,13252,13253,13256,13257,13258,13259,13260,13261,13262,13263,13264,13265,13268,13273,13274,13275,13276,13279,13283,13284,13285,13286,13287,13288,13290,13317,13320,13321,13322,13323,13324,13325,13328,13330,13330,13333,13335,13340,13341,13342,13343,13344,13345,13349,13349,13351,13352,13353,13354,13363,13364,13365,13366,13367,13371,13372,13373,13374,13431,13432,13433,13433,13434,13435,13437,13440,13441,13442,13442,13443,13444,13445,13446,13449,13453,13454,13455,13456,13457,13458,13462,13464,13465,13467,13469,13471,13483,13484,13486,13487,13488,13490,13491,13492,13493,13494,13501,13502,13504,13507,13508,13509,13510,13516,13543,13517,13522,13523,13527,13528,13530,13537,13541,13545,13547,13549,13553,13554,13555,13557,13558,13559,13560,13561,13562,13565,13566,13567,13572,13573,13574,13576,13577,13578,13582,13585,13587,13588,13589,13589,13592,13593,13594,13595,13605,13606,13609,13612,13613,13617,13618,13619,13621,13650,13651,13654,13654,13655,13656,13657,13658,13660,13661,13662,13662,13663,13664,13665,13666,13667,13670,13680,13681,13682,13682,13683,13684,13685,13686,13688,13689,13690,13690,13691,13692,13693,13694,13695,13698,13706,13707,13710,13710,13711,13712,13713,13714,13716,13717,13718,13718,13719,13720,13721,13722,13723,13726,13730,13731,13732,13733,13736,13739,13739,13744,13745,13746,13748,13748,13749,13749,13750,13754,13755,13755,13756,13756,13757,13761,13763,13764,13765,13766,13767,13768,13770,13771,13773,13774,13780,13780,13782,13781,13788,13789,13790,13791,13797,13799,13800,13803,13807,13808,13811,13810,13811,13810,13822,13824,13825,13826,13827,13828,13829,13830,13830,13830,13831,13832,13833,13834,13834,13835,13839,13840,13841,13842,13843,13844,13848,13848,13857,13860,13861,13862,13863,13864,13865,13871,13872,13873,13874,13875,13876,13878,13879,13879,13880,13881,13882,13883,13884,13886,13888,13906,13893,13894,13895,13896,13897,13899,13898,13901,13903,13902,13910,14066,13916,13918,13919,13920,13921,13927,13931,13932,13939,13935,13936,13936,13938,13941,13943,13944,13945,13946,13947,13950,13951,13954,13956,13957,13958,13969,13972,14012,13975,13976,13998,13979,13980,13981,13983,13984,13985,13986,13990,13991,13999,14000,14001,14008,14008,14009,14013,14015,14017,14026,14027,14028,14029,14030,14032,14034,14034,14035,14038,14039,14040,14041,14045,14046,14047,14048,14050,14049,14051,14052,14068,14068,14068,14069,14069,14070,14071,14072,14073,14077,14084,14085,14086,14087,14088,14089,14090,14091,14092,14093,14094,14095,14096,14097,14098,14099,14100,14101,14102,14103,14111,14112,14113,14114,14115,14116,14121,14122,14123,14126,14130,14134,14138,14142,14143,14147,14148,14151,14160,14163,14166,14168,14169,14170,14171,14173,14173,14174,14179,14180,14181,14182,14187,14188,14190,14191,14194,14195,14197,14198,14204,14205,14206,14206,14209,14216,14217,14218,14223,14223,14226,14228,14234,14235,14236,14240,14244,14245,14246,14247,14248,14249,14250,14250,14253,14257,14258,14261,14264,14268,14269,14273,14274,14274,14275,14275,14276,14277,14278,14279,14280,14284,14285,14285,14286,14287,14288,14289,14292,14293,14294,14295,14295,14296,14296,14297,14298,14302,14321,14322,14323,14324,14325,14326,14327,14327,14330,14333,14337,14338,14339,14342,14346,14349,14364,14367,14371,14371,14372,14373,14374,14375,14378,14378,14379,14380,14381,14384,14388,14390,14421,14392,14393,14394,14397,14397,14398,14401,14402,14403,14404,14405,14407,14410,14411,14412,14415,14415,14416,14417,14418,14424,14425,14426,14427,14434,14464,14437,14438,14441,14442,14443,14446,14446,14447,14448,14451,14451,14452,14453,14456,14457,14457,14461,14468,14469,14473,14473,14474,14475,14476,14479,14484,14485,14490,14492,14496,14497,14500,14501,14501,14505,14506,14506,14511,14526,14527,14529,14530,14531,14534,14535,14538,14539,14543,14544,14545,14547,14550,14563,14564,14565,14566,14569,14570,14571,14576,14577,14579,14582,14595,14605,14606,14606,14611,14611,14616,14616,14618,14627,14630,14629,14636,14639,14640,14641,14642,14643,14644,14646,14650,14653,14656,14657,14661,14667,14675,14679,14680,14681,14683,14684,14685,14690,14691,14692,14695,14696,14697,14698,14699,14700,14707,14717,14721,14721,14725,14724,14726,14729,14730,14735,14736,14739,14744,14745,14748,14752,14753,14754,14759,14765,14776,14779,14780,14783,14786,14786,14787,14787,14788,14788,14789,14789,14792,14792,14793,14795,14796,14800,14800,14803,14806,14807,14808,14808,14811,14815,14814,14817,14821,14825,14825,14828,14831,14832,14833,14833,14836,14840,14839,14842,14846,14850,14857,14860,14861,14865,14868,14871,14872,14886,14887,14888,14889,14889,14890,14892,14891,14893,14893,14894,14895,14896,14899,14901,14906,14910,14913,14914,14914,14915,14916,14916,14917,14918,14918,14919,14920,14921,14922,14925,14926,14931,14934,14934,14935,14936,14937,14938,14939,14940,14941,14941,14942,14943,14946,14949,14950,14951,14954,14961,14967,14968,14972,14977,14983,14991,14985,14986,14987,14988,14989,14990,14992,14993,14994,14996,14997,14998,15001,15007,15012,15013,15013,15017,15018,15019,15029,15030,15030,15031,15042,15043,15044,15049,15050,15056,15058,15058,15061,15069,15070,15071,15071,15072,15072,15075,15076,15081,15084,15093,15095,15096,15097,15098,15098,15100,15105,15106,15111,15114,15122,15127,15128,15129,15130,15130,15131,15136,15137,15138,15139,15147,15157,15156,15160,15169,15170,15171,15172,15173,15177,15178,15179,15180,15181,15182,15183,15184,15186,15187,15188,15190,15190,15191,15192,15193,15194,15197,15200,15201,15203,15205,15205,15206,15210,15211,15212,15213,15214,15214,15215,15216,15220,15221,15225,15230,15231,15232,15233,15234,15235,15238,15239,15240,15241,15243,15249,15250,15251,15252,15253,15256,15257,15260,15261,15264,15265,15266,15269,15270,15273,15274,15275,15276,15277,15280,15281,15282,15288,15290,15289,15291,15292,15293,15296,15298,15299,15300,15304,15305,15306,15307,15308,15312,15315,15321,15324,15328,15328,15334,15337,15342,15343,15344,15344,15346,15345,15345,15347,15348,15349,15350,15354,15362,15359,15361,15366,15368,15369,15370,15372,15373,15373,15377,15382,15382,15383,15384,15385,15388,15392,15393,15395,15396,15399,15400,15404,15405,15412,15417,15425,15426,15429,15428,15429,15431,15432,15433,15434,15437,15438,15444,15442,15452,15455,15453,15460,15458,15465,15469,15473,15477,15480,15480,15480,15483,15484,15485,15486,15492,15498,15503,15507,15510,15513,15566,15520,15521,15522,15526,15530,15531,15533,15534,15535,15536,15539,15540,15541,15547,15548,15549,15553,15555,15558,15559,15560,15561,15562,15563,15564,15575,15568,15569,15570,15571,15572,15573,15574,15592,15577,15578,15582,15583,15584,15585,15586,15590,15593,15594,15594,15595,15596,15598,15602,15603,15603,15604,15605,15606,15607,15610,15611,15615,15616,15617,15618,15619,15620,15621,15624,15625,15626,15627,15633,15634,15635,15636,15637,15641,15642,15645,15651,15655,15656,15659,15661,15662,15663,15671,15678,15679,15680,15681,15688,15689,15694,15700,15703,15705,15709,15710,15716,15712,15713,15714,15715,15719,15719,15720,15720,15723,15726,15727,15729,15730,15734,15737,15740,15742,15745,15746,15747,15747,15751,15754,15760,15761,15762,15763,15764,15765,15767,15767,15770,15772,15772,15772,15773,15773,15777,15782,15783,15786,15787,15788,15790,15790,15794,15795,15795,15799,15800,15800,15804,15804,15810,15809,15814,15814,15816,15822,15823,15824,15824,15828,15835,15836,15836,15837,15841,15842,15843,15846,15847,15850,15850,15854,15855,15856,15863,15866,15867,15867,15870,15870,15875,15876,15877,15878,15879,15881,15882,15885,15886,15886,15898,15898,15908,15909,15910,15911,15912,15913,15915,15915,15924,15925,15925,15935,15939,15940,15940,15945,15950,15954,15955,15956,15957,15958,15958,15959,15963,15964,15965,15965,15967,15971,15972,15973,15973,15974,15975,15979,15984,15984,15985,15990,15991,15997,15998,15998,16000,16002,16005,16009,16010,16014,16018,16019,16022,16022,16023,16027,16030,16030,16031,16034,16037,16038,16039,16048,16049,16050,16051,16053,16054,16057,16061,16062,16063,16066,16069,16076,16078,16082,16083,16086,16088,16089,16089,16090,16093,16096,16099,16106,16108,16112,16113,16118,16119,16120,16121,16122,16128,16129,16130,16131,16132,16136,16137,16138,16139,16140,16146,16147,16156,16158,16159,16159,16159,16160,16161,16162,16163,16167,16168,16171,16171,16181,16182,16183,16185,16186,16194,16195,16197,16208,16215,16233,16221,16222,16223,16224,16225,16226,16227,16228,16229,16231,16235,16237,16238,16238,16239,16240,16242,16243,16244,16245,16246,16247,16251,16248,16249,16250,16256,16257,16265,16268,16269,16270,16272,16273,16274,16275,16278,16281,16282,16285,16286,16287,16288,16289,16296,16298,16300,16307,16307,16308,16310,16315,16322,16323,16329,16329,16330,16332,16333,16334,16337,16338,16340,16341,16342,16343,16344,16346,16347,16348,16349,16350,16351,16353,16356,16357,16358,16360,16362,16363,16365,16366,16367,16368,16369,16370,16371,16372,16376,16377,16378,16379,16380,16381,16385,16387,16393,16395,16396,16401,16402,16404,16408,16409,16413,16417,16419,16429,16433,16434,16435,16438,16439,16445,16445,16446,16448,16450,16452,16453,16454,16455,16457,16458,16459,16460,16461,16463,16468,16469,16470,16471,16472,16473,16474,16476,16477,16478,16479,16482,16487,16488,16489,16490,16491,16492,16495,16496,16497,16498,16499,16500,16503,16504,16505,16506,16507,16508,16509,16512,16513,16514,16515,16516,16520,16521,16522,16523,16524,16525,16526,16527,16528,16529,16533,16534,16534,16537,16539,16540,16544,16545,16551,16551,16552,16553,16558,16559,16560,16561,16567,16567,16568,16569,16573,16575,16579,16580,16581,16582,16583,16585,16588,16591,16595,16597,16600,16601,16604,16605,16606,16608,16612,16616,16617,16622,16623,16624,16625,16631,16632,16635,16637,16638,16640,16641,16644,16647,16653,16654,16654,16655,16656,16660,16659,16659,16662,16668,16666,16667,16669,16672,16674,16674,16675,16682,16683,16687,16687,16688,16691,16693,16692,16699,16698,16704,16709,16712,16716,16717,16718,16719,16721,16722,16725,16727,16731,16732,16736,16737,16738,16738,16739,16739,16740,16741,16742,16743,16744,16745,16745,16748,16749,16750,16751,16752,16753,16754,16756,16756,16760,16762,16766,16769,16772,16773,16776,16777,16779,16778,16783,16783,16786,16789,16792,16798,16798,16799,16802,16810,16810,16811,16814,16815,16816,16822,16823,16828,16829,16830,16831,16832,16833,16834,16835,16836,16837,16844,16844,16845,16846,16852,16853,16855,16857,16858,16859,16860,16868,16868,16869,16870,16875,16880,16883,16884,16887,16888,16889,16890,16893,16897,16900,16901,16904,16907,16908,16914,16918,16919,16920,16921,16922,16923,16924,16925,16926,16927,16928,16931,16932,16938,16940,16944,16948,16949,16950,16951,16955,16956,16957,16958,16961,16964,16968,16967,16972,16973,16974,16976,16977,16978,16980,16982,16986,16987,16988,16989,16992,16996,16997,16997,16998,17000,17007,17004,17006,17011,17015,17016,17016,17017,17019,17023,17024,17029,17033,17034,17035,17036,17037,17040,17044,17043,17047,17048,17049,17050,17052,17053,17054,17056,17058,17063,17065,17070,17071,17074,17077,17079,17083,17084,17085,17091,17089,17090,17091,17095,17099,17099,17101,17103,17104,17105,17111,17112,17113,17116,17117,17118,17123,17124,17127,17130,17131,17134,17136,17137,17139,17140,17141,17144,17145,17148,17149,17150,17151,17153,17154,17155,17156,17157,17159,17162,17163,17168,17169,17170,17171,17172,17173,17174,17177,17178,17179,17180,17182,17183,17184,17187,17190,17192,17193,17194,17195,17201,17202,17203,17205,17206,17209,17212,17213,17215,17216,17218,17221,17227,17229,17229,17230,17231,17232,17233,17233,17237,17237,17241,17241,17242,17245,17247,17248,17249,17251,17253,17254,17256,17260,17261,17262,17262,17265,17268,17272,17273,17274,17275,17276,17277,17277,17278,17279,17280,17282,17283,17283,17284,17285,17286,17289,17292,17295,17296,17297,17298,17301,17302,17303,17304,17306,17307,17309,17310,17311,17314,17321,17322,17324,17325,17329,17331,17332,17333,17336,17337,17342,17343,17349,17350,17351,17353,17354,17356,17357,17357,17358,17361,17362,17364,17365,17368,17372,17373,17375,17377,17378,17379,17380,17381,17382,17383,17387,17399,17400,17401,17403,17402,17405,17406,17406,17411,17412,17415,17418,17423,17424,17426,17431,17427,17435,17436,17437,17438,17440,17441,17445,17446,17447,17448,17449,17450,17452,17453,17456,17460,17464,17468,17469,17472,17475,17478,17479,17480,17483,17489,17493,17494,17499,17500,17501,17505,17506,17507,17508,17509,17512,17513,17514,17517,17518,17519,17523,17533,17534,17535,17538,17539,17541,17544,17547,17546,17546,17550,17548,17548,17552,17551,17551,17553,17554,17556,17572,17575,17573,17578,17581,17579,17584,17588,17589,17590,17592,17593,17593,17594,17597,17598,17599,17603,17604,17607,17613,17614,17615,17619,17621,17622,17623,17624,17625,17629,17630,17632,17637,17642,17646,17647,17649,17650,17651,17652,17655,17657,17658,17662,17665,17668,17670,17672,17673,17676,17677,17678,17682,17683,17684,17685,17688,17691,17692,17693,17695,17694,17696,17698,17699,17707,17703,17704,17705,17708,17709,17710,17711,17712,17713,17714,17715,17718,17721,17722,17723,17728,17729,17731,17732,17735,17739,17740,17741,17745,17746,17750,17751,17755,17759,17758,17761,17762,17763,17764,17767,17768,17769,17770,17771,17773,17774,17775,17777,17778,17781,17785,17786,17791,17794,17795,17796,17804,17807,17808,17811,17815,17816,17817,17818,17819,17820,17822,17832,17835,17837,17838,17840,17843,17844,17847,17850,17858,17894,17932,17933,17937,17942,17947,17952,17958,17964,17965,17966,17971,17973,17977,17978,17979,17980,17981,17981,17983,17984,17985,17986,17987,17988,17989,17990,17991,17992,17993,17994,17995,17996,17997,17998,17999,18000,18001,18002,18003,18007,18009,18010,18011,18014,18015,18016,18017,18018,18019,18020,18021,18022,18023,18024,18028,18032,18036,18038,18039,18044,18046,18047,18048,18049,18052,18077,18056,18057,18058,18059,18062,18063,18064,18065,18066,18067,18068,18071,18073,18074,18075,18079,18081],"condition":[[497,{"left":"$token2regex{$token}","right":"qr/\\G$token/","type":"or_3","op":"||="}],[504,{"op":"||","right":"syntax_err(\"Expected '${token}'\")","type":"or_2","left":"check($token)"}],[528,{"op":"or","type":"or_3","right":"$2 > 255","left":"$1 > 255"}],[528,{"op":"or","left":"$1 > 255 or $2 > 255","right":"$3 > 255","type":"or_3"}],[528,{"type":"or_3","right":"$4 > 255","left":"$1 > 255 or $2 > 255 or $3 > 255","op":"or"}],[639,{"left":"$user_ref_error","type":"or_3","right":"$has_user_ref != $$user_object{'refcount'} > $count","op":"||="}],[665,{"right":"$type eq 'interface'","type":"or_3","left":"$type eq 'network'","op":"or"}],[679,{"type":"or_3","right":"syntax_err('Typed name expected')","left":"check_typed_name()","op":"||"}],[722,{"left":"$interface","type":"or_3","right":"$type eq 'host'","op":"||"}],[722,{"left":"$interface || $type eq 'host'","right":"check('managed')","type":"and_3","op":"and"}],[722,{"left":"$type eq 'any'","right":"check('ip')","type":"and_3","op":"and"}],[721,{"type":"and_3","right":"$input =~ / \\G ( [\\w-]+ (?: \\@ [\\w-]+ ) ) /cgx","left":"$interface","op":"and"}],[721,{"left":"$interface and $input =~ / \\G ( [\\w-]+ (?: \\@ [\\w-]+ ) ) /cgx","right":"$input =~ / \\G ( [\\w-]+ ) /cgx","type":"or_3","op":"or"}],[1049,{"op":"||","right":"{}","type":"or_2","left":"$$info{'extension'}"}],[1180,{"op":"xor","right":"$$host{'range'}","type":"xor_4","left":"$$host{'ip'}"}],[1200,{"op":"||=","left":"$$host{'ip'}","right":"'short'","type":"or_2"}],[1204,{"left":"$$host{'radius_attributes'}","type":"or_2","right":"{}","op":"||="}],[1353,{"op":"and","right":"$$network{'nat'}{$nat_tag}","type":"and_3","left":"$$network{'nat'}"}],[1429,{"op":"and","left":"match_ip($ip1, $ip, $mask)","type":"and_3","right":"match_ip($ip2, $ip, $mask)"}],[1445,{"op":"and","right":"$$network{'crosslink'}","type":"and_3","left":"@{$$network{'hosts'};}"}],[1470,{"right":"{}","type":"or_2","left":"$$network{'radius_attributes'}","op":"||="}],[1641,{"op":"and","left":"$$virtual{'redundancy_id'}","right":"not $$virtual{'redundancy_type'}","type":"and_3"}],[1680,{"type":"or_2","right":"'bridged'","left":"$$interface{'ip'}","op":"||="}],[1706,{"op":"||=","type":"or_2","right":"'short'","left":"$$interface{'ip'}"}],[1720,{"right":"not $$interface{'vip'}","type":"and_3","left":"$$interface{'owner'}","op":"and"}],[1808,{"op":"and","left":"@levels >= 2","right":"not equal(@levels)","type":"and_3"}],[1803,{"left":"($level) = $hwname =~ /(\\d+)$/","right":"$level <= 100","type":"and_3","op":"and"}],[2015,{"op":"&&","left":"$model","right":"$$model{'has_vip'}","type":"and_3"}],[2015,{"left":"$$interface{'vip'}","right":"not $model && $$model{'has_vip'}","type":"and_3","op":"and"}],[2053,{"right":"not $$model{'can_vrf'}","type":"and_3","left":"$$router{'vrf'}","op":"and"}],[2089,{"op":"||","left":"$$interface{'bind_nat'}","right":"$bind_nat0","type":"or_3"}],[2089,{"right":"$bind_nat0","type":"or_3","left":"$$hardware{'bind_nat'}","op":"||"}],[2105,{"op":"and","left":"$hw_name eq 'VIP'","type":"and_3","right":"$$model{'has_vip'}"}],[2105,{"op":"and","left":"$hw_name eq 'VIP' and $$model{'has_vip'}","type":"and_3","right":"not $$interface{'vip'}"}],[2139,{"right":"$all_routing","type":"or_3","left":"$$interface{'routing'}","op":"||="}],[2141,{"op":"and","left":"my $routing = $$interface{'routing'}","type":"and_3","right":"$$interface{'ip'} eq 'unnumbered'"}],[2163,{"type":"and_3","right":"not $$model{'can_log_deny'}","left":"$$router{'log_deny'}","op":"and"}],[2195,{"op":"and","right":"not $$model{'need_protect'}","type":"and_3","left":"$$router{'no_protect_self'}"}],[2206,{"op":"and","right":"not $$model{'has_interface_level'}","type":"and_3","left":"defined $$interface{'security_level'}"}],[2212,{"type":"or_3","right":"$$interface{'spoke'}","left":"$$interface{'hub'}","op":"or"}],[2218,{"right":"$$model{'do_auth'}","type":"and_3","left":"$$interface{'hub'}","op":"&&"}],[2218,{"op":"and","left":"$$interface{'no_check'}","type":"and_3","right":"not $$interface{'hub'} && $$model{'do_auth'}"}],[2329,{"right":"{}","type":"or_2","left":"$$router{'radius_attributes'}","op":"||="}],[2455,{"op":"||","left":"$$interface{'spoke'}","right":"$$interface{'hub'}","type":"or_3"}],[2455,{"op":"and","type":"and_3","right":"not $$interface{'no_check'}","left":"$$interface{'spoke'} || $$interface{'hub'}"}],[2495,{"op":"||=","left":"$$orig_router{'orig_interfaces'}","right":"[@$interfaces]","type":"or_2"}],[2634,{"op":"or","type":"or_3","right":"ref $$pair[1]","left":"$$pair[0] ne 'network'"}],[2657,{"op":"||","type":"or_3","right":"$$area{'inclusive_border'}","left":"$$area{'border'}"}],[2657,{"op":"and","left":"$$area{'border'} || $$area{'inclusive_border'}","right":"$$area{'anchor'}","type":"and_3"}],[2662,{"left":"$$area{'anchor'}","right":"$$area{'border'}","type":"or_3","op":"or"}],[2662,{"op":"or","right":"$$area{'inclusive_border'}","type":"or_3","left":"$$area{'anchor'} or $$area{'border'}"}],[2700,{"op":"and","type":"and_3","right":"$port2 == 65535","left":"$port1 == 1"}],[2751,{"left":"$type == 0","type":"or_3","right":"$type == 3","op":"or"}],[2751,{"op":"or","right":"$type == 11","type":"or_3","left":"$type == 0 or $type == 3"}],[2796,{"op":"or","right":"$proto eq 'udp'","type":"or_3","left":"$proto eq 'tcp'"}],[2801,{"op":"and","left":"$v1 == 1","right":"$v2 == 65535","type":"and_3"}],[2812,{"left":"$src_range","right":"&$port_name(@$src_range)","type":"and_3","op":"&&"}],[2906,{"op":"||","type":"or_3","right":"read_simple_protocol()","left":"check_typed_name()"}],[2985,{"op":"or","left":"$src_user","right":"$dst_user","type":"or_3"}],[2987,{"op":"&&","left":"$src_user","type":"and_3","right":"$dst_user"}],[2987,{"op":"and","left":"$$service{'foreach'}","right":"not $src_user && $dst_user","type":"and_3"}],[3215,{"op":"and","right":"$$owner{'watchers'}","type":"and_3","left":"$$owner{'extend_only'}"}],[3292,{"op":"||=","left":"$read_syntax","right":"\\&read_netspoc","type":"or_2"}],[3295,{"right":"-d $path","type":"and_3","left":"defined $path","op":"and"}],[3389,{"left":"$$rule{'rule'}","right":"$$rule{'rule'}{'service'}","type":"and_3","op":"&&"}],[3415,{"op":"||","left":"$$map{$prt}","type":"or_3","right":"$prt"}],[3432,{"op":"or","type":"or_3","right":"$proto eq 'udp'","left":"$proto eq 'tcp'"}],[3504,{"left":"$$hash{$$prt{'type'}}","type":"or_3","right":"$up","op":"||"}],[3673,{"left":"$a1 == 1","type":"and_3","right":"$a2 == 65535","op":"and"}],[3788,{"left":"$key","type":"or_2","right":"'owner'","op":"||="}],[3873,{"op":"||","left":"$$owner{'alias'}","type":"or_3","right":"$name"}],[4015,{"op":"and","left":"$range","type":"and_3","right":"$range ne $aref_tcp_any"}],[4015,{"left":"$src_range","type":"or_3","right":"$range and $range ne $aref_tcp_any","op":"or"}],[4365,{"left":"$$interface{'spoke'}","right":"$$interface{'hub'}","type":"or_3","op":"or"}],[4406,{"type":"or_2","right":"''","left":"$$virtual1{'redundancy_type'}","op":"||"}],[4407,{"op":"||","right":"''","type":"or_2","left":"$$virtual1{'redundancy_id'}"}],[4410,{"op":"||","type":"or_2","right":"''","left":"$$virtual2{'redundancy_type'}"}],[4416,{"op":"||","left":"$$virtual2{'redundancy_id'}","type":"or_2","right":"''"}],[4499,{"left":"$$router{'managed'}","right":"$$router{'routing_only'}","type":"or_3","op":"or"}],[4525,{"left":"$$network{'ip'} eq 'unnumbered'","type":"and_3","right":"$$network{'interfaces'}","op":"and"}],[4525,{"left":"$$network{'ip'} eq 'unnumbered' and $$network{'interfaces'}","right":"@{$$network{'interfaces'};} > 2","type":"and_3","op":"and"}],[4555,{"type":"or_3","right":"$$router{'routing_only'}","left":"$$router{'managed'}","op":"||"}],[4555,{"right":"not $$interface{'routing'}","type":"and_3","left":"$$router{'managed'} || $$router{'routing_only'}","op":"and"}],[4561,{"left":"$$old_intf{'redundant'}","right":"$$interface{'redundant'}","type":"and_3","op":"and"}],[4573,{"right":"$route_intf","type":"and_3","left":"$short_intf","op":"and"}],[4658,{"op":"or","right":"$$network{'disabled'}","type":"or_3","left":"not $network"}],[4730,{"op":"and","right":"$mask == $mask1","type":"and_3","left":"$ip == $ip1"}],[4789,{"op":"or","left":"$$router{'managed'}","type":"or_3","right":"$$router{'routing_only'}"}],[4838,{"op":"||","right":"$$_{'routing_only'}","type":"or_3","left":"$$_{'managed'}"}],[4920,{"type":"and_3","right":"$low + $mask <= $high","left":"($low & $mask) == 0","op":"and"}],[4934,{"type":"or_3","right":"$owner1 && $owner1 ne $owner2","left":"($owner1 xor $owner2)","op":"||"}],[4942,{"left":"$nat","right":"$nat2","type":"xor_4","op":"xor"}],[4942,{"op":"and","right":"$nat2","type":"and_3","left":"$nat"}],[4952,{"left":"$$nat2{$name}","type":"and_3","right":"$$nat{$name} eq $$nat2{$name}","op":"and"}],[5069,{"type":"or_3","right":"$network","left":"$$subnet{'up'}","op":"||="}],[5082,{"type":"or_3","right":"$$subnet{'id'}","left":"$$subnet{'nat'}","op":"||"}],[5082,{"right":"$ip % $modulo == 0","type":"and_3","left":"not $$subnet{'nat'} || $$subnet{'id'}","op":"and"}],[5106,{"op":"and","left":"$up_inv_prefix < @inv_prefix_aref","type":"and_3","right":"$up = $inv_prefix_aref[$up_inv_prefix]{$ip}"}],[5149,{"op":"or","left":"$$router{'managed'}","right":"$$router{'routing_only'}","type":"or_3"}],[5164,{"right":"$hash{$neighbor}","type":"and_3","left":"$neighbor = $$subnet{'neighbor'}","op":"and"}],[5227,{"op":"||=","right":"0","type":"or_2","left":"$managed"}],[5277,{"op":"||","type":"or_3","right":"$$info{'n'}{$router}{$network}","left":"$$info{'r'}{$router}"}],[5296,{"op":"and","type":"and_3","right":"$other = $$info{'i'}{$router}","left":"not $other"}],[5446,{"op":"||","left":"$$router{'managed'}","right":"$$router{'routing_only'}","type":"or_3"}],[5446,{"op":"and","right":"not $$router{'managed'} || $$router{'routing_only'}","type":"and_3","left":"$managed"}],[5505,{"type":"or_3","right":"$$obj{'routing_only'}","left":"$$obj{'managed'}","op":"||"}],[5505,{"left":"$managed","type":"and_3","right":"not $$obj{'managed'} || $$obj{'routing_only'}","op":"and"}],[5576,{"op":"and","left":"$type eq 'Network'","type":"and_3","right":"$$object{'is_aggregate'}"}],[5593,{"op":"or","type":"or_3","right":"$type eq 'Interface'","left":"$type eq 'Host'"}],[5775,{"op":"||","left":"$$object{'private'}","right":"'public'","type":"or_2"}],[5743,{"type":"and_3","right":"$$object{'zone'}{'zone_cluster'}","left":"$$object{'is_aggregate'}","op":"and"}],[6007,{"type":"or_3","right":"$proto eq 'udp'","left":"$proto eq 'tcp'","op":"or"}],[6021,{"op":"or","left":"$src_range","right":"$$prt{'flags'}","type":"or_3"}],[6021,{"left":"$src_range or $$prt{'flags'}","type":"or_3","right":"$$dst_range{'name'} ne $$prt{'name'}","op":"or"}],[6077,{"op":"||=","left":"$key2log{$key}","type":"or_2","right":"\\@tags"}],[6113,{"type":"or_3","right":"get_path($dst)","left":"$obj2path{$dst}","op":"||"}],[6216,{"left":"$$flags{'src_net'}","right":"''","type":"or_2","op":"||"}],[6217,{"left":"$$flags{'dst_net'}","type":"or_2","right":"''","op":"||"}],[6218,{"op":"||","type":"or_3","right":"$dst_net","left":"$src_net"}],[6219,{"op":"and","left":"keys %$flags","right":"grep {$_ ne 'dst_net' if $_ ne 'src_net';} keys %$flags","type":"and_3"}],[6219,{"op":"or","type":"or_3","right":"$src_range","left":"keys %$flags and grep {$_ ne 'dst_net' if $_ ne 'src_net';} keys %$flags"}],[6244,{"type":"and_3","right":"$src_p eq $private","left":"$src_p","op":"and"}],[6244,{"op":"and","left":"$dst_p","type":"and_3","right":"$dst_p eq $private"}],[6244,{"op":"or","type":"or_3","right":"$dst_p and $dst_p eq $private","left":"$src_p and $src_p eq $private"}],[6310,{"op":"or","left":"@$src_list","right":"@extra_src_dst","type":"or_3"}],[6314,{"left":"@$src_list","right":"@$dst_list","type":"and_3","op":"and"}],[6474,{"type":"and_3","right":"equal(map({$$_{'owner'};} @implicit_owner_zones))","left":"@implicit_owner_zones == @$cluster","op":"and"}],[6537,{"type":"or_3","right":"$$router{'routing_only'}","left":"$$router{'managed'}","op":"or"}],[6604,{"type":"and_3","right":"$$owner{'extend_only'}","left":"$owner","op":"and"}],[6610,{"type":"and_3","right":"$$owner{'extend_only'}","left":"$owner","op":"and"}],[6632,{"op":"||","type":"or_2","right":"[]","left":"$extended{$owner}"}],[6664,{"op":"and","right":"@$combined","type":"and_3","left":"$combined"}],[6670,{"op":"||","left":"$$node{'owner'}","right":"''","type":"or_2"}],[6715,{"op":"||=","left":"$$interface{'owner'}","right":"$owner","type":"or_3"}],[6722,{"type":"or_3","right":"$$router{'routing_only'}","left":"$$router{'managed'}","op":"||"}],[6765,{"type":"and_3","right":"$unknown2services{$obj} eq $unknown2services{$up}","left":"$unknown2services{$up}","op":"and"}],[6788,{"op":"||=","left":"$sname2info{$name}","type":"or_2","right":"{}"}],[6793,{"op":"||=","right":"{}","type":"or_2","left":"$$info{'objects'}"}],[6840,{"op":"and","right":"$$service_owners{$sub_owner}","type":"and_3","left":"keys %$service_owners == 1"}],[6848,{"left":"$multi_count > 1","type":"xor_4","right":"$$service{'multi_owner'}","op":"xor"}],[6867,{"left":"$unknown_owners","right":"keys %$unknown_owners","type":"and_3","op":"and"}],[6867,{"op":"xor","right":"$$service{'unknown_owner'}","type":"xor_4","left":"$unknown_owners and keys %$unknown_owners"}],[6917,{"left":"$$obj{'router'}{'managed'}","type":"or_3","right":"$$obj{'loopback'}","op":"or"}],[6968,{"op":"or","type":"or_3","right":"$subnet_warning_seen{$subnet}++","left":"$$network{'has_id_hosts'}"}],[7031,{"left":"is_subnet($src)","right":"is_subnet($dst)","type":"and_3","op":"and"}],[7031,{"op":"and","right":"$$dst{'is_aggregate'}","type":"and_3","left":"$$src{'is_aggregate'}"}],[7031,{"op":"and","right":"$$src{'ip'} == $$dst{'ip'}","type":"and_3","left":"$$src{'is_aggregate'} and $$dst{'is_aggregate'}"}],[7031,{"left":"$$src{'is_aggregate'} and $$dst{'is_aggregate'} and $$src{'ip'} == $$dst{'ip'}","right":"$$src{'mask'} == $$dst{'mask'}","type":"and_3","op":"and"}],[7031,{"left":"$$src{'is_aggregate'}","type":"and_3","right":"$$src{'mask'} == 0","op":"and"}],[7031,{"op":"and","right":"$$dst{'mask'} == 0","type":"and_3","left":"$$dst{'is_aggregate'}"}],[7071,{"left":"$$service{'seen_unenforceable'}{$src}{$dst}","type":"or_2","right":"[$src, $dst]","op":"||="}],[7082,{"op":"&&","left":"$$service{'seen_unenforceable'}","type":"and_3","right":"$$service{'seen_enforceable'}"}],[7082,{"op":"and","left":"$$service{'has_unenforceable'}","type":"and_3","right":"not $$service{'seen_unenforceable'} && $$service{'seen_enforceable'}"}],[7099,{"op":"or","type":"or_3","right":"$$service{'silent_unenforceable'}","left":"$$service{'seen_unenforceable'}"}],[7138,{"op":"||","left":"$obj2zone{$src_path}","type":"or_3","right":"get_zone($src_path)"}],[7139,{"left":"$obj2zone{$dst_path}","right":"get_zone($dst_path)","type":"or_3","op":"||"}],[7167,{"op":"||","left":"$obj2path{$element0}","right":"get_path($element0)","type":"or_3"}],[7170,{"right":"get_path($_)","type":"or_3","left":"$obj2path{$_}","op":"||"}],[7177,{"op":"||=","right":"$index++","type":"or_3","left":"$path2index{$path}"}],[7241,{"left":"$stateless","type":"or_2","right":"''","op":"||="}],[7242,{"op":"||=","type":"or_2","right":"''","left":"$deny"}],[7243,{"type":"or_3","right":"$prt_ip","left":"$src_range","op":"||="}],[7335,{"type":"and_3","right":"$$prt2{'flags'}{'overlaps'}","left":"$$prt1{'flags'}{'overlaps'}","op":"and"}],[7386,{"op":"and","left":"$$prt1{'flags'}{'overlaps'}","right":"$$prt2{'flags'}{'overlaps'}","type":"and_3"}],[7492,{"op":"||=","type":"or_3","right":"$index++","left":"$path2index{$path}"}],[7532,{"op":"and","type":"and_3","right":"23 <= $p2","left":"$p1 <= 23"}],[7532,{"type":"and_3","right":"22 <= $p2","left":"$p1 <= 22","op":"and"}],[7559,{"type":"or_3","right":"$dst_path","left":"$$dst_path{'router'}","op":"||"}],[7606,{"op":"||","left":"$$b{'loopback'}","type":"or_2","right":"''"}],[7606,{"left":"$$a{'loopback'}","type":"or_2","right":"''","op":"||"}],[7680,{"left":"$$interface{'bind_nat'}","right":"$bind_nat0","type":"or_3","op":"||"}],[7689,{"op":"||","left":"join(',', @$nat_tags)","right":"'(none)'","type":"or_2"}],[7690,{"op":"||","left":"join(',', @$entry_nat_tags)","right":"'(none)'","type":"or_2"}],[7713,{"left":"$$out_interface{'bind_nat'}","type":"or_3","right":"$bind_nat0","op":"||"}],[7729,{"left":"$useless_nat","type":"and_3","right":"@$nat_tags","op":"and"}],[7729,{"op":"||","type":"or_3","right":"$$_{'spoke'}","left":"$$_{'hub'}"}],[7729,{"right":"grep {not $$_{'hub'} || $$_{'spoke'};} @$interfaces","type":"and_3","left":"$useless_nat and @$nat_tags","op":"and"}],[8137,{"op":"and","type":"and_3","right":"$$nat_network{'dynamic'}","left":"$nat_network = $$network{'nat'}{$nat_tag}"}],[8173,{"left":"$intf_nat","type":"and_3","right":"$$intf_nat{$nat_tag}","op":"and"}],[8236,{"left":"$partition2tags{$mark}","type":"or_2","right":"{}","op":"||="}],[8255,{"right":"$$router{'semi_managed'}","type":"or_3","left":"$$router{'managed'}","op":"or"}],[8259,{"op":"or","left":"$$router{'managed'}","right":"$$router{'routing_only'}","type":"or_3"}],[8301,{"op":"and","right":"$no_nat_set","type":"and_3","left":"my $href = $$network{'nat'}"}],[8319,{"op":"or","left":"$$network{'is_aggregate'}","right":"$$subnet{'is_aggregate'}","type":"or_3"}],[8323,{"right":"$ip1 <= $sub_ip && $sub_ip <= $ip2","type":"or_3","left":"match_ip($ip2, $sub_ip, $sub_mask)","op":"||"}],[8323,{"op":"and","type":"and_3","right":"match_ip($ip2, $sub_ip, $sub_mask) || $ip1 <= $sub_ip && $sub_ip <= $ip2","left":"$ip2"}],[8323,{"op":"or","type":"or_3","right":"$ip2 and match_ip($ip2, $sub_ip, $sub_mask) || $ip1 <= $sub_ip && $sub_ip <= $ip2","left":"match_ip($ip1, $sub_ip, $sub_mask)"}],[8331,{"left":"my $nat_tags = $$object{'bind_nat'}","right":"my($nat_tag2) = $$subnet{'name'} =~ /^nat:(.*)\\(/","type":"and_3","op":"and"}],[8334,{"op":"and","right":"$$object{'ip'} == $$subnet{'ip'}","type":"and_3","left":"grep {$_ eq $nat_tag2;} @$nat_tags"}],[8334,{"right":"$$subnet{'mask'} == 4294967295","type":"and_3","left":"grep {$_ eq $nat_tag2;} @$nat_tags and $$object{'ip'} == $$subnet{'ip'}","op":"and"}],[8591,{"op":"||","type":"or_2","right":"{}","left":"$$network{'nat'}"}],[8686,{"right":"$$network{'is_aggregate'}","type":"or_3","left":"$$old_net{'is_aggregate'}","op":"or"}],[8686,{"op":"and","left":"$$nat_old_net{'dynamic'}","right":"$$nat_network{'dynamic'}","type":"and_3"}],[8686,{"op":"and","right":"$$nat_network{'dynamic'}","type":"and_3","left":"$$old_net{'loopback'}"}],[8686,{"left":"$$nat_old_net{'dynamic'}","right":"$$network{'loopback'}","type":"and_3","op":"and"}],[8686,{"op":"||","left":"$$network{'bridged'}","right":"0","type":"or_2"}],[8686,{"op":"||","right":"1","type":"or_2","left":"$$old_net{'bridged'}"}],[8727,{"left":"$identical{$old_net}","right":"[$old_net]","type":"or_2","op":"||="}],[8802,{"type":"or_3","right":"$$subnet{'is_aggregate'}","left":"$$bignet{'is_aggregate'}","op":"or"}],[8802,{"left":"$$bignet{'is_aggregate'} or $$subnet{'is_aggregate'}","right":"$$bignet{'has_subnets'}","type":"or_3","op":"or"}],[8802,{"op":"and","right":"$$nat_subnet{'subnet_of'} eq $bignet","type":"and_3","left":"$$nat_subnet{'subnet_of'}"}],[8802,{"right":"$$nat_subnet{'subnet_of'} and $$nat_subnet{'subnet_of'} eq $bignet","type":"or_3","left":"$$bignet{'is_aggregate'} or $$subnet{'is_aggregate'} or $$bignet{'has_subnets'}","op":"or"}],[8802,{"right":"$$nat_subnet{'is_layer3'}","type":"or_3","left":"$$bignet{'is_aggregate'} or $$subnet{'is_aggregate'} or $$bignet{'has_subnets'} or $$nat_subnet{'subnet_of'} and $$nat_subnet{'subnet_of'} eq $bignet","op":"or"}],[8814,{"type":"or_3","right":"$bignet","left":"$$nat_subnet{'subnet_of'}","op":"||="}],[8999,{"type":"and_3","right":"$strength2intf{$crosslink_strength{'secondary'}}","left":"$weakest == $crosslink_strength{'local'}","op":"and"}],[9011,{"op":"or","left":"not $out_acl_count","type":"or_3","right":"$out_acl_count == @{$$network{'interfaces'};}"}],[9086,{"op":"||=","left":"$k0","type":"or_3","right":"join(',', map({join '/', @$_;} @{$$router0{'filter_only'};}))"}],[9102,{"op":"||=","left":"$no_nat_set","right":"$$in_intf{'no_nat_set'}","type":"or_3"}],[9103,{"op":"||=","type":"or_3","right":"$no_nat_set","left":"$$info{'no_nat_set'}"}],[9119,{"op":"and","type":"and_3","right":"match_ip($ip, $i, $m)","left":"$mask >= $m"}],[9188,{"op":"and","type":"and_3","right":"match_ip($ip, $i, $m)","left":"$mask > $m"}],[9311,{"left":"$$aggregate{'networks'}","type":"or_2","right":"[]","op":"||="}],[9433,{"left":"$$aggregate{'private'}","type":"or_2","right":"'public'","op":"||"}],[9435,{"op":"||=","right":"'public'","type":"or_2","left":"$private2"}],[9620,{"type":"or_2","right":"'public'","left":"$$network{'private'}","op":"||"}],[9644,{"type":"or_3","right":"$$router{'semi_managed'}","left":"$$router{'managed'}","op":"or"}],[9679,{"op":"||","type":"or_2","right":"'public'","left":"$$zone{'private'}"}],[9698,{"left":"$$next{'private'}","right":"'public'","type":"or_2","op":"||"}],[9719,{"left":"$$zone1{'zone_cluster'}","right":"$zone1","type":"or_3","op":"||"}],[9719,{"right":"$zone2","type":"or_3","left":"$$zone2{'zone_cluster'}","op":"||"}],[9741,{"op":"or","right":"$$obj{'routing_only'}","type":"or_3","left":"$$obj{'managed'}"}],[9766,{"left":"$$is_inclusive{$area}","right":"not $is_zone","type":"xor_4","op":"xor"}],[9804,{"op":"and","right":"keys %$attributes == 1","type":"and_3","left":"$$attributes{'owner'}"}],[9815,{"right":"ref $val eq 'ARRAY'","type":"and_3","left":"ref $r_val eq 'ARRAY'","op":"and"}],[9815,{"op":"and","left":"ref $r_val eq 'ARRAY' and ref $val eq 'ARRAY'","type":"and_3","right":"aref_eq($r_val, $val)"}],[9815,{"op":"or","left":"$r_val eq $val","right":"ref $r_val eq 'ARRAY' and ref $val eq 'ARRAY' and aref_eq($r_val, $val)","type":"or_3"}],[9845,{"op":"xor","left":"defined $$nat1{$attr}","type":"xor_4","right":"defined $$nat2{$attr}"}],[9942,{"op":"and","left":"$$network{'ip'} eq 'bridged'","type":"and_3","right":"not $$nat{'identity'}"}],[10053,{"op":"and","left":"$$network{'loopback'}","type":"and_3","right":"@{$$zone{'networks'};} == 1"}],[10066,{"op":"and","right":"$$zone{'private'} eq 'public'","type":"and_3","left":"$$zone{'private'}"}],[10296,{"op":"||","left":"$$small{'subset_of'}","type":"or_2","right":"''"}],[10367,{"op":"or","type":"or_3","right":"$$router{'semi_managed'}","left":"$$router{'managed'}"}],[10416,{"op":"||","left":"$$interface{'loop'} || $$interface{'router'}{'loop'}","type":"or_3","right":"$$interface{'zone'}{'loop'}"}],[10478,{"op":"||","left":"$$zone{'zone_cluster'}","type":"or_2","right":"[$zone]"}],[10596,{"op":"and","right":"$$reached{'zone'} ne 'none'","type":"and_3","left":"$$reached{'zone'} eq $$reached{'router'}"}],[10757,{"right":"{'exit', $obj, 'distance', $distance}","type":"or_2","left":"$$obj{'loop'}","op":"||="}],[10788,{"op":"and","left":"$$obj{'loop'}","type":"and_3","right":"$$obj{'loop'}{'exit'} ne $obj"}],[10845,{"type":"or_3","right":"$$obj{'loop'}","left":"$$obj{'to_zone1'}","op":"or"}],[10937,{"left":"$$router{'managed'}","type":"or_3","right":"$$router{'semi_managed'}","op":"or"}],[10942,{"op":"||","right":"$obj","type":"or_3","left":"$$obj{'main_interface'}"}],[10946,{"op":"or","left":"$$main{'path_restrict'}","type":"or_3","right":"$$main{'reachable_at'}"}],[10960,{"op":"or","left":"$$obj{'managed'}","type":"or_3","right":"$$obj{'semi_managed'}"}],[10981,{"left":"$$object{'managed'}","right":"$$object{'semi_managed'}","type":"or_3","op":"or"}],[11049,{"type":"and_3","right":"$end_intf","left":"$reachable_at","op":"and"}],[11049,{"op":"and","right":"$end_intf ne $in_intf","type":"and_3","left":"$reachable_at and $end_intf"}],[11202,{"type":"and_2","right":"scalar keys %$navi","left":"$navi = $$from{'navi'}{$to}","op":"and"}],[11289,{"left":"$$from_store{'router'} eq $from","right":"$$from_store{'zone'} eq $from","type":"or_3","op":"||"}],[11289,{"left":"is_interface($from_store)","type":"and_3","right":"$$from_store{'router'} eq $from || $$from_store{'zone'} eq $from","op":"and"}],[11289,{"type":"or_3","right":"$$from_in{'reachable_at'}","left":"$$from_in{'path_restrict'}","op":"||"}],[11289,{"op":"and","right":"$$from_in{'path_restrict'} || $$from_in{'reachable_at'}","type":"and_3","left":"$from_in"}],[11304,{"op":"||","left":"$$to_store{'router'} eq $to","type":"or_3","right":"$$to_store{'zone'} eq $to"}],[11304,{"left":"is_interface($to_store)","type":"and_3","right":"$$to_store{'router'} eq $to || $$to_store{'zone'} eq $to","op":"and"}],[11304,{"op":"||","left":"$$to_out{'path_restrict'}","type":"or_3","right":"$$to_out{'reachable_at'}"}],[11304,{"left":"$to_out","type":"and_3","right":"$$to_out{'path_restrict'} || $$to_out{'reachable_at'}","op":"and"}],[11323,{"left":"$from_in","type":"and_3","right":"not $$from_in{'loop'}","op":"and"}],[11323,{"left":"$from_in and not $$from_in{'loop'}","right":"my $restrictions = $$from_in{'path_restrict'}","type":"and_3","op":"and"}],[11323,{"right":"not $start_intf","type":"and_3","left":"$from_in and not $$from_in{'loop'} and my $restrictions = $$from_in{'path_restrict'}","op":"and"}],[11334,{"op":"and","type":"and_3","right":"not $$to_out{'loop'}","left":"$to_out"}],[11334,{"left":"$to_out and not $$to_out{'loop'}","right":"my $restrictions = $$to_out{'path_restrict'}","type":"and_3","op":"and"}],[11334,{"left":"$to_out and not $$to_out{'loop'} and my $restrictions = $$to_out{'path_restrict'}","right":"not $end_intf","type":"and_3","op":"and"}],[11358,{"type":"and_3","right":"$$start_intf{'zone'} eq $end_node","left":"$start_intf","op":"and"}],[11364,{"op":"||","left":"$start_intf","right":"$from_in","type":"or_3"}],[11394,{"left":"$success","type":"and_3","right":"$start_intf","op":"and"}],[11429,{"op":"or","type":"or_3","right":"$router eq $to","left":"$router eq $from"}],[11511,{"op":"and","left":"$$interface{'loopback'}","right":"$get_next eq 'zone'","type":"and_3"}],[11603,{"right":"not $$intf{'loop'}","type":"and_3","left":"$intf","op":"and"}],[11603,{"op":"and","left":"$intf and not $$intf{'loop'}","right":"my $restrictions = $$intf{'path_restrict'}","type":"and_3"}],[11666,{"op":"and","left":"$from_loop","right":"$to_loop","type":"and_3"}],[11666,{"type":"and_3","right":"$$from_loop{'cluster_exit'} eq $$to_loop{'cluster_exit'}","left":"$from_loop and $to_loop","op":"and"}],[11772,{"op":"and","type":"and_3","right":"$$loop_entry{'router'} eq $$loop_entry{'loop_enter'}{$loop_exit}[0]{'router'}","left":"is_interface($loop_entry)"}],[11772,{"op":"or","left":"is_router($loop_entry)","right":"is_interface($loop_entry) and $$loop_entry{'router'} eq $$loop_entry{'loop_enter'}{$loop_exit}[0]{'router'}","type":"or_3"}],[11772,{"left":"is_router($loop_entry) or is_interface($loop_entry) and $$loop_entry{'router'} eq $$loop_entry{'loop_enter'}{$loop_exit}[0]{'router'}","type":"xor_4","right":"$call_at_zone","op":"xor"}],[11801,{"op":"xor","left":"$at_router","type":"xor_4","right":"$call_at_zone"}],[11806,{"type":"or_3","right":"is_interface($loop_exit) && $$loop_exit{'router'} eq $$loop_entry{'loop_leave'}{$loop_exit}[0]{'router'}","left":"is_router($loop_exit)","op":"||"}],[11810,{"op":"xor","right":"$call_at_zone","type":"xor_4","left":"$exit_at_router"}],[11836,{"type":"or_3","right":"$from_store","left":"$$from_store{'router'}","op":"||"}],[11837,{"op":"||","left":"$$to_store{'router'}","right":"$to_store","type":"or_3"}],[11855,{"right":"$to","type":"and_3","left":"$from","op":"and"}],[11878,{"left":"$where","right":"$where eq 'Zone'","type":"and_3","op":"&&"}],[11879,{"op":"xor","left":"is_router($from)","type":"xor_4","right":"$at_zone"}],[11885,{"left":"$$from{'loop'}","type":"and_3","right":"$$from_store{'loop_exit'}","op":"and"}],[11885,{"op":"and","right":"my $loop_exit = $$from_store{'loop_exit'}{$to_store}","type":"and_3","left":"$$from{'loop'} and $$from_store{'loop_exit'}"}],[11902,{"left":"$exit_at_router","type":"xor_4","right":"$at_zone","op":"xor"}],[11914,{"op":"and","right":"$$in{'loop_entry'}","type":"and_3","left":"$in"}],[11914,{"left":"$in and $$in{'loop_entry'}","type":"and_3","right":"my $loop_entry = $$in{'loop_entry'}{$to_store}","op":"and"}],[11933,{"left":"$exit_at_router","right":"$at_zone","type":"xor_4","op":"xor"}],[11963,{"type":"or_3","right":"get_path($src)","left":"$obj2path{$src}","op":"||"}],[11964,{"left":"$obj2path{$dst}","type":"or_3","right":"get_path($dst)","op":"||"}],[12030,{"op":"||","left":"$obj2path{$src2}","right":"get_path($src2)","type":"or_3"}],[12031,{"left":"$obj2path{$dst2}","right":"get_path($dst2)","type":"or_3","op":"||"}],[12032,{"op":"||","left":"$$from_store{'router'}","right":"$from_store","type":"or_3"}],[12033,{"type":"or_3","right":"$to_store","left":"$$to_store{'router'}","op":"||"}],[12050,{"type":"and_3","right":"my $exit = $$from_store{'loop_exit'}{$to_store}","left":"$$from_store{'loop_exit'}","op":"and"}],[12068,{"left":"$next","right":"$$next{'router'} ne $from","type":"and_3","op":"and"}],[12179,{"type":"or_3","right":"$$ipsec{'esp_encryption'}","left":"$$ipsec{'esp_authentication'}","op":"||"}],[12182,{"left":"$obj2path{$intf1}","type":"or_3","right":"get_path($intf1)","op":"||"}],[12183,{"op":"||","right":"get_path($intf2)","type":"or_3","left":"$obj2path{$intf2}"}],[12187,{"left":"not $nat_traversal","type":"or_3","right":"$nat_traversal ne 'on'","op":"or"}],[12228,{"op":"and","type":"and_3","right":"@$real_hubs","left":"$real_hubs"}],[12231,{"op":"and","left":"$real_spokes","type":"and_3","right":"@$real_spokes"}],[12252,{"op":"and","left":"$$router{'model'}{'do_auth'}","right":"not $need_id","type":"and_3"}],[12317,{"op":"or","left":"$$model{'do_auth'}","right":"$$model{'can_dyn_crypto'}","type":"or_3"}],[12326,{"op":"and","left":"$s_p","type":"and_3","right":"$s_p eq $private"}],[12326,{"op":"and","right":"$h_p eq $private","type":"and_3","left":"$h_p"}],[12326,{"op":"or","type":"or_3","right":"$h_p and $h_p eq $private","left":"$s_p and $s_p eq $private"}],[12358,{"left":"$has_id_hosts","right":"@other","type":"and_3","op":"and"}],[12365,{"right":"$$crypto{'detailed_crypto_acl'}","type":"and_3","left":"$$router{'managed'}","op":"and"}],[12479,{"left":"$attributes","type":"and_3","right":"$$attributes{'check-subject-name'}","op":"&&"}],[12535,{"op":"and","type":"and_3","right":"$$router{'model'}{'crypto'} eq 'EZVPN'","left":"$managed"}],[12605,{"op":"and","right":"$has_other_network","type":"and_3","left":"$has_id_hosts"}],[12612,{"left":"$has_id_hosts","right":"$has_other_network","type":"or_3","op":"or"}],[12668,{"op":"and","type":"and_3","right":"$$router{'model'}{'crypto'} eq 'ASA'","left":"$managed"}],[12676,{"op":"and","left":"$real_spoke","type":"and_3","right":"not $$real_spoke{'ip'} =~ /^(?:short|unnumbered)$/"}],[12853,{"type":"and_3","right":"match_ip($i, $ip, $mask)","left":"$m >= $mask","op":"and"}],[12853,{"op":"and","right":"match_ip($ip, $i, $m)","type":"and_3","left":"$m < $mask"}],[12853,{"op":"or","left":"$m >= $mask and match_ip($i, $ip, $mask)","right":"$m < $mask and match_ip($ip, $i, $m)","type":"or_3"}],[12971,{"op":"||","left":"$$obj{'network'}","type":"or_3","right":"$obj"}],[13046,{"op":"and","left":"$$router{'model'}{'stateless'}","right":"not $$rule{'oneway'}","type":"and_3"}],[13070,{"left":"$is_reversed","right":"$m1 == $m2","type":"and_3","op":"and"}],[13101,{"type":"and_3","right":"not $$intf{'vip'}","left":"$$intf{'loopback'}","op":"and"}],[13194,{"left":"$$intf{'loopback'}","right":"not $$intf{'vip'}","type":"and_3","op":"and"}],[13250,{"right":"$proto1 eq 'udp'","type":"or_3","left":"$proto1 eq 'tcp'","op":"or"}],[13253,{"left":"$l1 <= $l2 && $h2 <= $h1","type":"or_3","right":"$l2 <= $l1 && $h1 <= $h2","op":"||"}],[13285,{"left":"$obj2zone{$obj0}","right":"get_zone($obj0)","type":"or_3","op":"||"}],[13287,{"op":"||","right":"get_zone($obj)","type":"or_3","left":"$obj2zone{$obj}"}],[13354,{"right":"$prt_ip","type":"or_3","left":"$$rule1{'src_range'}","op":"||"}],[13354,{"right":"$prt_ip","type":"or_3","left":"$$rule2{'src_range'}","op":"||"}],[13367,{"op":"or","right":"subset_of($dst_list2, $dst_list1)","type":"or_3","left":"subset_of($src_list1, $src_list2)"}],[13367,{"type":"or_3","right":"elements_in_one_zone($src_list1, $dst_list2)","left":"(subset_of($src_list1, $src_list2) or subset_of($dst_list2, $dst_list1))","op":"or"}],[13437,{"op":"or","type":"or_3","right":"$$router{'managed'} =~ /^(?:secondary|local.*)$/","left":"$$router{'model'}{'stateless'}"}],[13494,{"op":"or","left":"$proto eq 'tcp'","right":"$proto eq 'udp'","type":"or_3"}],[13494,{"op":"or","left":"$proto eq 'tcp' or $proto eq 'udp'","type":"or_3","right":"$proto eq 'ip'"}],[13501,{"right":"$deny","type":"and_3","left":"$proto eq 'tcp'","op":"and"}],[13530,{"op":"and","type":"and_3","right":"$$model{'stateless_self'}","left":"not $in_intf"}],[13530,{"left":"$$model{'stateless'}","right":"not $in_intf and $$model{'stateless_self'}","type":"or_3","op":"or"}],[13547,{"op":"||","type":"or_2","right":"0","left":"$has_stateless_router"}],[13588,{"op":"||=","type":"or_3","right":"$index++","left":"$src_range2index{$new_src_range}"}],[13745,{"op":"and","left":"1 == @$src_zones","right":"1 == @$dst_zones","type":"and_3"}],[13790,{"left":"have_set_and_equal_marks($src_zones, $dst_zones, 'local_mark')","right":"have_different_marks($src_zones, $dst_zones, 'local_secondary_mark')","type":"and_3","op":"and"}],[13808,{"left":"$$zone{'zone_cluster'}","type":"or_2","right":"[$zone]","op":"||"}],[13831,{"left":"$$obj{'nat'}","type":"and_3","right":"$$obj{'nat'}{$nat_tag}","op":"and"}],[13844,{"op":"or","left":"$managed eq 'primary'","type":"or_3","right":"$managed eq 'full'"}],[13918,{"right":"$obj","type":"or_3","left":"$$obj{'network'}","op":"||"}],[13920,{"op":"||","left":"$$other{'network'}","right":"$other","type":"or_3"}],[13976,{"op":"||","type":"or_3","right":"$out_intf","left":"$in_intf"}],[13990,{"left":"not $intf","type":"or_3","right":"zone_eq($$network{'zone'}, $$intf{'zone'})","op":"or"}],[14035,{"op":"||","right":"$cache{$dst_path}{$src_path}","type":"or_3","left":"$cache{$src_path}{$dst_path}"}],[14048,{"left":"$is_hidden","type":"or_3","right":"$static_seen","op":"or"}],[14112,{"op":"||","left":"$$chg_rule{'log'}","right":"''","type":"or_2"}],[14115,{"op":"||","right":"''","type":"or_2","left":"$$cmp_rule{'log'}"}],[14116,{"op":"and","left":"$cmp_rule ne $chg_rule","right":"$cmp_log eq $chg_log","type":"and_3"}],[14234,{"op":"and","right":"$$in_hw{'level'} < $$out_hw{'level'}","type":"and_3","left":"$$nat_net{'dynamic'}"}],[14247,{"op":"or","left":"$type eq 'Subnet'","type":"or_3","right":"$type eq 'Interface'"}],[14286,{"left":"$$info{'src_net'}","type":"or_2","right":"{}","op":"||="}],[14287,{"left":"$$info{'dst_net'}","type":"or_2","right":"{}","op":"||="}],[14325,{"right":"$type eq 'Interface'","type":"or_3","left":"$type eq 'Subnet'","op":"or"}],[14484,{"left":"1 == @hop_intf","right":"is_redundany_group(\\@hop_intf)","type":"or_3","op":"or"}],[14539,{"left":"$$route_in_zone{'default'}","right":"$$route_in_zone{$out_net}","type":"or_3","op":"||"}],[14571,{"right":"$$route_in_zone{$network}","type":"or_3","left":"$$route_in_zone{'default'}","op":"||"}],[14605,{"op":"and","right":"$out_intf","type":"and_3","left":"$in_intf"}],[14636,{"type":"and_3","right":"$is_intf","left":"$src_zone eq $dst_zone","op":"and"}],[14642,{"left":"$$from{'main_interface'}","type":"or_3","right":"$from","op":"||"}],[14661,{"op":"&&=","type":"and_3","right":"$is_intf eq 'src' ? 'dst' : ($is_intf eq 'dst' ? 'src' : $is_intf)","left":"$is_intf"}],[14696,{"left":"$$router{'managed'}","type":"or_3","right":"$$router{'routing_only'}","op":"or"}],[14697,{"left":"$$intf{'main_interface'}","right":"$intf","type":"or_3","op":"||"}],[14968,{"type":"or_3","right":"$$route_in_zone{$peer_net}","left":"$$route_in_zone{'default'}","op":"||"}],[15001,{"left":"$$route_in_zone{'default'}","right":"$$route_in_zone{$hop_net}","type":"or_3","op":"||"}],[15013,{"op":"and","left":"@hops > 1","right":"equal(map({$_ unless $$_{'redundancy_interfaces'};} @hops))","type":"and_3"}],[15013,{"op":"or","left":"@hops > 1 and equal(map({$_ unless $$_{'redundancy_interfaces'};} @hops))","type":"or_3","right":"@hops == 1"}],[15018,{"left":"$$real_intf{'routes'}{$hop}","right":"{}","type":"or_2","op":"||="}],[15069,{"op":"and","left":"$$interface{'loop'}","right":"$$interface{'routing'}","type":"and_3"}],[15081,{"right":"$$interface2{'routing'}","type":"or_3","left":"$$interface{'routing'}","op":"or"}],[15106,{"right":"$group2","type":"and_3","left":"$group","op":"and"}],[15106,{"left":"$group and $group2","type":"and_3","right":"$group eq $group2","op":"and"}],[15136,{"left":"@$hops == 1","type":"and_3","right":"my $phys_hop = $$hop1{'orig_main'}","op":"and"}],[15182,{"op":"||","left":"$$model{'crypto'}","right":"''","type":"or_2"}],[15200,{"op":"and","left":"$asa_crypto","type":"and_3","right":"$$interface{'hub'}"}],[15215,{"left":"$ip == 0","type":"and_3","right":"$mask == 0","op":"and"}],[15296,{"left":"$asa_crypto","type":"and_3","right":"$$interface{'hub'}","op":"and"}],[15354,{"left":"$max_intf","type":"and_3","right":"$max_hop","op":"and"}],[15388,{"op":"and","right":"not $nxos_prefix","type":"and_3","left":"$vrf"}],[15442,{"op":"||","left":"get_nat_network($a, $out_nat)->{'ip'}","right":"0","type":"or_2"}],[15442,{"op":"||","type":"or_2","right":"0","left":"get_nat_network($b, $out_nat)->{'ip'}"}],[15442,{"left":"$$a{'ip'} <=> $$b{'ip'}","type":"or_3","right":"$$a{'mask'} <=> $$b{'mask'}","op":"or"}],[15465,{"op":"or","right":"$out_hidden","type":"or_3","left":"$in_hidden"}],[15469,{"op":"and","left":"$out_dynamic","right":"$in_dynamic","type":"and_3"}],[15469,{"op":"and","left":"$out_dynamic and $in_dynamic","right":"$out_dynamic eq $in_dynamic","type":"and_3"}],[15531,{"op":"and","right":"$nat_index","type":"and_3","left":"$global_index"}],[15533,{"op":"||","left":"$global_index || $nat_index","type":"or_3","right":"$dyn_index++"}],[15540,{"op":"and","left":"$out_ip == $out_intf_ip","right":"$out_mask == 4294967295","type":"and_3"}],[15578,{"right":"$$in_hw{'need_identity_nat'}","type":"or_3","left":"$$in_hw{'level'} > $$out_hw{'level'}","op":"or"}],[15578,{"op":"or","right":"$in_ip != $out_ip","type":"or_3","left":"$$in_hw{'level'} > $$out_hw{'level'} or $$in_hw{'need_identity_nat'}"}],[15620,{"type":"and_3","right":"$out","left":"$in","op":"and"}],[15620,{"op":"and","type":"and_3","right":"$in eq $out","left":"$in and $out"}],[15637,{"left":"$$net_hash{$net}","type":"and_3","right":"$net2 = $$network{'is_in'}{$in_nat}","op":"and"}],[15637,{"op":"and","left":"$$net_hash{$net} and $net2 = $$network{'is_in'}{$in_nat}","right":"$$net_hash{$net2}","type":"and_3"}],[15689,{"op":"and","left":"not $out_intf","type":"and_3","right":"$$model{'stateless_self'}"}],[15689,{"op":"or","left":"$$model{'stateless'}","right":"not $out_intf and $$model{'stateless_self'}","type":"or_3"}],[15700,{"op":"and","right":"not $$model{'stateless_icmp'}","type":"and_3","left":"$$rule{'stateless_icmp'}"}],[15713,{"left":"$$obj{'network'}","type":"or_3","right":"$obj","op":"||"}],[15754,{"type":"and_3","right":"$$model{'has_io_acl'}","left":"$key eq 'rules'","op":"and"}],[16163,{"left":"$$dst{'network'}","type":"or_3","right":"$dst","op":"||"}],[16378,{"left":"$spec","right":"$$spec{'tg_general'}","type":"and_3","op":"and"}],[16385,{"op":"||","right":"$trust_point","type":"or_3","left":"delete $$attributes{'trust-point'}"}],[16468,{"left":"keys %cert_group_map","type":"or_3","right":"keys %single_cert_map","op":"or"}],[16591,{"op":"and","left":"$$hardware{'name'} eq 'device'","type":"and_3","right":"$$model{'class'} eq 'ASA'"}],[16595,{"right":"[]","type":"or_2","left":"$$hardware{'rules'}","op":"||="}],[16601,{"type":"and_3","right":"not $$hardware{'need_out_acl'}","left":"$suffix eq 'out'","op":"and"}],[16606,{"op":"||","left":"$$hardware{$_}","type":"or_2","right":"[]"}],[16669,{"type":"and_3","right":"equal(@redundant)","left":"@redundant == @interfaces","op":"and"}],[16691,{"op":"or","left":"$filter eq 'IOS'","type":"or_3","right":"$filter eq 'NX-OS'"}],[16907,{"op":"and","left":"$lifetime == 3600","type":"and_3","right":"$crypto_type eq 'IOS'"}],[17085,{"op":"||","left":"$$model{'crypto'}","right":"''","type":"or_2"}],[17177,{"left":"$crypto_type eq 'ASA'","right":"$$isakmp{'ike_version'} == 2","type":"and_3","op":"and"}],[17279,{"op":"and","left":"$name eq 'VIP'","type":"and_3","right":"$$model{'has_vip'}"}],[17321,{"op":"and","right":"$stateful","type":"and_3","left":"$class eq 'IOS'"}],[17321,{"left":"$class eq 'IOS' and $stateful","type":"and_3","right":"not $$hardware{'loopback'}","op":"and"}],[17343,{"left":"$obj2nat2address{$obj}{$no_nat_set}","right":"full_prefix_code(address($obj, $no_nat_set))","type":"or_3","op":"||="}],[17356,{"op":"or","left":"$proto eq 'tcp'","right":"$proto eq 'udp'","type":"or_3"}],[17377,{"right":"''","type":"or_2","left":"$$router{'managed'}","op":"||"}],[17387,{"op":"or","right":"$$router{'crosslink_interfaces'}","type":"or_3","left":"$$router{'need_protect'}"}],[17424,{"left":"delete $$acl{'dst_no_nat_set'}","right":"$no_nat_set","type":"or_3","op":"||"}],[17426,{"op":"and","left":"$need_protect","type":"and_3","right":"delete $$acl{'protect_self'}"}],[17446,{"op":"and","type":"and_3","right":"my $log = $$rule{'log'}","left":"$active_log"}],[17468,{"op":"and","right":"$deny","type":"and_3","left":"$$router{'log_deny'}"}],[17475,{"op":"and","left":"$secondary_filter","right":"$$rule{'some_non_secondary'}","type":"and_3"}],[17475,{"type":"and_3","right":"$$rule{'some_primary'}","left":"$standard_filter","op":"and"}],[17475,{"left":"$secondary_filter and $$rule{'some_non_secondary'}","type":"or_3","right":"$standard_filter and $$rule{'some_primary'}","op":"or"}],[17506,{"op":"or","left":"$type eq 'Subnet'","right":"$type eq 'Interface'","type":"or_3"}],[17740,{"type":"and_3","right":"-d $in_path","left":"defined $in_path","op":"and"}],[17977,{"left":"$$Netspoc::Compiler::Pass1::config{'start_time'}","right":"time","type":"or_3","op":"||"}]],"subroutine":[[29,"BEGIN"],[30,"BEGIN"],[31,"BEGIN"],[32,"BEGIN"],[33,"BEGIN"],[34,"BEGIN"],[35,"BEGIN"],[42,"BEGIN"],[3897,"BEGIN"],[13540,"BEGIN"],[145,"store_description"],[157,"fast_mode"],[308,"equal"],[316,"unique"],[321,"find_duplicates"],[327,"intersect"],[334,"subset_of"],[341,"max"],[351,"aref_delete"],[365,"aref_eq"],[374,"keys_eq"],[383,"warn_msg"],[405,"context"],[418,"syntax_err"],[423,"at_line"],[429,"check_abort"],[436,"abort_on_error"],[443,"error_atline"],[450,"err_msg"],[457,"internal_err"],[481,"skip_space_and_comment"],[495,"check"],[503,"skip"],[509,"check_int"],[519,"read_int"],[526,"check_ip"],[539,"read_ip"],[547,"read_ip_prefix"],[559,"read_ip_prefix_pair"],[564,"gen_ip"],[571,"print_ip"],[576,"read_identifier"],[587,"read_owner_pattern"],[598,"read_name"],[609,"read_string"],[623,"read_union"],[652,"check_typed_name"],[679,"read_typed_name"],[708,"read_extended_name"],[777,"read_user_id"],[788,"check_hostname"],[804,"read_complement"],[813,"read_intersection"],[835,"read_time_val"],[842,"add_description"],[858,"check_permit_deny"],[868,"check_nat_name"],[878,"split_typed_name"],[885,"check_flag"],[896,"check_assign"],[914,"read_list"],[930,"read_list_or_null"],[936,"read_assign_list"],[943,"check_assign_list"],[952,"check_assign_pair"],[973,"new"],[979,"add_attribute"],[988,"check_radius_attributes"],[1003,"check_routing"],[1010,"check_managed"],[1040,"check_model"],[1071,"host_as_interface"],[1112,"read_host"],[1223,"read_nat"],[1280,"read_network"],[1497,"read_interface"],[1799,"set_pix_interface_level"],[1843,"check_no_in_acl"],[1899,"read_router"],[2472,"move_locked_interfaces"],[2522,"read_aggregate"],[2572,"check_router_attributes"],[2607,"read_area"],[2671,"read_group"],[2684,"read_protocolgroup"],[2691,"read_port_range"],[2721,"read_port_ranges"],[2736,"read_icmp_type_code"],[2764,"read_proto_nr"],[2792,"gen_protocol_name"],[2800,"__ANON__"],[2838,"cache_anonymous_protocol"],[2852,"read_simple_protocol"],[2889,"check_protocol_modifiers"],[2906,"read_typed_name_or_simple_protocol"],[2910,"read_protocol"],[2921,"assign_union_allow_user"],[2931,"read_service"],[3015,"read_pathrestriction"],[3026,"read_attributed_object"],[3104,"read_isakmp"],[3142,"read_ipsec"],[3149,"read_crypto"],[3176,"read_owner"],[3241,"read_netspoc"],[3262,"read_file"],[3291,"read_file_or_dir"],[3303,"__ANON__"],[3321,"__ANON__"],[3357,"show_read_statistics"],[3372,"is_network"],[3373,"is_router"],[3374,"is_interface"],[3375,"is_host"],[3376,"is_subnet"],[3377,"is_area"],[3378,"is_zone"],[3379,"is_group"],[3380,"is_protocolgroup"],[3381,"is_autointerface"],[3386,"print_rule"],[3408,"get_orig_prt"],[3429,"prepare_prt_ordering"],[3491,"order_icmp"],[3517,"order_proto"],[3534,"order_ranges"],[3551,"__ANON__"],[3683,"expand_splitted_protocol"],[3738,"order_protocols"],[3787,"link_to_owner"],[3803,"link_to_real_owner"],[3822,"expand_watchers"],[3866,"link_owners"],[3958,"link_policy_distribution_point"],[3983,"link_general_permit"],[4029,"link_areas"],[4089,"link_interfaces"],[4144,"check_interface_ip"],[4206,"link_routers"],[4215,"link_subnet"],[4218,"__ANON__"],[4269,"link_subnets"],[4284,"add_pathrestriction"],[4298,"link_pathrestrictions"],[4397,"link_virtual_interfaces"],[4516,"is_redundany_group"],[4524,"check_ip_addresses"],[4624,"link_topology"],[4653,"disable_behind"],[4706,"check_bridged_networks"],[4769,"mark_disabled"],[4915,"split_ip_range"],[4931,"owner_eq"],[4938,"check_host_compatibility"],[4974,"convert_hosts"],[5158,"combine_subnets"],[5211,"get_intf"],[5226,"get_auto_intf"],[5266,"check_auto_intf"],[5332,"expand_group1"],[5573,"__ANON__"],[5590,"__ANON__"],[5830,"remove_duplicates"],[5849,"expand_group"],[5868,"expand_group_in_rule"],[5911,"__ANON__"],[5918,"check_unused_groups"],[5942,"expand_protocols"],[6003,"split_protocols"],[6050,"collect_log"],[6060,"check_log"],[6074,"normalize_log"],[6103,"expand_auto_intf_with_dst_list"],[6157,"substitute_auto_intf"],[6185,"classify_protocols"],[6235,"check_private_service"],[6268,"normalize_service_rules"],[6377,"normalize_services"],[6433,"propagate_owners"],[6506,"__ANON__"],[6531,"__ANON__"],[6546,"__ANON__"],[6576,"__ANON__"],[6754,"show_unknown_owners"],[6778,"set_service_owner"],[6858,"__ANON__"],[6899,"apply_src_dst_modifier"],[6933,"convert_hosts_in_rules"],[7011,"collect_unenforceable"],[7078,"show_unenforceable"],[7123,"warn_useless_unenforceable"],[7134,"remove_unenforceable_rules"],[7160,"split_rules_by_path"],[7204,"group_path_rules"],[7236,"build_rule_tree"],[7263,"get_zone"],[7313,"add_managed_hosts"],[7327,"show_duplicate_rules"],[7382,"collect_redundant_rules"],[7403,"show_redundant_rules"],[7443,"warn_unused_overlaps"],[7461,"expand_rules"],[7480,"check_expanded_rules"],[7527,"set_policy_distribution_ip"],[7542,"__ANON__"],[7665,"set_natdomain"],[7747,"distribute_nat1"],[7893,"distribute_nat"],[7905,"distribute_nat_info"],[7955,"__ANON__"],[8199,"invert_nat_set"],[8202,"__ANON__"],[8272,"adjust_crypto_nat"],[8300,"get_nat_network"],[8318,"check_subnets"],[8322,"__ANON__"],[8364,"nat_to_loopback_ok"],[8391,"by_name"],[8398,"find_subnets_in_zone"],[8560,"__ANON__"],[8590,"__ANON__"],[8665,"find_subnets_in_nat_domain"],[8889,"cluster_crosslink_routers"],[8896,"__ANON__"],[8943,"check_crosslink"],[9046,"get_managed_local_clusters"],[9061,"__ANON__"],[9079,"__ANON__"],[9168,"mark_managed_local"],[9175,"__ANON__"],[9222,"link_reroute_permit"],[9258,"add_managed_hosts_to_aggregate"],[9303,"link_aggregate_to_zone"],[9336,"link_implicit_aggregate_to_zone"],[9345,"__ANON__"],[9402,"link_aggregates"],[9494,"duplicate_aggregate_to_cluster"],[9531,"get_any"],[9587,"get_cluster_aggregates"],[9600,"set_zone1"],[9673,"set_zone_cluster"],[9718,"zone_eq"],[9732,"set_area1"],[9800,"inherit_router_attributes"],[9841,"nat_equal"],[9859,"check_useless_nat"],[9876,"inherit_area_nat"],[9909,"inherit_attributes_from_area"],[9922,"inherit_nat_to_subnets_in_zone"],[9984,"inherit_nat_in_zone"],[10011,"cleanup_after_inheritance"],[10029,"inherit_attributes"],[10040,"set_zones"],[10082,"cluster_zones"],[10103,"prepare_area_borders"],[10131,"set_area"],[10156,"set_areas"],[10214,"find_area_subset_relations"],[10276,"check_routers_in_nested_areas"],[10327,"clean_areas"],[10340,"set_zone"],[10361,"check_virtual_interfaces"],[10406,"check_pathrestrictions"],[10535,"traverse_loop_part"],[10578,"apply_pathrestriction_optimization"],[10642,"optimize_pathrestrictions"],[10709,"setpath_obj"],[10806,"set_loop_cluster"],[10839,"find_dists_and_loops"],[10866,"process_loops"],[10904,"setpath"],[10924,"get_path"],[11024,"cluster_path_mark1"],[11197,"cluster_navigation"],[11274,"cluster_path_mark"],[11635,"path_mark"],[11763,"loop_path_walk"],[11829,"path_walk"],[11960,"single_path_walk"],[11971,"set_auto_intf_from_border"],[11975,"__ANON__"],[12012,"add_pathresticted_interfaces"],[12023,"path_auto_interfaces"],[12138,"link_ipsec"],[12156,"link_crypto"],[12177,"gen_tunnel_rules"],[12216,"link_tunnels"],[12397,"crypto_behind"],[12441,"verify_asa_vpn_attributes"],[12473,"verify_subject_name"],[12477,"__ANON__"],[12496,"verify_asa_trustpoint"],[12509,"expand_crypto"],[12761,"setup_ref2obj"],[12805,"find_supernet"],[12831,"find_zone_network"],[12884,"find_matching_supernet"],[12925,"check_supernet_in_zone"],[12966,"is_filtered_at"],[12999,"check_supernet_src_rule"],[13139,"check_supernet_dst_rule"],[13208,"check_missing_supernet_rules"],[13244,"match_prt"],[13273,"match_prt_list"],[13283,"elements_in_one_zone"],[13317,"check_transient_supernet_rules"],[13431,"mark_stateful"],[13453,"check_supernet_rules"],[13483,"gen_reverse_rules1"],[13517,"__ANON__"],[13617,"gen_reverse_rules"],[13650,"mark_secondary"],[13680,"mark_primary"],[13706,"mark_local_secondary"],[13730,"get_zones"],[13744,"have_different_marks"],[13754,"have_set_and_equal_marks"],[13761,"mark_secondary_rules"],[13807,"get_zone_cluster_borders"],[13822,"mark_dynamic_host_nets"],[13857,"check_dynamic_nat_rules"],[13893,"__ANON__"],[13916,"__ANON__"],[14084,"find_redundant_rules"],[14160,"collect_nat_path"],[14179,"distribute_nat_to_device"],[14244,"add_networks"],[14268,"prepare_nat_commands"],[14321,"get_route_networks"],[14364,"set_routes_in_zone"],[14392,"__ANON__"],[14437,"__ANON__"],[14526,"add_path_routes"],[14563,"add_end_routes"],[14595,"get_route_path"],[14627,"generate_routing_tree1"],[14717,"generate_routing_tree"],[14776,"generate_routing_info"],[14857,"find_active_routes"],[14886,"fix_bridged_hops"],[14910,"check_and_convert_routes"],[14985,"__ANON__"],[15169,"print_header"],[15177,"print_routes"],[15425,"print_nat1"],[15507,"print_pix_static"],[15520,"__ANON__"],[15568,"__ANON__"],[15577,"__ANON__"],[15602,"optimize_nat_networks"],[15655,"print_nat"],[15671,"distribute_rule"],[15712,"__ANON__"],[15822,"add_router_acls"],[15939,"create_general_permit_rules"],[15954,"distribute_general_permit"],[16018,"rules_distribution"],[16048,"address"],[16118,"ios_route_code"],[16128,"prefix_code"],[16136,"full_prefix_code"],[16146,"print_acl_placeholder"],[16156,"get_split_tunnel_nets"],[16181,"print_asavpn"],[16221,"__ANON__"],[16487,"print_acl_prefix"],[16520,"print_acl_suffix"],[16533,"print_iptables_acls"],[16579,"print_cisco_acls"],[16716,"generate_acls"],[16731,"gen_crypto_rules"],[16736,"print_ezvpn"],[16822,"print_crypto_acl"],[16852,"print_crypto_filter_acl"],[16875,"print_crypto_map_attributes"],[16918,"print_tunnel_group"],[16944,"print_ca_and_tunnel_group_map"],[16955,"print_static_crypto_map"],[17033,"print_dynamic_crypto_map"],[17083,"print_crypto"],[17272,"print_interface"],[17342,"print_address"],[17349,"print_prt"],[17372,"print_acls"],[17613,"check_output_dir"],[17642,"print_code"],[17703,"__ANON__"],[17739,"copy_raw"],[17785,"show_version"],[17791,"concurrent"],[17858,"init_protocols"],[17977,"init_global_vars"],[18007,"compile"],[18056,"__ANON__"],[18062,"__ANON__"]],"file":"lib/Netspoc/Compiler/Pass1.pm","digest":"99d408ab2cd84ae201fab29539996603","branch":[[146,{"text":"if (defined $set) { }"}],[158,{"text":"if (defined $set) { }"}],[308,{"text":"unless @_"}],[343,{"text":"if $max < $el"}],[353,{"text":"if ($$aref[$i] eq $elt)"}],[366,{"text":"unless @$a1 == @$a2"}],[368,{"text":"if $$a1[$i] ne $$a2[$i]"}],[375,{"text":"unless keys %$href1 == keys %$href2"}],[377,{"text":"unless exists $$href2{$key}"}],[406,{"text":"if (pos $input == length $input) { }"}],[430,{"text":"if ($error_counter >= $$Netspoc::Compiler::Pass1::config{'max_errors'})"}],[436,{"text":"if ($error_counter)"}],[467,{"text":"if @args"}],[510,{"text":"if ($input =~ /\\G(\\d+)/cg) { }"}],[520,{"text":"unless defined $result"}],[528,{"text":"if ($1 > 255 or $2 > 255 or $3 > 255 or $4 > 255)"}],[527,{"text":"if ($input =~ /\\G(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)/cg) { }"}],[540,{"text":"unless defined $result"}],[550,{"text":"unless defined $mask"}],[551,{"text":"unless match_ip($ip, $ip, $mask)"}],[577,{"text":"if ($input =~ /(\\G[\\w-]+)/cg) { }"}],[588,{"text":"if ($input =~ / ( \\G [\\w-]* [*] ) /cgx) { }"}],[599,{"text":"if ($input =~ /(\\G[^;,\\s\"\"'']+)/cg) { }"}],[610,{"text":"if ($input =~ /\\G([^;,\"\"''\\n]+)/cg) { }"}],[630,{"text":"if check($delimiter)"}],[634,{"text":"if check($delimiter)"}],[636,{"text":"unless $comma_seen"}],[643,{"text":"if $user_ref_error"}],[653,{"text":"unless $input =~ / \\G (\\w+) : /cgx"}],[656,{"text":"if ($input =~ m[ \\G ( [\\w-]+ (?: ( [\\@/] ) [\\w-]+ )? ) ]cgx) { }"}],[666,{"text":"unless $separator eq '@'"}],[669,{"text":"unless $separator eq '/'"}],[665,{"text":"if ($type eq 'router') { }"}],[665,{"text":"elsif ($type eq 'network' or $type eq 'interface') { }"}],[664,{"text":"if ($separator)"}],[711,{"text":"unless $$user_object{'active'}"}],[708,{"text":"if (check('user'))"}],[716,{"text":"unless $input =~ /\\G([\\w-]+):/cg"}],[722,{"text":"if ($interface || $type eq 'host' and check('managed')) { }"}],[722,{"text":"elsif ($type eq 'any' and check('ip')) { }"}],[734,{"text":"unless $input =~ / \\G ( $hostname_regex ) /cgox"}],[739,{"text":"unless $input =~ / \\G ( $network_regex ) /cgox"}],[721,{"text":"if ($input =~ / \\G \\[ /cgox) { }"}],[721,{"text":"elsif ($type eq 'host') { }"}],[721,{"text":"elsif ($type eq 'network') { }"}],[721,{"text":"elsif ($interface and $input =~ / \\G ( [\\w-]+ (?: \\@ [\\w-]+ ) ) /cgx or $input =~ / \\G ( [\\w-]+ ) /cgx) { }"}],[752,{"text":"unless $input =~ / \\G \\. /cgox"}],[755,{"text":"unless $selector =~ /^(auto|all)$/"}],[761,{"text":"if $ext"}],[762,{"text":"unless $input =~ / \\G ( $network_regex ) /cgox"}],[767,{"text":"if ($input =~ / \\G \\. /cgox)"}],[753,{"text":"if ($input =~ / \\G \\[ /cgox) { }"}],[751,{"text":"if ($interface)"}],[772,{"text":"$ext ? :"}],[778,{"text":"if ($input =~ /\\G($user_id_regex)/cog) { }"}],[790,{"text":"if ($input =~ /\\G($hostname_regex)/cog) { }"}],[789,{"text":"if ($input =~ /\\G host:/cgx) { }"}],[804,{"text":"if (check('!')) { }"}],[817,{"text":"if (@result == 1) { }"}],[837,{"text":"unless my $factor = $timeunits{$unit}"}],[843,{"text":"unless check('description')"}],[850,{"text":"if (store_description())"}],[859,{"text":"if ($input =~ /\\G(permit|deny)/cg) { }"}],[869,{"text":"if ($input =~ /\\G nat:([\\w-]+)/cgx) { }"}],[886,{"text":"if (check($token)) { }"}],[899,{"text":"if (wantarray) { }"}],[897,{"text":"if (check($token))"}],[918,{"text":"if check(';')"}],[922,{"text":"if check(';')"}],[924,{"text":"unless $comma_seen"}],[931,{"text":"if check(';')"}],[944,{"text":"if (check($token))"}],[953,{"text":"if (check($token))"}],[980,{"text":"if defined $$obj{$key}"}],[989,{"text":"unless check('radius_attributes')"}],[993,{"text":"if check('\\\\}')"}],[995,{"text":"check('=') ? :"}],[1003,{"text":"unless my $protocol = check_assign('routing', \\&read_identifier)"}],[1004,{"text":"unless my $routing = $routing_info{$protocol}"}],[1010,{"text":"unless check('managed')"}],[1017,{"text":"if ($value =~ /^(?:secondary|standard|full|primary|\n\f                           local|local_secondary|routing_only)$/x) { }"}],[1012,{"text":"if (check(';')) { }"}],[1012,{"text":"elsif (check('=')) { }"}],[1040,{"text":"unless my($model, @attributes) = check_assign_list('model', \\&read_name)"}],[1043,{"text":"unless ($info)"}],[1053,{"text":"unless $ext"}],[1054,{"text":"$ext ? :"}],[1056,{"text":"if (@ext_list)"}],[1075,{"text":"if (not $model) { }"}],[1075,{"text":"elsif (not $$model{'can_managed_host'}) { }"}],[1084,{"text":"unless ($hw_name)"}],[1090,{"text":"$$host{'server_name'} ? :"}],[1114,{"text":"if $private"}],[1115,{"text":"if (my($id) = $name =~ /^host:id:(.*)$/)"}],[1126,{"text":"if check('\\\\}')"}],[1131,{"text":"unless $ip1 <= $ip2"}],[1138,{"text":"unless $managed eq 'standard'"}],[1143,{"text":"if $$host{'model'}"}],[1168,{"text":"if $$host{'nat'}{$name}"}],[1160,{"text":"if ($type eq 'nat') { }"}],[1127,{"text":"if (my $ip = check_assign('ip', \\&read_ip)) { }"}],[1127,{"text":"elsif (my($ip1, $ip2) = check_assign_pair('range', '-', \\&read_ip)) { }"}],[1127,{"text":"elsif (my $managed = check_managed()) { }"}],[1127,{"text":"elsif (my $model = check_model()) { }"}],[1127,{"text":"elsif (my $hardware = check_assign('hardware', \\&read_name)) { }"}],[1127,{"text":"elsif (my $server_name = check_assign('server_name', \\&read_name)) { }"}],[1127,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[1127,{"text":"elsif (my $radius_attributes = check_radius_attributes()) { }"}],[1127,{"text":"elsif (my $pair = check_typed_name()) { }"}],[1180,{"text":"unless $$host{'ip'} xor $$host{'range'}"}],[1196,{"text":"if $ok{$key}"}],[1183,{"text":"if ($$host{'managed'})"}],[1207,{"text":"if $$host{'radius_attributes'}"}],[1203,{"text":"if ($$host{'id'}) { }"}],[1211,{"text":"if ($$host{'range'})"}],[1210,{"text":"if ($$host{'nat'})"}],[1231,{"text":"if check('\\\\}')"}],[1232,{"text":"if (my($ip, $mask) = check_assign('ip', \\&read_ip_prefix)) { }"}],[1232,{"text":"elsif (check_flag('hidden')) { }"}],[1232,{"text":"elsif (check_flag('identity')) { }"}],[1232,{"text":"elsif (check_flag('dynamic')) { }"}],[1232,{"text":"elsif (my $pair = check_assign('subnet_of', \\&read_typed_name)) { }"}],[1257,{"text":"if grep {$key eq $_;} 'name', 'hidden'"}],[1266,{"text":"if grep {$key eq $_;} 'name', 'identity'"}],[1272,{"text":"unless defined $$nat{'ip'}"}],[1255,{"text":"if ($$nat{'hidden'}) { }"}],[1255,{"text":"elsif ($$nat{'identity'}) { }"}],[1286,{"text":"if $private"}],[1287,{"text":"if ($net_name =~ m[^(.*)/])"}],[1294,{"text":"if check('\\\\}')"}],[1300,{"text":"if defined $$network{'ip'}"}],[1325,{"text":"if (is_host($host)) { }"}],[1325,{"text":"elsif (is_interface($host)) { }"}],[1344,{"text":"if ($other_net ne $network)"}],[1341,{"text":"if (my $other = $hosts{$host_name})"}],[1353,{"text":"if $$network{'nat'} and $$network{'nat'}{$nat_tag}"}],[1295,{"text":"if (my($ip, $mask) = check_assign('ip', \\&read_ip_prefix)) { }"}],[1295,{"text":"elsif (check_flag('unnumbered')) { }"}],[1295,{"text":"elsif (check_flag('has_subnets')) { }"}],[1295,{"text":"elsif (check_flag('crosslink')) { }"}],[1295,{"text":"elsif (my $pair = check_assign('subnet_of', \\&read_typed_name)) { }"}],[1295,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[1295,{"text":"elsif (my $radius_attributes = check_radius_attributes()) { }"}],[1295,{"text":"elsif (my $host_name = check_hostname()) { }"}],[1295,{"text":"elsif (my $nat_tag = check_nat_name()) { }"}],[1368,{"text":"unless defined $ip"}],[1375,{"text":"if $ok{$key}"}],[1376,{"text":"$key eq 'nat' ? :"}],[1376,{"text":"$key eq 'hosts' ? :"}],[1398,{"text":"if $ok{$key}"}],[1399,{"text":"$key eq 'hosts' ? :"}],[1408,{"text":"if $$hash{$nat_tag}{'identity'}"}],[1406,{"text":"if (my $hash = $$network{'nat'})"}],[1422,{"text":"unless (match_ip($host_ip, $ip, $mask))"}],[1429,{"text":"unless (match_ip($ip1, $ip, $mask) and match_ip($ip2, $ip, $mask))"}],[1421,{"text":"if (my $host_ip = $$host{'ip'}) { }"}],[1421,{"text":"elsif ($$host{'range'}) { }"}],[1445,{"text":"if (@{$$network{'hosts'};} and $$network{'crosslink'})"}],[1452,{"text":"if $$nat{'dynamic'}"}],[1453,{"text":"unless $$nat{'mask'} == $mask"}],[1448,{"text":"if ($$network{'nat'})"}],[1465,{"text":"unless @{$$network{'hosts'};} == $id_hosts_count"}],[1473,{"text":"if $$network{'radius_attributes'}"}],[1462,{"text":"if (my $id_hosts_count = grep({$$_{'id'};} @{$$network{'hosts'};})) { }"}],[1370,{"text":"if ($ip eq 'unnumbered') { }"}],[1370,{"text":"elsif ($$network{'bridged'}) { }"}],[1501,{"text":"unless (check('='))"}],[1512,{"text":"if check('\\\\}')"}],[1551,{"text":"unless $type eq 'crypto'"}],[1557,{"text":"unless $type eq 'crypto'"}],[1564,{"text":"if $level > 100"}],[1579,{"text":"if $$interface{'nat'}{$name2}"}],[1590,{"text":"if check('\\\\}')"}],[1591,{"text":"if (my $ip = check_assign('ip', \\&read_ip)) { }"}],[1598,{"text":"if ($$secondary{'ip'}) { }"}],[1571,{"text":"if ($type eq 'nat') { }"}],[1571,{"text":"elsif ($type eq 'secondary') { }"}],[1610,{"text":"if $virtual"}],[1621,{"text":"if check('\\\\}')"}],[1626,{"text":"unless $xxrp_info{$type}"}],[1631,{"text":"unless $id =~ /^\\d+$/"}],[1633,{"text":"unless $id < 256"}],[1622,{"text":"if (my $ip = check_assign('ip', \\&read_ip)) { }"}],[1622,{"text":"elsif (my $type = check_assign('type', \\&read_identifier)) { }"}],[1622,{"text":"elsif (my $id = check_assign('id', \\&read_identifier)) { }"}],[1640,{"text":"unless $$virtual{'ip'}"}],[1641,{"text":"if $$virtual{'redundancy_id'} and not $$virtual{'redundancy_type'}"}],[1646,{"text":"if $$interface{'bind_nat'}"}],[1659,{"text":"unless $$_[0] ne 'network'"}],[1659,{"text":"if (grep {ref $$_[1] unless $$_[0] ne 'network';} @pairs)"}],[1513,{"text":"if (my(@ip) = check_assign_list('ip', \\&read_ip)) { }"}],[1513,{"text":"elsif (check_flag('unnumbered')) { }"}],[1513,{"text":"elsif (check_flag('negotiated')) { }"}],[1513,{"text":"elsif (check_flag('loopback')) { }"}],[1513,{"text":"elsif (check_flag('vip')) { }"}],[1513,{"text":"elsif (check_flag('no_in_acl')) { }"}],[1513,{"text":"elsif (check_flag('dhcp_server')) { }"}],[1513,{"text":"elsif (my $pair = check_assign('subnet_of', \\&read_typed_name)) { }"}],[1513,{"text":"elsif (my(@pairs) = check_assign_list('hub', \\&read_typed_name)) { }"}],[1513,{"text":"elsif ($pair = check_assign('spoke', \\&read_typed_name)) { }"}],[1513,{"text":"elsif (my $id = check_assign('id', \\&read_user_id)) { }"}],[1513,{"text":"elsif (defined(my $level = check_assign('security_level', \\&read_int))) { }"}],[1513,{"text":"elsif ($pair = check_typed_name()) { }"}],[1513,{"text":"elsif (check('virtual')) { }"}],[1513,{"text":"elsif (my(@tags) = check_assign_list('bind_nat', \\&read_identifier)) { }"}],[1513,{"text":"elsif (my $hardware = check_assign('hardware', \\&read_name)) { }"}],[1513,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[1513,{"text":"elsif (my $routing = check_routing()) { }"}],[1513,{"text":"elsif (@pairs = check_assign_list('reroute_permit', \\&read_typed_name)) { }"}],[1513,{"text":"elsif (check_flag('disabled')) { }"}],[1513,{"text":"elsif (check_flag('no_check')) { }"}],[1679,{"text":"if ($name =~ m[/])"}],[1688,{"text":"if ($ip =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[1687,{"text":"if (my $ip = $$interface{'ip'})"}],[1686,{"text":"if ($virtual) { }"}],[1709,{"text":"if ($$interface{'ip'} =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[1708,{"text":"if ($$interface{'nat'})"}],[1715,{"text":"if $$interface{'hardware'}"}],[1713,{"text":"if ($$interface{'vip'})"}],[1720,{"text":"if ($$interface{'owner'} and not $$interface{'vip'})"}],[1734,{"text":"$$interface{'vip'} ? :"}],[1732,{"text":"if (keys %copy)"}],[1738,{"text":"$$interface{'vip'} ? :"}],[1737,{"text":"if ($$interface{'ip'} =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[1724,{"text":"if ($$interface{'loopback'}) { }"}],[1724,{"text":"elsif ($$interface{'subnet_of'}) { }"}],[1749,{"text":"if (my(@extra) = grep({not $ok{$_};} keys %$interface))"}],[1747,{"text":"if ($$interface{'ip'} eq 'bridged')"}],[1756,{"text":"if @secondary_interfaces"}],[1760,{"text":"if $$interface{'hub'}"}],[1767,{"text":"if $$interface{'id'}"}],[1754,{"text":"if (my $crypto = $$interface{'spoke'}) { }"}],[1772,{"text":"if ($$interface{'ip'} =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[1771,{"text":"if (my $crypto_list = $$interface{'hub'})"}],[1780,{"text":"if ($$interface{'ip'} =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[1779,{"text":"if (@secondary_interfaces)"}],[1789,{"text":"if $$interface{$key}"}],[1808,{"text":"if (@levels >= 2 and not equal(@levels)) { }"}],[1803,{"text":"if (my(@levels) = grep({defined $_;} map({$$_{'security_level'};} @{$$hardware{'interfaces'};}))) { }"}],[1803,{"text":"elsif ($hwname =~ /inside/) { }"}],[1803,{"text":"elsif ($hwname =~ /outside/) { }"}],[1803,{"text":"elsif (($level) = $hwname =~ /(\\d+)$/ and $level <= 100) { }"}],[1848,{"text":"unless delete $$interface{'no_in_acl'}"}],[1852,{"text":"if $$hardware{'no_in_acl'}"}],[1856,{"text":"unless 1 == grep({not $$_{'main_interface'};} @{$$hardware{'interfaces'};})"}],[1867,{"text":"unless $no_in_acl_counter"}],[1870,{"text":"unless 1 == $no_in_acl_counter"}],[1875,{"text":"unless $$router{'model'}{'has_out_acl'}"}],[1879,{"text":"unless $$_{'hub'}"}],[1879,{"text":"if (grep {$$_{'spoke'} unless $$_{'hub'};} @{$$router{'interfaces'};})"}],[1888,{"text":"unless $$hardware{'no_in_acl'}"}],[1911,{"text":"unless $vrf"}],[1908,{"text":"if (defined $vrf)"}],[1918,{"text":"if check('\\\\}')"}],[1920,{"text":"if $$router{'managed'}"}],[1973,{"text":"if defined $$router{'log'}{$name2}"}],[1975,{"text":"check('=') ? :"}],[1972,{"text":"if ($type eq 'log') { }"}],[1972,{"text":"elsif ($type ne 'interface') { }"}],[1989,{"text":"if ($interfaces{$iname})"}],[2003,{"text":"if $private"}],[1919,{"text":"if (my $managed = check_managed()) { }"}],[1919,{"text":"elsif (my(@filter_only) = check_assign_list('filter_only', \\&read_ip_prefix_pair)) { }"}],[1919,{"text":"elsif (my $model = check_model()) { }"}],[1919,{"text":"elsif (check_flag('no_group_code')) { }"}],[1919,{"text":"elsif (check_flag('no_crypto_filter')) { }"}],[1919,{"text":"elsif (check_flag('no_protect_self')) { }"}],[1919,{"text":"elsif (check_flag('log_deny')) { }"}],[1919,{"text":"elsif (check_flag('acl_use_real_ip')) { }"}],[1919,{"text":"elsif (my $routing = check_routing()) { }"}],[1919,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[1919,{"text":"elsif (my $radius_attributes = check_radius_attributes()) { }"}],[1919,{"text":"elsif (my $pair = check_assign('policy_distribution_point', \\&read_typed_name)) { }"}],[1919,{"text":"elsif (my(@list) = check_assign_list('general_permit', \\&read_typed_name_or_simple_protocol)) { }"}],[2015,{"text":"if ($$interface{'vip'} and not $model && $$model{'has_vip'})"}],[2023,{"text":"if ($error)"}],[2039,{"text":"unless ($model)"}],[2047,{"text":"if ($managed eq 'routing_only')"}],[2053,{"text":"if $$router{'vrf'} and not $$model{'can_vrf'}"}],[2064,{"text":"if ($$interface{'ip'} eq 'short')"}],[2075,{"text":"if ($$interface{'ip'} ne 'short')"}],[2072,{"text":"unless ($hw_name)"}],[2089,{"text":"unless aref_eq($$interface{'bind_nat'} || $bind_nat0, $$hardware{'bind_nat'} || $bind_nat0)"}],[2100,{"text":"if (my $nat = $$interface{'bind_nat'})"}],[2105,{"text":"if $hw_name eq 'VIP' and $$model{'has_vip'} and not $$interface{'vip'}"}],[2084,{"text":"if ($hardware = $hardware{$hw_name}) { }"}],[2115,{"text":"unless ($$interface{'loopback'})"}],[2119,{"text":"if $$interface{'bind_nat'}"}],[2130,{"text":"if $$routing{'name'} eq 'manual'"}],[2129,{"text":"if (my $routing = $$interface{'routing'})"}],[2138,{"text":"if ($all_routing)"}],[2145,{"text":"unless $rname =~ /^(?:manual|dynamic)$/"}],[2141,{"text":"if (my $routing = $$interface{'routing'} and $$interface{'ip'} eq 'unnumbered')"}],[2036,{"text":"if (my $managed = $$router{'managed'})"}],[2155,{"text":"unless ($$router{'filter_only'})"}],[2159,{"text":"if $$model{'has_io_acl'}"}],[2154,{"text":"if ($managed =~ /^local/)"}],[2163,{"text":"if $$router{'log_deny'} and not $$model{'can_log_deny'}"}],[2173,{"text":"unless my $modifier = $$hash{$name2}"}],[2175,{"text":"if $$log_modifiers{$modifier}"}],[2180,{"text":"if ($valid) { }"}],[2169,{"text":"if (my $log_modifiers = $$model{'log_modifiers'}) { }"}],[2168,{"text":"if (my $hash = $$router{'log'})"}],[2195,{"text":"if $$router{'no_protect_self'} and not $$model{'need_protect'}"}],[2199,{"text":"if ($$model{'need_protect'})"}],[2206,{"text":"if (defined $$interface{'security_level'} and not $$model{'has_interface_level'})"}],[2214,{"text":"unless $$model{'crypto'}"}],[2212,{"text":"if ($$interface{'hub'} or $$interface{'spoke'})"}],[2218,{"text":"if ($$interface{'no_check'} and not $$interface{'hub'} && $$model{'do_auth'})"}],[2230,{"text":"unless $$interface{'ip'} eq 'bridged'"}],[2247,{"text":"unless $$layer3_intf{'hardware'}{'name'} eq 'device'"}],[2246,{"text":"if ($$model{'class'} eq 'ASA')"}],[2252,{"text":"if (my($no_ip) = $$layer3_intf{'ip'} =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[2233,{"text":"if (exists $layer3_seen{$layer3_name}) { }"}],[2233,{"text":"elsif ($layer3_intf = $interfaces{$layer3_name}) { }"}],[2280,{"text":"unless my $main = $$interface{'main_interface'}"}],[2281,{"text":"if ($$main{'is_layer3'})"}],[2290,{"text":"if $changed"}],[2277,{"text":"if (keys %layer3_seen)"}],[2293,{"text":"if ($$model{'has_interface_level'})"}],[2300,{"text":"unless $has_bind_nat"}],[2303,{"text":"unless $$model{'can_acl_use_real_ip'}"}],[2306,{"text":"unless 2 == @{$$router{'hardware'};}"}],[2309,{"text":"if $$router{'has_crypto'}"}],[2299,{"text":"if ($$router{'acl_use_real_ip'})"}],[2314,{"text":"if $has_bind_nat"}],[2313,{"text":"if ($managed =~ /^local/)"}],[2319,{"text":"unless grep {$$_{'hub'};} @{$$router{'interfaces'};}"}],[2325,{"text":"if $has_bind_nat"}],[2332,{"text":"if $$router{'radius_attributes'}"}],[2318,{"text":"if ($$model{'do_auth'}) { }"}],[2335,{"text":"if ($$model{'no_crypto_filter'})"}],[2343,{"text":"if (delete $$router{'owner'})"}],[2347,{"text":"if ($$interface{'hub'})"}],[2351,{"text":"if (delete $$interface{'reroute_permit'})"}],[2357,{"text":"if ($$interface{'ip'} eq 'bridged')"}],[2363,{"text":"if ($bridged)"}],[2153,{"text":"if (my $managed = $$router{'managed'}) { }"}],[2381,{"text":"if ($$interface{'redundant'}) { }"}],[2409,{"text":"if (my $private = $$interface{'private'})"}],[2397,{"text":"unless ($networks{$net_name})"}],[2430,{"text":"if ($$interface{$key})"}],[2434,{"text":"if ($interfaces{$iname})"}],[2446,{"text":"if (my $private = $$interface{'private'})"}],[2374,{"text":"if ($$interface{'loopback'}) { }"}],[2374,{"text":"elsif (my $crypto = $$interface{'spoke'}) { }"}],[2455,{"text":"if ($$interface{'spoke'} || $$interface{'hub'} and not $$interface{'no_check'})"}],[2462,{"text":"if @move_locked"}],[2506,{"text":"unless 1 == @{$$hardware{'interfaces'};}"}],[2509,{"text":"if (my $hash = $$orig_router{'radius_attributes'})"}],[2498,{"text":"if ($$orig_router{'managed'})"}],[2524,{"text":"if $private"}],[2529,{"text":"if check('\\\\}')"}],[2545,{"text":"unless $$nat{'dynamic'}"}],[2546,{"text":"if $$aggregate{'nat'}{$nat_name}"}],[2530,{"text":"if (my($ip, $mask) = check_assign('ip', \\&read_ip_prefix)) { }"}],[2530,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[2530,{"text":"elsif (my $link = check_assign('link', \\&read_typed_name)) { }"}],[2530,{"text":"elsif (check_flag('has_unenforceable')) { }"}],[2530,{"text":"elsif (my $nat_name = check_nat_name()) { }"}],[2554,{"text":"unless $$aggregate{'link'}"}],[2560,{"text":"if grep {$key eq $_;} 'name', 'ip', 'mask', 'link', 'is_aggregate', 'private', 'nat'"}],[2557,{"text":"if ($ip) { }"}],[2576,{"text":"unless check('router_attributes')"}],[2580,{"text":"if check('\\\\}')"}],[2581,{"text":"if (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[2581,{"text":"elsif (my $pair = check_assign('policy_distribution_point', \\&read_typed_name)) { }"}],[2581,{"text":"elsif (my(@list) = check_assign_list('general_permit', \\&read_typed_name_or_simple_protocol)) { }"}],[2613,{"text":"if check('\\\\}')"}],[2615,{"text":"unless $$_[0] ne 'interface'"}],[2615,{"text":"if (grep {ref $$_[1] unless $$_[0] ne 'interface';} @elements)"}],[2624,{"text":"unless $$_[0] ne 'interface'"}],[2624,{"text":"if (grep {ref $$_[1] unless $$_[0] ne 'interface';} @elements)"}],[2634,{"text":"if ($$pair[0] ne 'network' or ref $$pair[1])"}],[2648,{"text":"unless $$nat{'dynamic'}"}],[2649,{"text":"if $$area{'nat'}{$nat_name}"}],[2614,{"text":"if (my(@elements) = check_assign_list('border', \\&read_intersection)) { }"}],[2614,{"text":"elsif (@elements = check_assign_list('inclusive_border', \\&read_intersection)) { }"}],[2614,{"text":"elsif (check_flag('auto_border')) { }"}],[2614,{"text":"elsif (my $pair = check_assign('anchor', \\&read_typed_name)) { }"}],[2614,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[2614,{"text":"elsif (my $router_attributes = check_router_attributes($name)) { }"}],[2614,{"text":"elsif (my $nat_name = check_nat_name()) { }"}],[2657,{"text":"if $$area{'border'} || $$area{'inclusive_border'} and $$area{'anchor'}"}],[2662,{"text":"unless $$area{'anchor'} or $$area{'border'} or $$area{'inclusive_border'}"}],[2674,{"text":"if $private"}],[2692,{"text":"if $port1 > 65535"}],[2693,{"text":"if $port1 == 0"}],[2696,{"text":"if $port2 > 65535"}],[2697,{"text":"if $port2 == 0"}],[2698,{"text":"if $port1 > $port2"}],[2700,{"text":"if ($port1 == 1 and $port2 == 65535) { }"}],[2695,{"text":"if (defined(my $port2 = check_int())) { }"}],[2694,{"text":"if (check('-')) { }"}],[2691,{"text":"if (defined(my $port1 = check_int())) { }"}],[2724,{"text":"if ($range ne $aref_tcp_any)"}],[2723,{"text":"if (check(':')) { }"}],[2738,{"text":"if $type > 255"}],[2741,{"text":"if $code > 255"}],[2740,{"text":"if (defined(my $code = check_int())) { }"}],[2751,{"text":"if ($type == 0 or $type == 3 or $type == 11)"}],[2739,{"text":"if (check('/')) { }"}],[2737,{"text":"if (defined(my $type = check_int())) { }"}],[2766,{"text":"if $nr > 255"}],[2767,{"text":"if $nr == 0"}],[2768,{"text":"if ($nr == 1) { }"}],[2768,{"text":"elsif ($nr == 4) { }"}],[2768,{"text":"elsif ($nr == 17) { }"}],[2765,{"text":"if (defined(my $nr = check_int())) { }"}],[2801,{"text":"if ($v1 == $v2) { }"}],[2801,{"text":"elsif ($v1 == 1 and $v2 == 65535) { }"}],[2815,{"text":"if $src_port"}],[2816,{"text":"if $dst_port"}],[2817,{"text":"if $port"}],[2821,{"text":"if (defined(my $code = $$protocol{'code'})) { }"}],[2820,{"text":"if (defined(my $type = $$protocol{'type'}))"}],[2796,{"text":"if ($proto eq 'ip') { }"}],[2796,{"text":"elsif ($proto eq 'tcp' or $proto eq 'udp') { }"}],[2796,{"text":"elsif ($proto eq 'icmp') { }"}],[2840,{"text":"if (my $cached = $protocols{$name}) { }"}],[2855,{"text":"if ($proto eq 'ip') { }"}],[2855,{"text":"elsif ($proto eq 'tcp') { }"}],[2855,{"text":"elsif ($proto eq 'udp') { }"}],[2855,{"text":"elsif ($proto eq 'icmp') { }"}],[2855,{"text":"elsif ($proto eq 'proto') { }"}],[2879,{"text":"if ($name) { }"}],[2892,{"text":"if ($flag =~ /^(?:reversed | stateless | oneway |\n\f                          src_net | dst_net |\n\f                          overlaps | no_check_supernet_rules )/x) { }"}],[2933,{"text":"if $private"}],[2938,{"text":"if check('user')"}],[2939,{"text":"if (my $sub_owner = check_assign('sub_owner', \\&read_identifier)) { }"}],[2939,{"text":"elsif (my(@other) = check_assign_list('overlaps', \\&read_typed_name)) { }"}],[2939,{"text":"elsif (my $visible = check_assign('visible', \\&read_owner_pattern)) { }"}],[2939,{"text":"elsif (check_flag('multi_owner')) { }"}],[2939,{"text":"elsif (check_flag('unknown_owner')) { }"}],[2939,{"text":"elsif (check_flag('has_unenforceable')) { }"}],[2939,{"text":"elsif (check_flag('disabled')) { }"}],[2967,{"text":"if (check('foreach'))"}],[2974,{"text":"if check('\\\\}')"}],[2981,{"text":"if (my(@list) = check_assign_list('log', \\&read_identifier))"}],[2985,{"text":"unless $src_user or $dst_user"}],[2987,{"text":"if ($$service{'foreach'} and not $src_user && $dst_user)"}],[2994,{"text":"$dst_user ? :"}],[2994,{"text":"$src_user ? :"}],[3002,{"text":"if $log"}],[2975,{"text":"if (my $action = check_permit_deny()) { }"}],[3018,{"text":"if $private"}],[3032,{"text":"if check('\\\\}')"}],[3034,{"text":"unless my $val_descr = $$attr_descr{$attribute}"}],[3040,{"text":"unless grep {$_ eq $val;} @$values"}],[3038,{"text":"if (my $values = $$val_descr{'values'}) { }"}],[3038,{"text":"elsif (my $fun = $$val_descr{'function'}) { }"}],[3055,{"text":"if (my $default = $$description{'default'}) { }"}],[3054,{"text":"unless (defined $$object{$attribute})"}],[3066,{"text":"if (exists $$map{$value})"}],[3064,{"text":"if (my $map = $$description{'map'})"}],[3153,{"text":"if $private"}],[3156,{"text":"if check('\\\\}')"}],[3161,{"text":"if $$crypto{'type'}"}],[3157,{"text":"if (check_flag('detailed_crypto_acl')) { }"}],[3157,{"text":"elsif (my $type = check_assign('type', \\&read_typed_name)) { }"}],[3169,{"text":"unless $$crypto{'type'}"}],[3182,{"text":"if check('\\\\}')"}],[3184,{"text":"if $$owner{'alias'}"}],[3189,{"text":"if $$owner{'admins'}"}],[3194,{"text":"if $$owner{'watchers'}"}],[3183,{"text":"if (my $alias = check_assign('alias', \\&read_string)) { }"}],[3183,{"text":"elsif (my(@admins) = check_assign_list('admins', \\&read_name)) { }"}],[3183,{"text":"elsif (my(@watchers) = check_assign_list('watchers', \\&read_name)) { }"}],[3183,{"text":"elsif (check_flag('extend_only')) { }"}],[3183,{"text":"elsif (check_flag('extend_unbounded')) { }"}],[3183,{"text":"elsif (check_flag('extend')) { }"}],[3183,{"text":"elsif (check_flag('show_all')) { }"}],[3215,{"text":"unless $$owner{'extend_only'} and $$owner{'watchers'}"}],[3214,{"text":"unless ($$owner{'admins'})"}],[3241,{"text":"unless my $pair = check_typed_name()"}],[3243,{"text":"unless my $descr = $global_type{$type}"}],[3248,{"text":"if (my $other = $$hash{$name})"}],[3270,{"text":"unless open my $fh, '<', $current_file"}],[3269,{"text":"if (defined $current_file) { }"}],[3295,{"text":"unless (defined $path and -d $path)"}],[3305,{"text":"unless opendir my $dh, $path"}],[3307,{"text":"if $file =~ /^\\./"}],[3308,{"text":"if $file =~ /$$Netspoc::Compiler::Pass1::config{'ignore_files'}/o"}],[3304,{"text":"if (-d $path) { }"}],[3325,{"text":"if ($private)"}],[3324,{"text":"if (my($name) = $path =~ m[([^/]*)\\.private$]) { }"}],[3338,{"text":"unless opendir my $dh, $path"}],[3344,{"text":"if $file =~ /^\\./"}],[3345,{"text":"if $file =~ /$$Netspoc::Compiler::Pass1::config{'ignore_files'}/o"}],[3348,{"text":"if $file =~ /^(config|raw)$/"}],[3390,{"text":"if $$rule{'stateless'}"}],[3391,{"text":"if $$rule{'stateless_icmp'}"}],[3392,{"text":"if $service"}],[3393,{"text":"$$rule{'deny'} ? :"}],[3398,{"text":"unless ref $$what eq 'ARRAY'"}],[3412,{"text":"$src_range ? :"}],[3443,{"text":"unless my $range = $$prt{$where}"}],[3446,{"text":"unless ($range_prt)"}],[3463,{"text":"defined $code ? :"}],[3463,{"text":"defined $type ? :"}],[3464,{"text":"unless $main_prt = $prt_hash{$proto}{$key}"}],[3468,{"text":"unless $main_prt = $prt_hash{$proto}"}],[3475,{"text":"unless $main_prt = $prt_hash{'proto'}{$key}"}],[3432,{"text":"if ($proto eq 'tcp' or $proto eq 'udp') { }"}],[3432,{"text":"elsif ($proto eq 'icmp') { }"}],[3432,{"text":"elsif ($proto eq 'ip') { }"}],[3478,{"text":"if ($main_prt)"}],[3494,{"text":"if (my $prt = $$hash{''})"}],[3501,{"text":"if (not defined $$prt{'type'}) { }"}],[3501,{"text":"elsif (defined $$prt{'code'}) { }"}],[3535,{"text":"unless $$a{'range'}[0] <=> $$b{'range'}[0]"}],[3553,{"text":"if $i == @sorted"}],[3559,{"text":"if ($a2 + 1 == $b1)"}],[3568,{"text":"if $a2 < $b1"}],[3580,{"text":"unless $i"}],[3573,{"text":"if ($a2 >= $b2)"}],[3599,{"text":"if ($i == @sorted)"}],[3607,{"text":"if ($a1 > $b1)"}],[3617,{"text":"if ($a2 < $b2)"}],[3623,{"text":"if ($a2 == $b2)"}],[3613,{"text":"if ($a1 == $b1)"}],[3665,{"text":"unless @sorted"}],[3673,{"text":"unless $a1 == 1 and $a2 == 65535"}],[3678,{"text":"if &$check_subrange($a, $a1, $a2, 1)"}],[3686,{"text":"if (not $prt) { }"}],[3686,{"text":"elsif (my $split = $$prt{'split'}) { }"}],[3745,{"text":"$$_{'prt'} ? :"}],[3790,{"text":"if (my $owner = $owners{$value})"}],[3789,{"text":"if (my $value = $$obj{$key})"}],[3805,{"text":"if ($$owner{'extend_only'})"}],[3804,{"text":"if (my $owner = link_to_owner($obj, $key))"}],[3826,{"text":"unless ($names)"}],[3831,{"text":"if ($$owner{'watching_owners'})"}],[3834,{"text":"if ($names eq 'recursive')"}],[3844,{"text":"unless ($owner_b)"}],[3842,{"text":"if (my($o_name) = $name =~ /^owner:(.*)$/) { }"}],[3876,{"text":"if $$owner{'alias'}"}],[3878,{"text":"if $$other{'alias'}"}],[3874,{"text":"if (my $other = $alias2owner{$alias}) { }"}],[3898,{"text":"unless $email =~ m[^ [\\w.!\\#$%&''*+/=?^_``{|}~-]+ \\@ [\\w.-]+ $]x"}],[3896,{"text":"unless do {\n\tuse bytes;\n$email eq 'guest' unless $email =~ m[^ [\\w.!\\#$%&''*+/=?^_``{|}~-]+ \\@ [\\w.-]+ $]x\n}"}],[3915,{"text":"if (my(@emails) = find_duplicates(@{$$owner{$attr};}))"}],[3921,{"text":"if (my(@duplicates) = find_duplicates(@{$$owner{'admins'};}, @{$$owner{'watchers'};}))"}],[3913,{"text":"if (find_duplicates(@{$$owner{'admins'};}, @{$$owner{'watchers'};}))"}],[3940,{"text":"if (my $router_attributes = $$area{'router_attributes'})"}],[3946,{"text":"unless $$router{'model'}{'has_vip'}"}],[3959,{"text":"unless my $pair = $$obj{'policy_distribution_point'}"}],[3961,{"text":"if ($type ne 'host')"}],[3970,{"text":"unless ($host)"}],[3984,{"text":"unless my $list = $$obj{'general_permit'}"}],[3990,{"text":"ref $a eq 'ARRAY' ? :"}],[3990,{"text":"ref $b eq 'ARRAY' ? :"}],[4008,{"text":"unless $range = $$prt{'range'}"}],[4003,{"text":"if (ref $prt eq 'ARRAY') { }"}],[4012,{"text":"if (my $flags = $$orig_prt{'flags'})"}],[4015,{"text":"if ($src_range or $range and $range ne $aref_tcp_any)"}],[4018,{"text":"if (@reason)"}],[4035,{"text":"if (is_network($obj)) { }"}],[4033,{"text":"if (@elements == 1) { }"}],[4055,{"text":"unless $$area{$attr}"}],[4060,{"text":"unless $$router{'managed'}"}],[4065,{"text":"if (my $main_interface = $$obj{'main_interface'})"}],[4058,{"text":"if (is_interface($obj)) { }"}],[4030,{"text":"if ($$area{'anchor'}) { }"}],[4079,{"text":"if (my $router_attributes = $$area{'router_attributes'})"}],[4097,{"text":"if ($$interface{'disabled'}) { }"}],[4094,{"text":"unless ($network)"}],[4119,{"text":"unless $private1 eq $private2"}],[4118,{"text":"if (my $private2 = $$interface{'private'}) { }"}],[4117,{"text":"if (my $private1 = $$network{'private'})"}],[4154,{"text":"unless $network_ip eq 'unnumbered'"}],[4175,{"text":"unless (match_ip($ip, $network_ip, $mask))"}],[4180,{"text":"unless ($$network{'loopback'})"}],[4190,{"text":"if ($ip == $network_ip)"}],[4194,{"text":"if ($ip == $broadcast)"}],[4179,{"text":"if ($mask == 4294967295) { }"}],[4147,{"text":"if ($ip =~ /^(?:short|tunnel)$/) { }"}],[4147,{"text":"elsif ($ip eq 'unnumbered') { }"}],[4147,{"text":"elsif ($network_ip eq 'unnumbered') { }"}],[4147,{"text":"elsif ($ip eq 'negotiated') { }"}],[4147,{"text":"elsif ($ip eq 'bridged') { }"}],[4218,{"text":"ref $parent ? :"}],[4218,{"text":"!$parent ? :"}],[4222,{"text":"unless $$object{'subnet_of'}"}],[4224,{"text":"if ($type ne 'network')"}],[4233,{"text":"unless ($network)"}],[4250,{"text":"if ($ip eq 'unnumbered')"}],[4261,{"text":"unless (match_ip($sub_ip, $ip, $mask))"}],[4273,{"text":"unless my $nat = $$obj{'nat'}"}],[4291,{"text":"unless $$router{'managed'}"}],[4304,{"text":"unless (is_interface($obj))"}],[4319,{"text":"unless $$router{'managed'}"}],[4322,{"text":"if $$obj{'main_interface'}"}],[4330,{"text":"if $private eq $obj_p"}],[4329,{"text":"if (my $obj_p = $$obj{'private'})"}],[4336,{"text":"if (my $obj_p = $$obj{'private'})"}],[4328,{"text":"if ($private) { }"}],[4342,{"text":"if ($no_private)"}],[4346,{"text":"if ($changed)"}],[4350,{"text":"if ($count == 1) { }"}],[4350,{"text":"elsif ($count == 0) { }"}],[4365,{"text":"unless $$interface{'spoke'} or $$interface{'hub'}"}],[4369,{"text":"if $$interface{'no_check'}"}],[4373,{"text":"unless $real_intf"}],[4374,{"text":"unless $real_intf eq $interface"}],[4403,{"text":"if $$virtual1{'disabled'}"}],[4411,{"text":"if ($type1 ne $type2)"}],[4416,{"text":"unless ($id1 eq ($$virtual2{'redundancy_id'} || ''))"}],[4434,{"text":"if (my $virtual2 = $net2id2type2virtual{$net}{$id1}{$type1}) { }"}],[4433,{"text":"if ($id1)"}],[4408,{"text":"if (my $interfaces = $net2ip2virtual{$net}{$ip}) { }"}],[4458,{"text":"if @$interfaces <= 2"}],[4463,{"text":"if $$interface{'main_interface'}"}],[4464,{"text":"unless my $restricts = $$interface{'path_restrict'}"}],[4466,{"text":"if $seen{$restrict}"}],[4470,{"text":"if @restrict_routers == @virt_routers"}],[4475,{"text":"if (grep {$_ eq $router;} @restrict_routers)"}],[4499,{"text":"if ($$router{'managed'} or $$router{'routing_only'})"}],[4517,{"text":"unless my $group = $$interfaces[0]{'redundancy_interfaces'}"}],[4518,{"text":"unless $$_{'redundancy_interfaces'}"}],[4525,{"text":"if ($$network{'ip'} eq 'unnumbered' and $$network{'interfaces'} and @{$$network{'interfaces'};} > 2)"}],[4548,{"text":"if (1 < @{$$interface{'router'}{'interfaces'};})"}],[4555,{"text":"if ($$router{'managed'} || $$router{'routing_only'} and not $$interface{'routing'})"}],[4561,{"text":"unless ($$old_intf{'redundant'} and $$interface{'redundant'})"}],[4560,{"text":"if (my $old_intf = $ip2obj{$ip}) { }"}],[4553,{"text":"unless ($ip =~ /^(?:unnumbered|negotiated|tunnel|bridged)$/)"}],[4545,{"text":"if ($ip eq 'short') { }"}],[4573,{"text":"if ($short_intf and $route_intf)"}],[4582,{"text":"if (my $other_device = $ip2obj{$ip}) { }"}],[4592,{"text":"if (my $other_device = $range2obj{$from}{$to}) { }"}],[4581,{"text":"if (my $ip = $$host{'ip'}) { }"}],[4581,{"text":"elsif (my $range = $$host{'range'}) { }"}],[4605,{"text":"unless is_host($other_device)"}],[4604,{"text":"if (my $other_device = $ip2obj{$ip})"}],[4602,{"text":"if (my $range = $$host{'range'})"}],[4658,{"text":"if (not $network or $$network{'disabled'})"}],[4668,{"text":"if $interface eq $in_interface"}],[4671,{"text":"if ($$interface{'disabled'})"}],[4680,{"text":"if $out_interface eq $interface"}],[4708,{"text":"unless my $prefix = $$network{'bridged'}"}],[4713,{"text":"unless $$network{'disabled'}"}],[4712,{"text":"if (my $network = $networks{$prefix})"}],[4721,{"text":"unless @group"}],[4730,{"text":"unless $ip == $ip1 and $mask == $mask1"}],[4735,{"text":"if $$in_intf{'ip'} ne 'bridged'"}],[4737,{"text":"if $seen{$router}"}],[4741,{"text":"unless match_ip($$layer3_intf{'ip'}, $ip, $mask)"}],[4740,{"text":"if (my $layer3_intf = $$in_intf{'layer3_interface'})"}],[4746,{"text":"if $out_intf eq $in_intf"}],[4747,{"text":"if $$out_intf{'ip'} ne 'bridged'"}],[4749,{"text":"unless $$href{$next_net}"}],[4753,{"text":"unless $count > 1"}],[4758,{"text":"unless $$href{$network} eq 'connected'"}],[4772,{"text":"if $$interface{'router'}{'disabled'}"}],[4774,{"text":"if ($$interface{'router'}{'disabled'})"}],[4789,{"text":"if ($$router{'managed'} or $$router{'routing_only'})"}],[4802,{"text":"unless my $borders = $$area{$attr}"}],[4803,{"text":"if (my(@active_borders) = grep({not $$_{'disabled'};} @$borders))"}],[4797,{"text":"if (my $anchor = $$area{'anchor'}) { }"}],[4809,{"text":"if ($ok) { }"}],[4818,{"text":"if $$router{'disabled'}"}],[4820,{"text":"if ($$router{'managed'}) { }"}],[4820,{"text":"elsif ($$router{'routing_only'}) { }"}],[4832,{"text":"if $$router{'orig_router'}"}],[4837,{"text":"if @$aref == 1"}],[4838,{"text":"$$_{'managed'} || $$_{'routing_only'} ? :"}],[4840,{"text":"unless equal(map({$$_{'managed'} || $$_{'routing_only'} ? $$_{'model'}{'name'} : ();} @$aref))"}],[4854,{"text":"if (my $other = $hardware{$name}) { }"}],[4879,{"text":"if $$interface{'disabled'}"}],[4881,{"text":"unless $seen{$network}++"}],[4887,{"text":"if $$network{'disabled'}"}],[4889,{"text":"if (keys %networks > 1) { }"}],[4888,{"text":"unless ($seen{$network})"}],[4920,{"text":"if (($low & $mask) == 0 and $low + $mask <= $high)"}],[4952,{"text":"unless ($$nat2{$name} and $$nat{$name} eq $$nat2{$name})"}],[4948,{"text":"if (keys %$nat == keys %$nat2) { }"}],[4942,{"text":"if ($nat xor $nat2) { }"}],[4942,{"text":"elsif ($nat and $nat2) { }"}],[4965,{"text":"if $nat_error"}],[4968,{"text":"unless owner_eq($host, $other_subnet)"}],[4976,{"text":"if $$network{'ip'} =~ /^(?:unnumbered|tunnel)$/"}],[4989,{"text":"unless $user"}],[4988,{"text":"if (my($user, $dom) = $id =~ /^(.*?)(\\@.*)$/) { }"}],[4987,{"text":"if ($id)"}],[5004,{"text":"if (@ip_mask > 1) { }"}],[5004,{"text":"elsif ($ip_mask[0][1] == 4294967295) { }"}],[5004,{"text":"elsif ($id =~ /^.+\\@/) { }"}],[5003,{"text":"if ($id)"}],[4985,{"text":"if (my $ip = $$host{'ip'}) { }"}],[4985,{"text":"elsif ($$host{'range'}) { }"}],[5035,{"text":"if $nat"}],[5036,{"text":"if $private"}],[5037,{"text":"if $owner"}],[5038,{"text":"if ($id)"}],[5023,{"text":"if (my $other_subnet = $inv_prefix_aref[$inv_prefix]{$ip}) { }"}],[5053,{"text":"unless my $ip2subnet = $inv_prefix_aref[$i]"}],[5061,{"text":"if (my $up = $inv_prefix_aref[$j]{$ip})"}],[5129,{"text":"if $private"}],[5128,{"text":"if (my $private = $$subnet{'private'})"}],[5106,{"text":"if ($up_inv_prefix >= $network_inv_prefix) { }"}],[5106,{"text":"elsif ($up_inv_prefix < @inv_prefix_aref and $up = $inv_prefix_aref[$up_inv_prefix]{$ip}) { }"}],[5102,{"text":"if (my $neighbor = $$ip2subnet{$next_ip})"}],[5082,{"text":"if (not $$subnet{'nat'} || $$subnet{'id'} and $ip % $modulo == 0)"}],[5076,{"text":"if (my $ip2subnet = $inv_prefix_aref[$i])"}],[5149,{"text":"if $$router{'managed'} or $$router{'routing_only'}"}],[5166,{"text":"unless ($hash{$up})"}],[5164,{"text":"if ($neighbor = $$subnet{'neighbor'} and $hash{$neighbor})"}],[5174,{"text":"if (@extra) { }"}],[5190,{"text":"unless $$a{'mask'} <=> $$b{'mask'}"}],[5212,{"text":"if (my $orig_router = $$router{'orig_router'}) { }"}],[5212,{"text":"elsif (my $orig_interfaces = $$router{'orig_interfaces'}) { }"}],[5231,{"text":"if (is_router($object)) { }"}],[5244,{"text":"if $$object{'disabled'}"}],[5229,{"text":"unless ($result)"}],[5271,{"text":"if $$obj{'disabled'}"}],[5285,{"text":"unless ($other)"}],[5297,{"text":"if (!$$other{'network'} eq $network)"}],[5296,{"text":"if (not $other and $other = $$info{'i'}{$router})"}],[5282,{"text":"if (is_router($auto)) { }"}],[5274,{"text":"if ($type eq 'Interface') { }"}],[5274,{"text":"elsif ($type eq 'Autointerface') { }"}],[5305,{"text":"if ($other)"}],[5316,{"text":"if (ref $val) { }"}],[5342,{"text":"$$element[0] eq '!' ? :"}],[5351,{"text":"if ($$element[0] eq '!') { }"}],[5358,{"text":"unless @non_compl >= 1"}],[5369,{"text":"if ($$result{$element})"}],[5376,{"text":"if $$element{'disabled'}"}],[5377,{"text":"unless delete $$result{$element}"}],[5394,{"text":"ref $elements eq 'ARRAY' ? :"}],[5399,{"text":"unless ref $ext"}],[5405,{"text":"if $$object{'disabled'}"}],[5415,{"text":"unless $$object{'mask'} == 0"}],[5423,{"text":"unless $$_{'router'}{'managed'}"}],[5410,{"text":"if ($$object{'is_aggregate'}) { }"}],[5410,{"text":"elsif ($managed) { }"}],[5434,{"text":"if ($$object{'is_aggregate'}) { }"}],[5409,{"text":"if ($selector eq 'all') { }"}],[5446,{"text":"if ($managed and not $$router{'managed'} || $$router{'routing_only'}) { }"}],[5446,{"text":"elsif ($selector eq 'all') { }"}],[5477,{"text":"unless ($seen{$router})"}],[5485,{"text":"unless $$_{'managed'}"}],[5492,{"text":"$r ? :"}],[5482,{"text":"if ($managed) { }"}],[5495,{"text":"if ($selector eq 'all') { }"}],[5505,{"text":"if ($managed and not $$obj{'managed'} || $$obj{'routing_only'}) { }"}],[5505,{"text":"elsif ($selector eq 'all') { }"}],[5504,{"text":"if (is_router($obj)) { }"}],[5408,{"text":"if ($type eq 'Network') { }"}],[5408,{"text":"elsif ($type eq 'Interface') { }"}],[5408,{"text":"elsif ($type eq 'Area') { }"}],[5408,{"text":"elsif ($type eq 'Autointerface') { }"}],[5536,{"text":"if $managed"}],[5537,{"text":"if ($selector eq 'all') { }"}],[5533,{"text":"if (my $router = $routers{$name}) { }"}],[5398,{"text":"if (ref $name) { }"}],[5398,{"text":"elsif (ref $ext) { }"}],[5398,{"text":"elsif (my $interface = $interfaces{\"$name.$ext\"}) { }"}],[5563,{"text":"$clean_autogrp ? :"}],[5576,{"text":"if ($type eq 'Area') { }"}],[5576,{"text":"elsif ($type eq 'Network' and $$object{'is_aggregate'}) { }"}],[5597,{"text":"if (not $$object{'is_aggregate'}) { }"}],[5615,{"text":"$$_{'is_aggregate'} ? :"}],[5593,{"text":"if ($type eq 'Host' or $type eq 'Interface') { }"}],[5593,{"text":"elsif ($type eq 'Network') { }"}],[5593,{"text":"elsif (my $aggregates = &$get_aggregates($object, 0, 0)) { }"}],[5633,{"text":"if ($$object{'is_managed_host'}) { }"}],[5644,{"text":"if (my $managed_hosts = $$network{'managed_hosts'})"}],[5629,{"text":"if ($type eq 'Host') { }"}],[5629,{"text":"elsif ($type eq 'Interface') { }"}],[5629,{"text":"elsif (my $networks = &$get_networks($object)) { }"}],[5654,{"text":"if ($managed)"}],[5660,{"text":"if $ext"}],[5679,{"text":"if (@$interfaces > 1)"}],[5675,{"text":"if ($$intf{'router'}{'managed'}) { }"}],[5672,{"text":"if ($$_{'loopback'}) { }"}],[5692,{"text":"$clean_autogrp ? :"}],[5663,{"text":"if (my $networks = &$get_networks($object)) { }"}],[5707,{"text":"$ext ? :"}],[5710,{"text":"if (my $aggregates = &$get_aggregates($object, $ip, $mask)) { }"}],[5710,{"text":"elsif (my $networks = &$get_networks($object)) { }"}],[5624,{"text":"if ($type eq 'host') { }"}],[5624,{"text":"elsif ($type eq 'network') { }"}],[5624,{"text":"elsif ($type eq 'any') { }"}],[5738,{"text":"if $ext"}],[5746,{"text":"$clean_autogrp ? :"}],[5778,{"text":"unless $private1 eq $private2"}],[5777,{"text":"if (my $private2 = $$element{'private'})"}],[5790,{"text":"if ($unique{$obj}++)"}],[5795,{"text":"if (@duplicate)"}],[5752,{"text":"if ($$object{'recursive'}) { }"}],[5752,{"text":"elsif (not $elements) { }"}],[5743,{"text":"if (is_group($object)) { }"}],[5743,{"text":"elsif ($$object{'is_aggregate'} and $$object{'zone'}{'zone_cluster'}) { }"}],[5337,{"text":"if ($type eq '&') { }"}],[5337,{"text":"elsif ($type eq '!') { }"}],[5337,{"text":"elsif ($type eq 'user') { }"}],[5337,{"text":"elsif ($type eq 'interface') { }"}],[5337,{"text":"elsif (ref $name) { }"}],[5337,{"text":"elsif (my $object = $name2object{$type}{$name}) { }"}],[5834,{"text":"if ($seen{$obj}++)"}],[5839,{"text":"if (@duplicate)"}],[5856,{"text":"if ($$object{'disabled'})"}],[5861,{"text":"if $changed"}],[5883,{"text":"if ($$object{'is_tunnel'}) { }"}],[5883,{"text":"elsif ($$object{'has_id_hosts'}) { }"}],[5876,{"text":"if ($$object{'ip'} eq 'unnumbered') { }"}],[5876,{"text":"elsif ($$object{'crosslink'}) { }"}],[5876,{"text":"elsif ($$object{'is_aggregate'}) { }"}],[5892,{"text":"if ($$object{'ip'} =~ /^(short|unnumbered)$/)"}],[5875,{"text":"if (is_network($object)) { }"}],[5875,{"text":"elsif (is_interface($object)) { }"}],[5875,{"text":"elsif (is_area($object)) { }"}],[5899,{"text":"if ($ignore)"}],[5905,{"text":"if $changed"}],[5912,{"text":"$print_type eq 'warn' ? :"}],[5915,{"text":"if $$value{'is_used'}"}],[5919,{"text":"if (my $conf = $$Netspoc::Compiler::Pass1::config{'check_unused_groups'})"}],[5924,{"text":"if (my $conf = $$Netspoc::Compiler::Pass1::config{'check_unused_protocols'})"}],[5947,{"text":"if (ref $pair eq 'HASH')"}],[5954,{"text":"if (my $prt = $protocols{$name}) { }"}],[5968,{"text":"if ($elements eq 'recursive') { }"}],[5968,{"text":"elsif (not $$prtgroup{'is_used'}) { }"}],[5966,{"text":"if (my $prtgroup = $protocolgroups{$name}) { }"}],[5953,{"text":"if ($type eq 'protocol') { }"}],[5953,{"text":"elsif ($type eq 'protocolgroup') { }"}],[6007,{"text":"unless ($proto eq 'tcp' or $proto eq 'udp')"}],[6023,{"text":"unless ($aref_list)"}],[6021,{"text":"if ($src_range or $$prt{'flags'} or $$dst_range{'name'} ne $$prt{'name'}) { }"}],[6051,{"text":"unless my $log = $$router{'log'}"}],[6062,{"text":"if $known_log{$tag}"}],[6119,{"text":"if ($$interface{'ip'} eq 'short') { }"}],[6119,{"text":"elsif ($$interface{'ip'} eq 'unnumbered') { }"}],[6135,{"text":"if (my($result0) = grep({aref_eq($result, $_);} values %path2result)) { }"}],[6116,{"text":"unless ($result)"}],[6147,{"text":"@$_ ? :"}],[6161,{"text":"unless is_autointerface($src)"}],[6166,{"text":"if (1 == @$tuple_list)"}],[6197,{"text":"if (ref $prt eq 'ARRAY') { }"}],[6197,{"text":"elsif (my $main_prt = $$prt{'main'}) { }"}],[6204,{"text":"$orig_prt ? :"}],[6206,{"text":"if ($src_range) { }"}],[6205,{"text":"if ($orig_prt)"}],[6218,{"text":"$src_net || $dst_net ? :"}],[6219,{"text":"if $_ ne 'src_net'"}],[6219,{"text":"if (keys %$flags and grep {$_ ne 'dst_net' if $_ ne 'src_net';} keys %$flags or $src_range) { }"}],[6244,{"text":"unless $src_p and $src_p eq $private or $dst_p and $dst_p eq $private"}],[6252,{"text":"if $$src{'private'}"}],[6257,{"text":"if $$dst{'private'}"}],[6241,{"text":"if ($private) { }"}],[6276,{"text":"$deny ? :"}],[6280,{"text":"if (@$log) { }"}],[6278,{"text":"if ($log)"}],[6290,{"text":"unless @$prt_list"}],[6293,{"text":"$foreach ? :"}],[6304,{"text":"unless @$src_list"}],[6305,{"text":"if $$service{'disabled'}"}],[6307,{"text":"unless @$dst_list"}],[6310,{"text":"unless @$src_list or @extra_src_dst"}],[6314,{"text":"if (@$src_list and @$dst_list) { }"}],[6314,{"text":"elsif (not @extra_src_dst) { }"}],[6335,{"text":"if $deny"}],[6336,{"text":"if $log"}],[6337,{"text":"if $src_dst_net"}],[6327,{"text":"if ($simple_prt_list)"}],[6342,{"text":"$$flags{'reversed'} ? :"}],[6353,{"text":"if $deny"}],[6354,{"text":"if $log"}],[6355,{"text":"if $src_range"}],[6356,{"text":"if $$flags{'reversed'}"}],[6357,{"text":"if $$flags{'stateless'}"}],[6358,{"text":"if $$flags{'oneway'}"}],[6359,{"text":"if $$flags{'no_check_supernet_rules'}"}],[6361,{"text":"if $$flags{'stateless_icmp'}"}],[6363,{"text":"if $src_dst_net"}],[6391,{"text":"if (!$type eq 'service') { }"}],[6391,{"text":"elsif (my $other = $services{$oname}) { }"}],[6387,{"text":"if (my $overlaps = $$service{'overlaps'})"}],[6412,{"text":"unless (grep {/^$prefix/;} keys %owners)"}],[6411,{"text":"if ($prefix)"}],[6410,{"text":"if (my($prefix) = $visible =~ /^ (\\S*) [*] $/x)"}],[6409,{"text":"if (my $visible = $$service{'visible'})"}],[6437,{"text":"if (my $cluster = $$zone{'zone_cluster'})"}],[6443,{"text":"if $$zone{'owner'}"}],[6450,{"text":"if $$network{'ip'} eq 'tunnel'"}],[6452,{"text":"unless $net_owner"}],[6454,{"text":"if $net_owner ne $owner"}],[6453,{"text":"if ($owner) { }"}],[6460,{"text":"if ($owner)"}],[6472,{"text":"unless my(@implicit_owner_zones) = grep({$zone_got_net_owners{$_};} @$cluster)"}],[6474,{"text":"unless (@implicit_owner_zones == @$cluster and equal(map({$$_{'owner'};} @implicit_owner_zones)))"}],[6492,{"text":"unless my(@areas) = values %{$$zone{'areas'};}"}],[6515,{"text":"if (my $super = $$area{'subset_of'})"}],[6523,{"text":"if ($zone2area{$zone} eq $area)"}],[6537,{"text":"unless ($$router{'managed'} or $$router{'routing_only'})"}],[6548,{"text":"unless my $subnets = $$network{'networks'}"}],[6585,{"text":"unless ($zone_got_net_owners{$upper_node})"}],[6594,{"text":"if ($$upper_owner{'extend'})"}],[6584,{"text":"if ($owner eq $upper_owner) { }"}],[6583,{"text":"if ($upper_owner)"}],[6600,{"text":"if $extend"}],[6601,{"text":"if $extend_only"}],[6578,{"text":"if (not $owner) { }"}],[6605,{"text":"if (my $upper_extend = $$extend_only[0])"}],[6604,{"text":"unless ($owner and $$owner{'extend_only'})"}],[6610,{"text":"if ($owner and $$owner{'extend_only'}) { }"}],[6610,{"text":"elsif ($owner) { }"}],[6619,{"text":"unless my $childs = $tree{$node}"}],[6638,{"text":"if $zone_got_net_owners{$node}"}],[6642,{"text":"$owner_list eq $ext ? :"}],[6647,{"text":"if $$e_owner{'extend_unbounded'}"}],[6648,{"text":"if grep {$e_owner eq $_;} @$other"}],[6640,{"text":"if ($node1) { }"}],[6664,{"text":"if ($combined and @$combined)"}],[6671,{"text":"if ($node_owner ne $owner)"}],[6675,{"text":"if (@invalid)"}],[6667,{"text":"if ($$owner{'show_all'})"}],[6690,{"text":"unless my $attributes = $$area{'router_attributes'}"}],[6691,{"text":"unless my $owner = $$attributes{'owner'}"}],[6695,{"text":"if ($r_owner eq $owner)"}],[6694,{"text":"if (my $r_owner = $$router{'owner'}) { }"}],[6709,{"text":"unless my $owner = $$router{'owner'}"}],[6724,{"text":"unless $$interface{'loopback'}"}],[6725,{"text":"unless my $owner = $$interface{'owner'}"}],[6728,{"text":"if $managed"}],[6739,{"text":"if $$aggregate{'owner'}"}],[6742,{"text":"unless $$up{'is_aggregate'}"}],[6744,{"text":"$up ? :"}],[6757,{"text":"$$Netspoc::Compiler::Pass1::config{'check_service_unknown_owner'} eq 'warn' ? :"}],[6765,{"text":"if ($unknown2services{$up} and $unknown2services{$obj} eq $unknown2services{$up})"}],[6783,{"text":"unless my $rules = $service_rules{$action}"}],[6802,{"text":"$has_user eq 'src' ? :"}],[6798,{"text":"if ($has_user eq 'both') { }"}],[6798,{"text":"elsif ($$rule{'reversed'}) { }"}],[6807,{"text":"if $what eq $has_user"}],[6825,{"text":"if ($owner) { }"}],[6840,{"text":"if keys %$service_owners == 1 and $$service_owners{$sub_owner}"}],[6838,{"text":"if (my $sub_owner = $$service{'sub_owner'})"}],[6845,{"text":"$$info{'is_coupling'} ? :"}],[6858,{"text":"$$Netspoc::Compiler::Pass1::config{'check_service_multi_owner'} eq 'warn' ? :"}],[6858,{"text":"$$Netspoc::Compiler::Pass1::config{'check_service_multi_owner'} ? :"}],[6849,{"text":"if ($$service{'multi_owner'}) { }"}],[6848,{"text":"if ($multi_count > 1 xor $$service{'multi_owner'})"}],[6874,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_service_unknown_owner'})"}],[6870,{"text":"if ($$service{'unknown_owner'}) { }"}],[6867,{"text":"if ($unknown_owners and keys %$unknown_owners xor $$service{'unknown_owner'})"}],[6887,{"text":"unless delete $$owner{'is_used'}"}],[6910,{"text":"if ($$obj{'id'})"}],[6917,{"text":"if ($$obj{'router'}{'managed'} or $$obj{'loopback'})"}],[6905,{"text":"if ($type eq 'Network') { }"}],[6905,{"text":"elsif ($type eq 'Host') { }"}],[6905,{"text":"elsif ($type eq 'Interface') { }"}],[6926,{"text":"if $$network{'ip'} eq 'unnumbered'"}],[6935,{"text":"unless my $rules = $service_rules{$action}"}],[6939,{"text":"if ($src_net)"}],[6942,{"text":"if ($dst_net)"}],[6937,{"text":"if (my $src_dst_net = delete $$rule{'src_dst_net'})"}],[6954,{"text":"unless (is_host($obj))"}],[6968,{"text":"unless ($$network{'has_id_hosts'} or $subnet_warning_seen{$subnet}++)"}],[6966,{"text":"if ($$subnet{'mask'} == $$subnet{'network'}{'mask'}) { }"}],[6966,{"text":"elsif (my $host = $subnet2host{$subnet}) { }"}],[7014,{"text":"if ($$zone{'has_unenforceable'})"}],[7029,{"text":"if $src eq $dst"}],[7039,{"text":"$$src{'ip'} > $$dst{'ip'} ? :"}],[7042,{"text":"if ($$a{'ip'} + complement_32bit($$a{'mask'}) + 1 == $$b{'ip'})"}],[7038,{"text":"if ($$src{'network'} eq $$dst{'network'})"}],[7031,{"text":"if (is_subnet($src) and is_subnet($dst)) { }"}],[7031,{"text":"elsif ($$src{'is_aggregate'} and $$dst{'is_aggregate'} and $$src{'ip'} == $$dst{'ip'} and $$src{'mask'} == $$dst{'mask'}) { }"}],[7031,{"text":"elsif ($$src{'is_aggregate'} and $$src{'mask'} == 0) { }"}],[7031,{"text":"elsif ($$dst{'is_aggregate'} and $$dst{'mask'} == 0) { }"}],[7031,{"text":"elsif ($$dst{'managed_hosts'}) { }"}],[7082,{"text":"if ($$service{'has_unenforceable'} and not $$service{'seen_unenforceable'} && $$service{'seen_enforceable'})"}],[7088,{"text":"unless $$Netspoc::Compiler::Pass1::config{'check_unenforceable'}"}],[7089,{"text":"if $$service{'disabled'}"}],[7091,{"text":"$$Netspoc::Compiler::Pass1::config{'check_unenforceable'} eq 'warn' ? :"}],[7099,{"text":"if ($$service{'seen_unenforceable'} or $$service{'silent_unenforceable'})"}],[7096,{"text":"unless (delete $$service{'seen_enforceable'})"}],[7106,{"text":"if $$service{'has_unenforceable'}"}],[7108,{"text":"if (my $hash = delete $$service{'seen_unenforceable'})"}],[7124,{"text":"unless $$zone{'has_unenforceable'}"}],[7125,{"text":"if $$zone{'seen_unenforceable'}"}],[7127,{"text":"$agg00 ? :"}],[7140,{"text":"if (zone_eq($src_zone, $dst_zone)) { }"}],[7166,{"text":"unless $element0"}],[7170,{"text":"if (grep {$path0 ne ($obj2path{$_} || get_path($_));} @$group) { }"}],[7208,{"text":"unless my $rules = $service_rules{$action}"}],[7247,{"text":"if ($old_rule)"}],[7268,{"text":"if ($type eq 'Autointerface')"}],[7280,{"text":"if ($$obj{'router'}{'managed'}) { }"}],[7290,{"text":"if ($$obj{'managed'}) { }"}],[7273,{"text":"if ($type eq 'Network') { }"}],[7273,{"text":"elsif ($type eq 'Subnet') { }"}],[7273,{"text":"elsif ($type eq 'Interface') { }"}],[7273,{"text":"elsif ($type eq 'Router') { }"}],[7273,{"text":"elsif ($type eq 'Zone') { }"}],[7273,{"text":"elsif ($type eq 'Host') { }"}],[7316,{"text":"unless my $managed_hosts = $$object{'managed_hosts'}"}],[7319,{"text":"if (@extra)"}],[7327,{"text":"unless @duplicate_rules"}],[7335,{"text":"if $$prt1{'flags'}{'overlaps'} and $$prt2{'flags'}{'overlaps'}"}],[7341,{"text":"if ($oservice eq $overlap)"}],[7339,{"text":"if (my $overlaps = $$service{'overlaps'})"}],[7349,{"text":"if ($service eq $overlap)"}],[7347,{"text":"if (my $overlaps = $$oservice{'overlaps'})"}],[7365,{"text":"unless my $action = $$Netspoc::Compiler::Pass1::config{'check_duplicate_rules'}"}],[7366,{"text":"$action eq 'warn' ? :"}],[7386,{"text":"if $$prt1{'flags'}{'overlaps'} and $$prt2{'flags'}{'overlaps'}"}],[7392,{"text":"if ($oservice eq $overlap)"}],[7390,{"text":"if (my $overlaps = $$service{'overlaps'})"}],[7403,{"text":"unless @redundant_rules"}],[7422,{"text":"unless my $action = $$Netspoc::Compiler::Pass1::config{'check_redundant_rules'}"}],[7423,{"text":"$action eq 'warn' ? :"}],[7445,{"text":"if $$service{'disabled'}"}],[7449,{"text":"if $$overlap{'disabled'}"}],[7450,{"text":"unless $$used{$overlap}"}],[7446,{"text":"if (my $overlaps = $$service{'overlaps'})"}],[7532,{"text":"unless $p1 <= 22 and 22 <= $p2"}],[7544,{"text":"if ($is_pdp_src = $host2is_pdp_src{$host})"}],[7558,{"text":"if is_zone($dst_path)"}],[7560,{"text":"unless my $pdp = $$router{'policy_distribution_point'}"}],[7561,{"text":"unless grep {$is_admin_prt{$_};} @{$$rule{'prt'};}"}],[7563,{"text":"unless grep {$$is_pdp_src{$_};} @{$$rule{'src'};}"}],[7568,{"text":"unless my $pdp = $$router{'policy_distribution_point'}"}],[7584,{"text":"if ($$found_interfaces{$front})"}],[7591,{"text":"unless (@result)"}],[7598,{"text":"unless @result"}],[7573,{"text":"if (keys %$found_interfaces == 1) { }"}],[7613,{"text":"if $seen{$router}"}],[7614,{"text":"unless $$router{'policy_distribution_point'}"}],[7615,{"text":"if $$router{'orig_router'}"}],[7618,{"text":"unless ($$member{'admin_ip'})"}],[7626,{"text":"unless !$$a{'admin_ip'} <=> !$$b{'admin_ip'}"}],[7635,{"text":"unless $$router{'admin_ip'}"}],[7616,{"text":"if (my $vrf_members = $$router{'vrf_members'}) { }"}],[7642,{"text":"if ($count > 4)"}],[7640,{"text":"if (@unreachable)"}],[7668,{"text":"if $$network{'nat_domain'}"}],[7676,{"text":"if $interface eq $in_interface"}],[7677,{"text":"if $$interface{'main_interface'}"}],[7688,{"text":"if aref_eq($nat_tags, $entry_nat_tags)"}],[7691,{"text":"if $$router{'nat_err_seen'}{\"$names1 $names2\"}++"}],[7687,{"text":"if (my $entry_nat_tags = $$router{'active_path'})"}],[7708,{"text":"if $out_interface eq $interface"}],[7709,{"text":"if $$out_interface{'main_interface'}"}],[7714,{"text":"if (aref_eq($out_nat_tags, $nat_tags)) { }"}],[7714,{"text":"elsif (not $$router{'nat_tags'}{$domain}) { }"}],[7729,{"text":"if ($useless_nat and @$nat_tags and grep {not $$_{'hub'} || $$_{'spoke'};} @$interfaces)"}],[7750,{"text":"if ($$domain{'active_path'})"}],[7759,{"text":"if $$nat_set{$nat_tag}"}],[7766,{"text":"if ($$nat_set{$nat_tag2})"}],[7763,{"text":"if (my $aref = $$nat_tags2multi{$nat_tag})"}],[7783,{"text":"unless my $nat = $$network{'nat'}"}],[7784,{"text":"unless $$nat{$nat_tag}"}],[7802,{"text":"if $router eq $in_router"}],[7807,{"text":"if grep {$_ eq $nat_tag;} @$in_nat_tags"}],[7812,{"text":"if $out_domain eq $domain"}],[7819,{"text":"if ($$router{'active_path'})"}],[7816,{"text":"if (grep {$_ eq $nat_tag;} @$out_nat_tags)"}],[7833,{"text":"if $out_domain eq $domain"}],[7841,{"text":"if $nat_tag2 eq $nat_tag"}],[7842,{"text":"unless $$href{$nat_tag2}"}],[7863,{"text":"unless ($$next_info{'dynamic'})"}],[7854,{"text":"if ($$nat_info{'hidden'}) { }"}],[7854,{"text":"elsif ($$nat_info{'dynamic'}) { }"}],[7838,{"text":"if (my $aref = $$nat_tags2multi{$nat_tag})"}],[7878,{"text":"if (my $err_path = distribute_nat1($out_domain, $nat_tag, $nat_tags2multi, $router))"}],[7894,{"text":"if (my $err_path = distribute_nat1($domain, $nat_tag, $nat_tags2multi, $in_router))"}],[7912,{"text":"unless my $href = $$network{'nat'}"}],[7915,{"text":"unless ($$nat_network{'hidden'})"}],[7948,{"text":"unless my $href = $$network{'nat'}"}],[7956,{"text":"if $err_shown"}],[7983,{"text":"unless keys_eq($href, $href2)"}],[7981,{"text":"if ($has_non_hidden{$nat_tag})"}],[7991,{"text":"if keys_eq($href, $href2)"}],[7999,{"text":"if $nat_tag2 eq $nat_tag"}],[8003,{"text":"if $all_hidden{$href2}"}],[8007,{"text":"if ($$href2{$nat_tag2})"}],[8015,{"text":"unless ($$href2{$nat_tag2})"}],[8006,{"text":"if ($has_non_hidden{$nat_tag2}) { }"}],[7995,{"text":"if (grep {$has_non_hidden{$_};} %$href) { }"}],[8035,{"text":"if ($common_size eq keys %$href) { }"}],[8035,{"text":"elsif ($common_size eq keys %$href2) { }"}],[7977,{"text":"if (my $aref = $nat_tags2multi{$nat_tag})"}],[8059,{"text":"if @$aref > 1"}],[8061,{"text":"if keys %$href > 1"}],[8067,{"text":"if $$network{'is_aggregate'}"}],[8068,{"text":"if $$network{'nat_domain'}"}],[8094,{"text":"unless my $aref = $nat_tags2multi{$nat_tag}"}],[8096,{"text":"if $$href{$_}"}],[8097,{"text":"unless @tags >= 2"}],[8091,{"text":"if (@$nat_tags >= 2)"}],[8114,{"text":"if ($nat_definitions{$nat_tag}) { }"}],[8142,{"text":"unless (match_ip($obj_ip, $ip, $mask))"}],[8137,{"text":"if ($nat_network = $$network{'nat'}{$nat_tag} and $$nat_network{'dynamic'}) { }"}],[8134,{"text":"if ($$obj{'nat'})"}],[8158,{"text":"unless $nat_definitions{$name} eq 'used'"}],[8165,{"text":"unless my $nat = $$network{'nat'}"}],[8168,{"text":"unless $$nat_info{'dynamic'}"}],[8173,{"text":"if $intf_nat and $$intf_nat{$nat_tag}"}],[8176,{"text":"unless $$router{'need_protect'}"}],[8178,{"text":"unless my $bind = $$bind_intf{'bind_nat'}"}],[8179,{"text":"unless grep {$_ eq $nat_tag;} @$bind"}],[8203,{"text":"if $partitions{$domain}"}],[8209,{"text":"if $out_domain eq $domain"}],[8225,{"text":"unless my $href = $$network{'nat'}"}],[8255,{"text":"unless $$router{'managed'} or $$router{'semi_managed'}"}],[8259,{"text":"if $$router{'managed'} or $$router{'routing_only'}"}],[8275,{"text":"if $$tunnel{'disabled'}"}],[8278,{"text":"if $seen{$real_intf}++"}],[8279,{"text":"unless $$real_intf{'router'}{'managed'}"}],[8281,{"text":"unless keys %$tunnel_set"}],[8287,{"text":"if ref $hardware"}],[8303,{"text":"if $$no_nat_set{$tag}"}],[8301,{"text":"if (my $href = $$network{'nat'} and $no_nat_set)"}],[8319,{"text":"if $$network{'is_aggregate'} or $$subnet{'is_aggregate'}"}],[8334,{"text":"if (grep {$_ eq $nat_tag2;} @$nat_tags and $$object{'ip'} == $$subnet{'ip'} and $$subnet{'mask'} == 4294967295)"}],[8331,{"text":"if (my $nat_tags = $$object{'bind_nat'} and my($nat_tag2) = $$subnet{'name'} =~ /^nat:(.*)\\(/)"}],[8323,{"text":"if (match_ip($ip1, $sub_ip, $sub_mask) or $ip2 and match_ip($ip2, $sub_ip, $sub_mask) || $ip1 <= $sub_ip && $sub_ip <= $ip2)"}],[8347,{"text":"if $ip =~ /^(?:unnumbered|negotiated|tunnel|short|bridged)$/"}],[8351,{"text":"if (my $ip = $$host{'ip'}) { }"}],[8351,{"text":"elsif (my $range = $$host{'range'}) { }"}],[8380,{"text":"if (grep {$_ eq $nat_tag1;} @$nat_tags)"}],[8379,{"text":"if (my $nat_tags = $$all_intf{'bind_nat'})"}],[8419,{"text":"if $seen{$no_nat_set}++"}],[8428,{"text":"if $$network{'ip'} =~ /^(?:unnumbered|tunnel)$/"}],[8433,{"text":"if $$no_nat_set{$tag}"}],[8431,{"text":"if (my $href = $$network{'nat'})"}],[8441,{"text":"unless my $other = $$network{'up'}"}],[8442,{"text":"if get_nat_network($other, $no_nat_set)->{'hidden'}"}],[8440,{"text":"if ($$nat_network{'hidden'})"}],[8456,{"text":"if (my $other_net = $mask_ip_hash{$mask}{$ip}) { }"}],[8475,{"text":"unless @mask_list"}],[8488,{"text":"unless my $bignet = $mask_ip_hash{$m}{$i}"}],[8497,{"text":"unless $$subnet{'networks'}"}],[8499,{"text":"$$subnet{'is_aggregate'} ? :"}],[8510,{"text":"if ($other ne $bignet)"}],[8509,{"text":"if (my $other = $$subnet{'up'}) { }"}],[8491,{"text":"if ($interface eq $first_intf) { }"}],[8538,{"text":"if (my $other = $$subnet{'up'})"}],[8537,{"text":"if ($interface ne $first_intf)"}],[8561,{"text":"unless $network"}],[8562,{"text":"if (my $max_net = $max_up_net{$network})"}],[8566,{"text":"unless ($$network{'is_aggregate'})"}],[8565,{"text":"if (my $max_net = &$set_max_net($$network{'up'}))"}],[8573,{"text":"if ($$network{'is_aggregate'})"}],[8585,{"text":"unless my $max = $max_up_net{$network}"}],[8596,{"text":"if (my $aref = $net2zone_nat_tags{$network})"}],[8612,{"text":"unless keys %$nat == keys %$up_nat"}],[8614,{"text":"unless my $up_nat_info = $$up_nat{$tag}"}],[8617,{"text":"unless $$up_nat_info{'hidden'}"}],[8623,{"text":"if $$up_nat_info{'hidden'}"}],[8625,{"text":"unless match_ip($$up_nat_info{'ip'}, $ip, $mask)"}],[8626,{"text":"unless $$up_nat_info{'mask'} >= $mask"}],[8616,{"text":"if ($$nat_info{'hidden'}) { }"}],[8629,{"text":"unless ($$up{'is_aggregate'})"}],[8634,{"text":"if ($max_routing)"}],[8676,{"text":"if $$network{'ip'} =~ /^(?:unnumbered|tunnel)$/"}],[8678,{"text":"if $$nat_network{'hidden'}"}],[8687,{"text":"if ($$old_net{'zone'} eq $$network{'zone'}) { }"}],[8705,{"text":"unless nat_to_loopback_ok($old_net, $nat_network)"}],[8708,{"text":"unless nat_to_loopback_ok($network, $nat_old_net)"}],[8686,{"text":"if ($$old_net{'is_aggregate'} or $$network{'is_aggregate'}) { }"}],[8686,{"text":"elsif ($$nat_old_net{'dynamic'} and $$nat_network{'dynamic'}) { }"}],[8686,{"text":"elsif ($$old_net{'loopback'} and $$nat_network{'dynamic'}) { }"}],[8686,{"text":"elsif ($$nat_old_net{'dynamic'} and $$network{'loopback'}) { }"}],[8686,{"text":"elsif (($$network{'bridged'} || 0) eq ($$old_net{'bridged'} || 1)) { }"}],[8718,{"text":"if ($error) { }"}],[8683,{"text":"if (my $old_net = $mask_ip_hash{$mask}{$ip}) { }"}],[8753,{"text":"unless @mask_list"}],[8768,{"text":"unless my $bignet = $mask_ip_hash{$m}{$i}"}],[8780,{"text":"if ($$subnet{'has_other_subnet'})"}],[8779,{"text":"if ($$bignet{'zone'} eq $$subnet{'zone'}) { }"}],[8792,{"text":"if ($seen{$nat_bignet}{$nat_subnet})"}],[8823,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_subnets'} eq 'warn') { }"}],[8802,{"text":"unless ($$bignet{'is_aggregate'} or $$subnet{'is_aggregate'} or $$bignet{'has_subnets'} or $$nat_subnet{'subnet_of'} and $$nat_subnet{'subnet_of'} eq $bignet or $$nat_subnet{'is_layer3'})"}],[8797,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_subnets'})"}],[8847,{"text":"unless my $max = $$network{'max_routing_net'}"}],[8848,{"text":"unless ($$max{'has_other_subnet'})"}],[8859,{"text":"unless ($$up{'is_aggregate'})"}],[8855,{"text":"if ($$up{'has_other_subnet'}) { }"}],[8865,{"text":"if $max_secondary"}],[8901,{"text":"unless $$network{'crosslink'}"}],[8902,{"text":"if $$network{'disabled'}"}],[8904,{"text":"if $out_intf eq $in_intf"}],[8906,{"text":"if $cluster{$router2}"}],[8914,{"text":"if $seen{$router}"}],[8947,{"text":"unless $$network{'crosslink'}"}],[8948,{"text":"if $$network{'disabled'}"}],[8957,{"text":"if $$interface{'main_interface'}"}],[8962,{"text":"unless ($$router{'managed'})"}],[8969,{"text":"unless 1 == grep({not $$_{'main_interface'};} @{$$hardware{'interfaces'};})"}],[8976,{"text":"unless my $strength = $crosslink_strength{$managed}"}],[8980,{"text":"if ($$router{'need_protect'})"}],[8984,{"text":"if ($$hardware{'need_out_acl'})"}],[8999,{"text":"if ($weakest == $crosslink_strength{'local'} and $strength2intf{$crosslink_strength{'secondary'}})"}],[8993,{"text":"if (my($weakest) = (sort numerically keys %strength2intf))"}],[9011,{"text":"unless not $out_acl_count or $out_acl_count == @{$$network{'interfaces'};}"}],[9014,{"text":"unless equal(map({$$_{'zone'};} @no_in_acl_intf))"}],[9049,{"text":"unless $$router0{'managed'} =~ /^local/"}],[9050,{"text":"if $$router0{'local_mark'}"}],[9066,{"text":"if ($mask >= $m)"}],[9064,{"text":"unless ($$bignet{'is_aggregate'})"}],[9090,{"text":"unless $k eq $k0"}],[9081,{"text":"if ($filter_only ne $$router{'filter_only'})"}],[9106,{"text":"$zone_cluster ? :"}],[9107,{"text":"if $$zone{'disabled'}"}],[9108,{"text":"if $$zone{'local_mark'}"}],[9123,{"text":"if ($mask > $m)"}],[9119,{"text":"if ($mask >= $m and match_ip($ip, $i, $m))"}],[9136,{"text":"if $out_intf eq $in_intf"}],[9138,{"text":"unless my $managed = $$router2{'managed'}"}],[9139,{"text":"unless $managed =~ /^local/"}],[9140,{"text":"if $$router2{'local_mark'}"}],[9153,{"text":"if $matched{\"$i/$m\"}"}],[9178,{"text":"if (my $subnetworks = $$network{'networks'})"}],[9183,{"text":"if $$nat_network{'hidden'}"}],[9184,{"text":"if $$nat_network{'ip'} eq 'unnumbered'"}],[9188,{"text":"unless $mask > $m and match_ip($ip, $i, $m)"}],[9196,{"text":"if $$obj{'filter_at'}{$mark}"}],[9224,{"text":"unless my $group = $$interface{'reroute_permit'}"}],[9231,{"text":"if (not zone_eq($net_zone, $zone)) { }"}],[9229,{"text":"if (is_network($obj)) { }"}],[9264,{"text":"unless my $managed_hosts = $$network{'managed_hosts'}"}],[9276,{"text":"if $$network{'mask'} > $mask"}],[9277,{"text":"unless my $managed_hosts = $$network{'managed_hosts'}"}],[9262,{"text":"if (@$networks) { }"}],[9314,{"text":"if $$zone{'is_tunnel'}"}],[9315,{"text":"if $$zone{'has_id_hosts'}"}],[9317,{"text":"if ($$zone{'disabled'}) { }"}],[9346,{"text":"unless my $subnets = $$network{'networks'}"}],[9360,{"text":"unless match_ip($i, $ip, $mask)"}],[9364,{"text":"if $$up{'mask'} >= $mask"}],[9363,{"text":"if (my $up = $$obj{'up'})"}],[9371,{"text":"$$obj{'is_aggregate'} ? :"}],[9380,{"text":"unless match_ip($ip, $i, $m)"}],[9409,{"text":"if ($type ne 'network')"}],[9417,{"text":"unless ($network)"}],[9423,{"text":"if ($$network{'disabled'})"}],[9436,{"text":"unless $private1 eq $private2"}],[9444,{"text":"$cluster ? :"}],[9445,{"text":"if (my $other = $$zone2{'ipmask2aggregate'}{$key})"}],[9452,{"text":"if ($cluster)"}],[9465,{"text":"$cluster ? :"}],[9464,{"text":"if (my $v = delete $$aggregate{$attr})"}],[9462,{"text":"if ($mask == 0)"}],[9501,{"text":"if $$zone{'ipmask2aggregate'}{$key}"}],[9515,{"text":"if ($implicit) { }"}],[9541,{"text":"if $$_{'mask'} == $mask"}],[9540,{"text":"$cluster ? :"}],[9545,{"text":"if @networks > 1"}],[9553,{"text":"if $cluster"}],[9561,{"text":"if $prefix != 0"}],[9569,{"text":"if (my $private = $$zone{'private'})"}],[9573,{"text":"if $cluster"}],[9540,{"text":"if (my(@networks) = grep({$$_{'ip'} == $ip if $$_{'mask'} == $mask;} map({@{$$_{'networks'};};} $cluster ? @$cluster : $zone))) { }"}],[9534,{"text":"unless ($$zone{'ipmask2aggregate'}{$key})"}],[9576,{"text":"if ($cluster) { }"}],[9590,{"text":"unless $$_{'ipmask2aggregate'}{$key}"}],[9603,{"text":"if ($$network{'zone'})"}],[9609,{"text":"unless ($$network{'ip'} =~ /^(?:unnumbered|tunnel)$/)"}],[9616,{"text":"if $$network{'ip'} eq 'tunnel'"}],[9617,{"text":"if $$network{'has_id_hosts'}"}],[9623,{"text":"if ($private1 ne $private2)"}],[9621,{"text":"if ($$zone{'private'})"}],[9640,{"text":"if $interface eq $in_interface"}],[9651,{"text":"if $$router{'zone'}"}],[9657,{"text":"if $out_interface eq $interface"}],[9658,{"text":"if $$out_interface{'disabled'}"}],[9644,{"text":"if ($$router{'managed'} or $$router{'semi_managed'}) { }"}],[9676,{"text":"unless $$zone{'is_tunnel'}"}],[9683,{"text":"if $interface eq $in_interface"}],[9684,{"text":"if $$interface{'main_interface'}"}],[9686,{"text":"if $$router{'managed'}"}],[9687,{"text":"if $$router{'active_path'}"}],[9692,{"text":"if $out_interface eq $interface"}],[9694,{"text":"if $$next{'zone_cluster'}"}],[9695,{"text":"if $$out_interface{'main_interface'}"}],[9699,{"text":"unless $private1 eq $private2"}],[9734,{"text":"if $$obj{'areas'}{$area}"}],[9742,{"text":"unless ($$obj{'is_tunnel'})"}],[9741,{"text":"if ($is_zone) { }"}],[9741,{"text":"elsif ($$obj{'managed'} or $$obj{'routing_only'}) { }"}],[9756,{"text":"if $interface eq $in_interface"}],[9759,{"text":"if $$interface{'main_interface'}"}],[9766,{"text":"if ($$is_inclusive{$area} xor not $is_zone)"}],[9778,{"text":"$is_zone ? :"}],[9777,{"text":"if ($$interface{'is_border'})"}],[9762,{"text":"if ($$lookup{$interface}) { }"}],[9762,{"text":"elsif ($auto_border) { }"}],[9787,{"text":"$is_zone ? :"}],[9788,{"text":"if (my $err_path = set_area1($next, $area, $interface))"}],[9803,{"text":"unless my $attributes = $$area{'router_attributes'}"}],[9804,{"text":"if $$attributes{'owner'} and keys %$attributes == 1"}],[9810,{"text":"if $key eq 'owner'"}],[9815,{"text":"if ($r_val eq $val or ref $r_val eq 'ARRAY' and ref $val eq 'ARRAY' and aref_eq($r_val, $val))"}],[9814,{"text":"if (my $r_val = $$router{$key}) { }"}],[9845,{"text":"if defined $$nat1{$attr} xor defined $$nat2{$attr}"}],[9846,{"text":"unless defined $$nat1{$attr}"}],[9847,{"text":"if $$nat1{$attr} ne $$nat2{$attr}"}],[9860,{"text":"if (nat_equal($nat1, $nat2))"}],[9866,{"text":"if ($$nat2{'identity'})"}],[9877,{"text":"unless my $hash = $$area{'nat'}"}],[9887,{"text":"if (my $z_nat = $$zone{'nat'}{$nat_tag})"}],[9925,{"text":"is_network($net_or_zone) ? :"}],[9938,{"text":"unless $mask2 > $mask1"}],[9939,{"text":"unless match_ip($ip2, $ip1, $mask1)"}],[9969,{"text":"unless ($$nat{'dynamic'})"}],[9942,{"text":"if (my $n_nat = $$network{'nat'}{$nat_tag}) { }"}],[9942,{"text":"elsif ($$network{'ip'} eq 'bridged' and not $$nat{'identity'}) { }"}],[9993,{"text":"$$zone{'nat'} ? :"}],[10012,{"text":"unless my $href = $$network{'nat'}"}],[10013,{"text":"if ($$network{'is_aggregate'})"}],[10019,{"text":"unless $$nat_network{'identity'}"}],[10021,{"text":"unless $$nat_network{'is_used'}"}],[10041,{"text":"if $$network{'zone'}"}],[10053,{"text":"if $$network{'loopback'} and @{$$zone{'networks'};} == 1"}],[10056,{"text":"if (@{$$zone{'networks'};})"}],[10061,{"text":"if (my $unmanaged = $$zone{'unmanaged_routers'})"}],[10066,{"text":"if ($$zone{'private'} and $$zone{'private'} eq 'public')"}],[10083,{"text":"if $$zone{'zone_cluster'}"}],[10090,{"text":"if 1 >= @$cluster"}],[10108,{"text":"unless my $border = $$area{$attribute}"}],[10113,{"text":"if ($attribute eq 'inclusive_border')"}],[10135,{"text":"if $in_interface"}],[10138,{"text":"$$is_inclusive{$area} ? :"}],[10139,{"text":"$$err_obj{'areas'}{$area} ? :"}],[10132,{"text":"if (my $err_path = set_area1($obj, $area, $in_interface))"}],[10171,{"text":"unless my $borders = $$area{$attr}"}],[10173,{"text":"if $start"}],[10177,{"text":"$attr eq 'border' ? :"}],[10185,{"text":"if $err"}],[10189,{"text":"unless my $borders = $$area{$attr}"}],[10190,{"text":"unless my(@bad_intf) = grep({$$lookup{$_} ne 'found';} @$borders)"}],[10158,{"text":"if (my $network = $$area{'anchor'}) { }"}],[10202,{"text":"unless @{$$area{'zones'};}"}],[10218,{"text":"unless $$zone{'areas'}"}],[10222,{"text":"unless @{$$a{'zones'};} <=> @{$$b{'zones'};}"}],[10224,{"text":"unless my(@areas) = (sort {$$a{'name'} cmp $$b{'name'} unless @{$$a{'zones'};} <=> @{$$b{'zones'};};} values %{$$zone{'areas'};})"}],[10232,{"text":"if $seen{$small}{$next}"}],[10237,{"text":"unless ($$zone{'areas'}{$next})"}],[10246,{"text":"if (@{$$small{'zones'};} == @{$$next{'zones'};}) { }"}],[10245,{"text":"if ($ok)"}],[10284,{"text":"unless @{$$a{'zones'};} <=> @{$$b{'zones'};}"}],[10297,{"text":"if $next eq $big"}],[10308,{"text":"unless my $big = $$area{'subset_of'}"}],[10312,{"text":"if $$router{'areas'}{$big}"}],[10363,{"text":"unless my $related = $$interface{'redundancy_interfaces'}"}],[10367,{"text":"unless $$router{'managed'} or $$router{'semi_managed'}"}],[10369,{"text":"if $seen{$related}"}],[10375,{"text":"unless ($$v{'router'}{'loop'})"}],[10381,{"text":"if $err"}],[10387,{"text":"unless equal(map({$$_{'loop'};} @$related))"}],[10408,{"text":"unless @$elements"}],[10415,{"text":"if $$interface{'disabled'}"}],[10423,{"text":"unless ($loop)"}],[10435,{"text":"unless ($cluster eq $prev_cluster)"}],[10434,{"text":"if ($prev_cluster) { }"}],[10453,{"text":"if (1 == @$elements)"}],[10451,{"text":"if ($deleted)"}],[10459,{"text":"if ($invalid)"}],[10466,{"text":"unless $$_{'router'}{'managed'}"}],[10466,{"text":"if grep {$$_{'router'}{'routing_only'} unless $$_{'router'}{'managed'};} @$elements"}],[10471,{"text":"unless $$_{'zone_cluster'}"}],[10471,{"text":"unless equal(map({$_ unless $$_{'zone_cluster'};} map({$$_{'zone'};} @$elements)))"}],[10488,{"text":"if $zone2 eq $zone"}],[10490,{"text":"if $cluster2 eq $zone_cluster"}],[10489,{"text":"if (my $cluster2 = $$zone2{'zone_cluster'})"}],[10493,{"text":"if ($loop eq $loop2)"}],[10492,{"text":"if (my $loop2 = $$zone2{'loop'})"}],[10538,{"text":"if $$obj{'reachable_part'}{$mark}"}],[10539,{"text":"if $$obj{'active_path'}"}],[10553,{"text":"if $interface eq $in_interface"}],[10554,{"text":"if $$interface{'main_interface'}"}],[10558,{"text":"$is_zone ? :"}],[10564,{"text":"unless $$interface{'loop'}"}],[10565,{"text":"$is_zone ? :"}],[10557,{"text":"if (my $reached = $$lookup{$interface}) { }"}],[10606,{"text":"if $mark eq 'none'"}],[10596,{"text":"if ($$reached{'zone'} eq $$reached{'router'} and $$reached{'zone'} ne 'none') { }"}],[10620,{"text":"unless aref_delete($$interface{'path_restrict'}, $restrict)"}],[10625,{"text":"unless (@{$$interface{'path_restrict'};})"}],[10616,{"text":"if (not $has_interior) { }"}],[10662,{"text":"if $$reached{$direction}"}],[10666,{"text":"unless ($$obj{'loop'})"}],[10681,{"text":"if ($mark > $start_mark + 1)"}],[10714,{"text":"if ($$obj{'active_path'})"}],[10734,{"text":"if $interface eq $to_zone1"}],[10735,{"text":"if $$interface{'loop'}"}],[10738,{"text":"is_router($obj) ? :"}],[10743,{"text":"if $max > $max_distance"}],[10765,{"text":"if ($$loop{'distance'} < $$loop2{'distance'}) { }"}],[10762,{"text":"if ($loop ne $loop2)"}],[10751,{"text":"if ($obj eq $loop_obj) { }"}],[10751,{"text":"elsif (my $loop2 = $$obj{'loop'}) { }"}],[10746,{"text":"if ($loop) { }"}],[10788,{"text":"if ($$obj{'loop'} and $$obj{'loop'}{'exit'} ne $obj) { }"}],[10818,{"text":"if ($$exit{'loop'} eq $loop) { }"}],[10809,{"text":"if (my $marker = $$loop{'cluster_exit'}) { }"}],[10839,{"text":"unless @zones"}],[10840,{"text":"unless $$_{'managed'}"}],[10845,{"text":"if $$obj{'to_zone1'} or $$obj{'loop'}"}],[10866,{"text":"unless $$_{'managed'}"}],[10868,{"text":"unless my $loop = $$obj{'loop'}"}],[10888,{"text":"if (my $loop = $$interface{'loop'})"}],[10946,{"text":"if ($$main{'path_restrict'} or $$main{'reachable_at'}) { }"}],[10937,{"text":"if ($$router{'managed'} or $$router{'semi_managed'}) { }"}],[10960,{"text":"if ($$obj{'managed'} or $$obj{'semi_managed'}) { }"}],[10981,{"text":"if (is_network($object)) { }"}],[10981,{"text":"elsif ($$object{'managed'} or $$object{'semi_managed'}) { }"}],[10929,{"text":"if ($type eq 'Network') { }"}],[10929,{"text":"elsif ($type eq 'Subnet') { }"}],[10929,{"text":"elsif ($type eq 'Interface') { }"}],[10929,{"text":"elsif ($type eq 'Router') { }"}],[10929,{"text":"elsif ($type eq 'Zone') { }"}],[10929,{"text":"elsif ($type eq 'Host') { }"}],[10929,{"text":"elsif ($type eq 'Autointerface') { }"}],[11036,{"text":"if ($$restrict{'active_path'})"}],[11034,{"text":"if ($pathrestriction)"}],[11058,{"text":"unless ($$has_mark{$mark})"}],[11076,{"text":"if (intersect($reachable, $reachable2))"}],[11073,{"text":"if (my $reachable2 = $$reachable_at2{$$end_intf{'router'}})"}],[11072,{"text":"if (my $reachable_at2 = $$end_intf{'reachable_at'})"}],[11055,{"text":"if ($$other{'loop'}) { }"}],[11051,{"text":"if (my $reachable = $$reachable_at{$obj})"}],[11049,{"text":"if ($reachable_at and $end_intf and $end_intf ne $in_intf)"}],[11088,{"text":"if ($$obj{'active_path'})"}],[11095,{"text":"if ($obj eq $end)"}],[11108,{"text":"$end_intf ? :"}],[11111,{"text":"unless ($$has_mark{$mark})"}],[11107,{"text":"if (my $reachable = $$reachable_at{$obj})"}],[11106,{"text":"if ($reachable_at)"}],[11126,{"text":"if ($pathrestriction)"}],[11134,{"text":"is_router($obj) ? :"}],[11141,{"text":"unless my $allowed = $$navi{$$obj{'loop'}}"}],[11146,{"text":"if $interface eq $in_intf"}],[11147,{"text":"if $$interface{'main_interface'}"}],[11148,{"text":"unless my $loop = $$interface{'loop'}"}],[11149,{"text":"unless $$allowed{$loop}"}],[11155,{"text":"if (cluster_path_mark1($next, $interface, $end, $end_intf, $path_tuples, $loop_leave, $navi))"}],[11173,{"text":"if ($pathrestriction)"}],[11202,{"text":"if ($navi = $$from{'navi'}{$to} and scalar keys %$navi)"}],[11217,{"text":"if $from eq $to"}],[11216,{"text":"if ($from_loop eq $to_loop) { }"}],[11216,{"text":"elsif ($$from_loop{'distance'} >= $$to_loop{'distance'}) { }"}],[11277,{"text":"if $$from_in{'path'}{$to_store}"}],[11289,{"text":"if (is_interface($from_store) and $$from_store{'router'} eq $from || $$from_store{'zone'} eq $from) { }"}],[11289,{"text":"elsif ($from_in and $$from_in{'path_restrict'} || $$from_in{'reachable_at'}) { }"}],[11304,{"text":"if (is_interface($to_store) and $$to_store{'router'} eq $to || $$to_store{'zone'} eq $to) { }"}],[11304,{"text":"elsif ($to_out and $$to_out{'path_restrict'} || $$to_out{'reachable_at'}) { }"}],[11323,{"text":"if ($from_in and not $$from_in{'loop'} and my $restrictions = $$from_in{'path_restrict'} and not $start_intf)"}],[11342,{"text":"if ($$restrict{'active_path'})"}],[11334,{"text":"if ($to_out and not $$to_out{'loop'} and my $restrictions = $$to_out{'path_restrict'} and not $end_intf)"}],[11354,{"text":"$end_intf ? :"}],[11358,{"text":"if ($start_intf and $$start_intf{'zone'} eq $end_node)"}],[11365,{"text":"unless my $reachable_at = $$intf{'reachable_at'}"}],[11372,{"text":"$start_intf ? :"}],[11373,{"text":"unless my $reachable = $$reachable_at{$start_node}"}],[11381,{"text":"if ($start_intf) { }"}],[11378,{"text":"unless ($$has_mark{$mark})"}],[11394,{"text":"if ($success and $start_intf)"}],[11404,{"text":"unless $intf"}],[11407,{"text":"if $interface eq $intf"}],[11405,{"text":"if (my $interfaces = $$intf{'redundancy_interfaces'})"}],[11425,{"text":"unless $intf"}],[11429,{"text":"unless $router eq $from or $router eq $to"}],[11432,{"text":"unless my $removed = delete $$intf{'path_restrict'}"}],[11437,{"text":"if $interface eq $intf"}],[11447,{"text":"if (intersect($orig, $removed)) { }"}],[11442,{"text":"if ($orig) { }"}],[11466,{"text":"unless $success"}],[11479,{"text":"if ($$start_store{'loop_enter'}{$end_store})"}],[11490,{"text":"unless my $navi = cluster_navigation($from, $to)"}],[11495,{"text":"is_router($from) ? :"}],[11496,{"text":"unless my $allowed = $$navi{$$from{'loop'}}"}],[11502,{"text":"if $$interface{'main_interface'}"}],[11504,{"text":"unless $loop"}],[11507,{"text":"unless ($$allowed{$loop})"}],[11511,{"text":"if $$interface{'loopback'} and $get_next eq 'zone'"}],[11519,{"text":"if (cluster_path_mark1($next, $interface, $to, $end_intf, $path_tuples, $loop_leave, $navi))"}],[11534,{"text":"unless $success"}],[11539,{"text":"unless my $in_intf = $key2obj{$in_intf_ref}"}],[11543,{"text":"unless my $out_intf = $key2obj{$out_intf_ref}"}],[11569,{"text":"unless $intf"}],[11570,{"text":"unless $$intf{'saved_path_restrict'}"}],[11573,{"text":"if (my $orig = delete $$interface{'saved_path_restrict'}) { }"}],[11584,{"text":"if (my $orig = delete $$start_intf{'saved_reachable_at_zone'})"}],[11583,{"text":"if ($start_intf)"}],[11592,{"text":"unless $intf"}],[11595,{"text":"if $interface eq $intf"}],[11593,{"text":"if (my $interfaces = $$intf{'redundancy_interfaces'})"}],[11603,{"text":"if ($intf and not $$intf{'loop'} and my $restrictions = $$intf{'path_restrict'})"}],[11615,{"text":"if ($success)"}],[11650,{"text":"$$from_store{'loop'} ? :"}],[11658,{"text":"if ($from eq $to)"}],[11666,{"text":"if ($from_loop and $to_loop and $$from_loop{'cluster_exit'} eq $$to_loop{'cluster_exit'})"}],[11678,{"text":"if $$from_in{'path'}{$to_store}"}],[11687,{"text":"unless $from_loop"}],[11694,{"text":"unless $from_out"}],[11697,{"text":"unless cluster_path_mark($from, $exit, $from_in, $from_out, $from_store, $to_store)"}],[11684,{"text":"unless ($from_out)"}],[11721,{"text":"unless $to_loop"}],[11728,{"text":"unless $to_in"}],[11731,{"text":"unless cluster_path_mark($entry, $to, $to_in, $to_out, $from_store, $to_store)"}],[11718,{"text":"unless ($to_in)"}],[11675,{"text":"if ($$from{'distance'} >= $$to{'distance'}) { }"}],[11772,{"text":"if (is_router($loop_entry) or is_interface($loop_entry) and $$loop_entry{'router'} eq $$loop_entry{'loop_enter'}{$loop_exit}[0]{'router'} xor $call_at_zone)"}],[11801,{"text":"if $at_router xor $call_at_zone"}],[11810,{"text":"if ($exit_at_router xor $call_at_zone)"}],[11841,{"text":"$$from_store{'loop'} ? :"}],[11855,{"text":"unless $from and $to"}],[11856,{"text":"if $from eq $to"}],[11860,{"text":"unless (path_mark($from, $to, $from_store, $to_store))"}],[11859,{"text":"unless (exists $$path_store{'path'}{$to_store})"}],[11896,{"text":"unless ($loop_out)"}],[11885,{"text":"if ($$from{'loop'} and $$from_store{'loop_exit'} and my $loop_exit = $$from_store{'loop_exit'}{$to_store}) { }"}],[11926,{"text":"unless ($loop_out)"}],[11940,{"text":"if ($call_it)"}],[11945,{"text":"unless ($out)"}],[11914,{"text":"if ($in and $$in{'loop_entry'} and my $loop_entry = $$in{'loop_entry'}{$to_store}) { }"}],[11981,{"text":"if $interface eq $in_intf"}],[11982,{"text":"if $$interface{'zone'}"}],[11983,{"text":"if $$interface{'orig_main'}"}],[11985,{"text":"if $active_path{$router}"}],[11992,{"text":"if $out_intf eq $interface"}],[11993,{"text":"if $$out_intf{'orig_main'}"}],[12013,{"text":"unless is_router($obj)"}],[12015,{"text":"unless $$_{'path_restrict'}"}],[12026,{"text":"is_autointerface($src) ? :"}],[12028,{"text":"is_autointerface($dst) ? :"}],[12035,{"text":"if $from eq $to"}],[12045,{"text":"unless (path_mark($from, $to, $from_store, $to_store))"}],[12044,{"text":"unless ($$from_store{'path'}{$to_store})"}],[12057,{"text":"if (grep {$$_{'router'} ne $from;} @enter)"}],[12054,{"text":"if (is_interface($from_store)) { }"}],[12068,{"text":"if ($next and $$next{'router'} ne $from)"}],[12067,{"text":"if (is_interface($from_store)) { }"}],[12050,{"text":"if ($$from_store{'loop_exit'} and my $exit = $$from_store{'loop_exit'}{$to_store}) { }"}],[12078,{"text":"unless (@result)"}],[12097,{"text":"unless ($border2obj2auto{$border})"}],[12094,{"text":"unless (is_router($from))"}],[12114,{"text":"if (my $orig = $$interface{'orig_main'}) { }"}],[12114,{"text":"elsif (my $layer3_intf = $$interface{'layer3_interface'}) { }"}],[12125,{"text":"if ($bridged_count > 1)"}],[12130,{"text":"$managed ? :"}],[12143,{"text":"unless my $isakmp = $isakmp{$name}"}],[12142,{"text":"if ($type eq 'isakmp') { }"}],[12163,{"text":"unless my $ipsec = $ipsec{$name2}"}],[12162,{"text":"if ($type eq 'ipsec') { }"}],[12189,{"text":"if $use_ah"}],[12190,{"text":"if $use_esp"}],[12191,{"text":"if (@prt)"}],[12187,{"text":"if (not $nat_traversal or $nat_traversal ne 'on')"}],[12201,{"text":"if ($nat_traversal)"}],[12228,{"text":"unless $real_hubs and @$real_hubs"}],[12231,{"text":"unless $real_spokes and @$real_spokes"}],[12240,{"text":"if $crypto_name eq $name"}],[12248,{"text":"unless $$router{'managed'}"}],[12252,{"text":"if $$router{'model'}{'do_auth'} and not $need_id"}],[12258,{"text":"if (my $orig_router = $$router{'orig_router'})"}],[12261,{"text":"unless $hub_seen{$router}++"}],[12282,{"text":"if (my $orig_router = $$router{'orig_router'})"}],[12301,{"text":"if $$real_hub{'bind_nat'}"}],[12311,{"text":"if (my $aref = $$router{'orig_interfaces'})"}],[12317,{"text":"unless ($$model{'do_auth'} or $$model{'can_dyn_crypto'})"}],[12315,{"text":"if ($$real_spoke{'ip'} =~ /^(?:negotiated|short|unnumbered)$/)"}],[12326,{"text":"unless $s_p and $s_p eq $private or $h_p and $h_p eq $private"}],[12335,{"text":"if $$real_spoke{'private'}"}],[12339,{"text":"if $$real_hub{'private'}"}],[12323,{"text":"if ($private) { }"}],[12351,{"text":"if ($$network{'has_id_hosts'}) { }"}],[12351,{"text":"elsif ($$interface{'ip'} ne 'tunnel') { }"}],[12358,{"text":"if ($has_id_hosts and @other)"}],[12365,{"text":"if ($$router{'managed'} and $$crypto{'detailed_crypto_acl'})"}],[12374,{"text":"if (@hubs > 1)"}],[12400,{"text":"unless 1 == @{$$zone{'interfaces'};}"}],[12408,{"text":"unless 1 == @{$$network{'interfaces'};}"}],[12398,{"text":"if ($managed) { }"}],[12442,{"text":"unless my $attributes = $$obj{'radius_attributes'}"}],[12445,{"text":"unless $spec"}],[12448,{"text":"unless $value =~ /^(?:tunnelall|tunnelspecified)$/"}],[12457,{"text":"unless $$obj{'range'}"}],[12462,{"text":"if grep {$$_{'ip'};} @{$$obj{'hosts'};}"}],[12456,{"text":"if (is_host($obj)) { }"}],[12456,{"text":"elsif (is_network($obj)) { }"}],[12446,{"text":"if ($key eq 'split-tunnel-policy') { }"}],[12446,{"text":"elsif ($key eq 'trust-point') { }"}],[12475,{"text":"if $id =~ /@/"}],[12481,{"text":"if &$has_attr($host)"}],[12482,{"text":"if &$has_attr($$host{'network'})"}],[12485,{"text":"if &$has_attr($$peer{'router'})"}],[12488,{"text":"if ($missing)"}],[12499,{"text":"unless $$isakmp{'trust_point'}"}],[12498,{"text":"if ($$isakmp{'authentication'} eq 'rsasig')"}],[12521,{"text":"if $$tunnel{'disabled'}"}],[12523,{"text":"if $$tunnel_intf{'is_hub'}"}],[12533,{"text":"if $interface eq $tunnel_intf"}],[12535,{"text":"if ($managed and $$router{'model'}{'crypto'} eq 'EZVPN')"}],[12534,{"text":"if ($$interface{'ip'} eq 'tunnel')"}],[12543,{"text":"if (my $intf2 = $id2interface{$id})"}],[12542,{"text":"if (my $id = $$interface{'id'})"}],[12541,{"text":"if ($$interface{'spoke'})"}],[12555,{"text":"if $managed"}],[12562,{"text":"if @all_networks > 1"}],[12575,{"text":"if (my $other = $$peer{'id_rules'}{$id})"}],[12553,{"text":"if ($$network{'has_id_hosts'}) { }"}],[12605,{"text":"if $has_id_hosts and $has_other_network"}],[12612,{"text":"unless $has_id_hosts or $has_other_network"}],[12623,{"text":"unless $need_id"}],[12632,{"text":"unless $do_auth"}],[12622,{"text":"if ($$tunnel_intf{'id'}) { }"}],[12622,{"text":"elsif ($encrypted[0]{'has_id_hosts'}) { }"}],[12622,{"text":"elsif ($do_auth) { }"}],[12622,{"text":"elsif ($need_id) { }"}],[12662,{"text":"if (is_host($obj))"}],[12656,{"text":"if (grep {$$_{'router'}{'model'}{'crypto'} eq 'ASA_VPN';} @$peers)"}],[12668,{"text":"if ($managed and $$router{'model'}{'crypto'} eq 'ASA')"}],[12690,{"text":"if $$intf1{'ip'} eq 'negotiated'"}],[12676,{"text":"if ($real_spoke and not $$real_spoke{'ip'} =~ /^(?:short|unnumbered)$/)"}],[12707,{"text":"unless my $crypto = $$model{'crypto'}"}],[12708,{"text":"unless $crypto eq 'ASA_VPN'"}],[12711,{"text":"unless @id_rules_interfaces >= 2"}],[12717,{"text":"if (my $src2 = $id2src{$id}) { }"}],[12738,{"text":"unless my $trust_point = delete $$router{'radius_attributes'}{'trust-point'}"}],[12746,{"text":"unless my $crypto = $$interface{'crypto'}"}],[12734,{"text":"if ($crypto_type eq 'ASA_VPN') { }"}],[12734,{"text":"elsif ($crypto_type eq 'ASA') { }"}],[12808,{"text":"if $$net1{'mask'} < $$net2{'mask'}"}],[12811,{"text":"unless $net1 = $$net1{'up'}"}],[12813,{"text":"if $net1 eq $net2"}],[12814,{"text":"unless $net2 = $$net2{'up'}"}],[12834,{"text":"if $$nat_other{'hidden'}"}],[12837,{"text":"if (my $aggregate = $$zone{'ipmask2aggregate'}{$key})"}],[12840,{"text":"if (my $result = $$zone{'ipmask2net'}{$key})"}],[12849,{"text":"if $$nat_network{'hidden'}"}],[12851,{"text":"if $i =~ /^(?:unnumbered|tunnel)$/"}],[12858,{"text":"unless ($result)"}],[12864,{"text":"if (my $super = find_supernet($result, $network)) { }"}],[12853,{"text":"if ($m >= $mask and match_ip($i, $ip, $mask) or $m < $mask and match_ip($ip, $i, $m))"}],[12889,{"text":"unless ($net_or_count)"}],[12895,{"text":"unless (ref $net_or_count)"}],[12928,{"text":"if $missing_supernet{$interface}{$service}"}],[12932,{"text":"unless $networks"}],[12943,{"text":"if $$net_hash{$network}"}],[12934,{"text":"if (not ref $networks) { }"}],[12951,{"text":"$reversed ? :"}],[12952,{"text":"$$Netspoc::Compiler::Pass1::config{'check_supernet_rules'} eq 'warn' ? :"}],[12967,{"text":"unless my $supernet_filter_at = $$supernet{'filter_at'}"}],[12968,{"text":"unless $$supernet_filter_at{$mark}"}],[12972,{"text":"unless my $obj_filter_at = $$obj_net{'filter_at'}"}],[12973,{"text":"unless $$obj_filter_at{$mark}"}],[13003,{"text":"unless $out_intf"}],[13007,{"text":"unless my $managed = $$router{'managed'}"}],[13014,{"text":"unless is_filtered_at($mark, $src, $$rule{'dst'})"}],[13013,{"text":"if (my $mark = $$router{'local_mark'})"}],[13026,{"text":"if ($no_acl_zone eq $dst_zone) { }"}],[13026,{"text":"elsif ($in_zone eq $no_acl_zone) { }"}],[13026,{"text":"elsif ($$no_acl_intf{'main_interface'}) { }"}],[13022,{"text":"if ($no_acl_intf = $$router{'no_in_acl'})"}],[13065,{"text":"$managed =~ /^(?:secondary|local.*)$/ ? :"}],[13063,{"text":"unless ($m2)"}],[13077,{"text":"if ($no_acl_zone eq $dst_zone) { }"}],[13077,{"text":"elsif ($no_acl_zone eq $src_zone) { }"}],[13077,{"text":"elsif ($$no_acl_intf{'main_interface'}) { }"}],[13100,{"text":"if $intf eq $in_intf"}],[13101,{"text":"if $$intf{'loopback'} and not $$intf{'vip'}"}],[13106,{"text":"if $zone eq $src_zone"}],[13107,{"text":"if $zone eq $dst_zone"}],[13108,{"text":"if $$intf{'main_interface'}"}],[13073,{"text":"if (my $no_acl_intf = $$router{'no_in_acl'}) { }"}],[13070,{"text":"if ($is_reversed and $m1 == $m2)"}],[13046,{"text":"if ($$router{'model'}{'stateless'} and not $$rule{'oneway'})"}],[13117,{"text":"if $src_zone eq $in_zone"}],[13142,{"text":"unless $in_intf"}],[13146,{"text":"unless $$router{'managed'}"}],[13153,{"text":"unless is_filtered_at($mark, $dst, $$rule{'src'})"}],[13152,{"text":"if (my $mark = $$router{'local_mark'})"}],[13164,{"text":"if ($no_acl_zone eq $src_zone) { }"}],[13164,{"text":"elsif ($no_acl_zone eq $dst_zone) { }"}],[13164,{"text":"elsif ($$no_acl_intf{'main_interface'}) { }"}],[13160,{"text":"if (my $no_acl_intf = $$router{'no_in_acl'})"}],[13185,{"text":"$$router{'model'}{'has_io_acl'} ? :"}],[13193,{"text":"if $intf eq $in_intf"}],[13194,{"text":"if $$intf{'loopback'} and not $$intf{'vip'}"}],[13198,{"text":"if $zone eq $src_zone"}],[13199,{"text":"if $zone eq $dst_zone"}],[13200,{"text":"if $$intf{'main_interface'}"}],[13209,{"text":"$what eq 'src' ? :"}],[13215,{"text":"if $$rule{'no_check_supernet_rules'}"}],[13217,{"text":"unless my(@supernets) = grep({$$_{'has_other_subnet'};} @$list)"}],[13223,{"text":"unless is_network($obj)"}],[13233,{"text":"if zone_eq($zone, $other_zone)"}],[13247,{"text":"if $proto1 eq 'ip'"}],[13248,{"text":"if $proto2 eq 'ip'"}],[13249,{"text":"unless $proto1 eq $proto2"}],[13257,{"text":"unless defined $type1"}],[13259,{"text":"unless defined $type2"}],[13260,{"text":"unless $type1 == $type2"}],[13262,{"text":"unless defined $code1"}],[13264,{"text":"unless defined $code2"}],[13250,{"text":"if ($proto1 eq 'tcp' or $proto1 eq 'udp') { }"}],[13250,{"text":"elsif ($proto1 eq 'icmp') { }"}],[13276,{"text":"unless match_prt($prt1, $prt2)"}],[13288,{"text":"unless zone_eq($zone0, $zone)"}],[13322,{"text":"if $$rule{'no_check_supernet_rules'}"}],[13325,{"text":"unless $$obj{'has_other_subnet'}"}],[13328,{"text":"unless $$obj{'mask'} == 0"}],[13333,{"text":"unless keys %supernet2rules"}],[13335,{"text":"$$Netspoc::Compiler::Pass1::config{'check_transient_supernet_rules'} eq 'warn' ? :"}],[13341,{"text":"if $$rule1{'no_check_supernet_rules'}"}],[13344,{"text":"unless $$obj{'has_other_subnet'}"}],[13345,{"text":"unless $$obj{'mask'} == 0"}],[13349,{"text":"if @{$$obj{'zone'}{'interfaces'};} <= 1"}],[13351,{"text":"unless my $other_rules = $supernet2rules{$obj}"}],[13353,{"text":"unless match_prt_list($$rule1{'prt'}, $$rule2{'prt'})"}],[13354,{"text":"unless match_prt($$rule1{'src_range'} || $prt_ip, $$rule2{'src_range'} || $prt_ip)"}],[13367,{"text":"unless ((subset_of($src_list1, $src_list2) or subset_of($dst_list2, $dst_list1)) or elements_in_one_zone($src_list1, $dst_list2))"}],[13437,{"text":"unless $$router{'model'}{'stateless'} or $$router{'managed'} =~ /^(?:secondary|local.*)$/"}],[13435,{"text":"if ($$router{'managed'})"}],[13440,{"text":"if $$router{'active_path'}"}],[13443,{"text":"if $out_interface eq $in_interface"}],[13445,{"text":"if $$next_zone{'stateful_mark'}"}],[13457,{"text":"unless ($$zone{'stateful_mark'})"}],[13453,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_supernet_rules'})"}],[13467,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_transient_supernet_rules'})"}],[13487,{"text":"if $$rule{'oneway'}"}],[13494,{"text":"unless $proto eq 'tcp' or $proto eq 'udp' or $proto eq 'ip'"}],[13501,{"text":"if $proto eq 'tcp' and $deny"}],[13504,{"text":"unless @new_prt_group"}],[13522,{"text":"unless $out_intf"}],[13527,{"text":"unless $$router{'managed'}"}],[13541,{"text":"if $use_nonlocal_exit"}],[13530,{"text":"if ($$model{'stateless'} or not $in_intf and $$model{'stateless_self'})"}],[13510,{"text":"unless (defined $has_stateless_router)"}],[13549,{"text":"unless $has_stateless_router"}],[13565,{"text":"if $tcp_seen"}],[13573,{"text":"if ($$new_src_range{'range'} eq $aref_tcp_any)"}],[13577,{"text":"unless ($new_prt)"}],[13562,{"text":"if ($proto eq 'tcp') { }"}],[13562,{"text":"elsif ($proto eq 'udp') { }"}],[13562,{"text":"elsif ($proto eq 'ip') { }"}],[13605,{"text":"if $src_range ne $prt_ip"}],[13606,{"text":"if $deny"}],[13655,{"text":"if $$in_interface{'main_interface'}"}],[13658,{"text":"unless $managed =~ /^(?:secondary|local.*)$/"}],[13657,{"text":"if (my $managed = $$router{'managed'})"}],[13660,{"text":"if $$router{'secondary_mark'}"}],[13663,{"text":"if $out_interface eq $in_interface"}],[13664,{"text":"if $$out_interface{'main_interface'}"}],[13666,{"text":"if $$next_zone{'secondary_mark'}"}],[13683,{"text":"if $$in_interface{'main_interface'}"}],[13686,{"text":"if $managed eq 'primary'"}],[13685,{"text":"if (my $managed = $$router{'managed'})"}],[13688,{"text":"if $$router{'primary_mark'}"}],[13691,{"text":"if $out_interface eq $in_interface"}],[13692,{"text":"if $$out_interface{'main_interface'}"}],[13694,{"text":"if $$next_zone{'primary_mark'}"}],[13711,{"text":"if $$in_interface{'main_interface'}"}],[13714,{"text":"if $managed ne 'local_secondary'"}],[13713,{"text":"if (my $managed = $$router{'managed'})"}],[13716,{"text":"if $$router{'local_secondary_mark'}"}],[13719,{"text":"if $out_interface eq $in_interface"}],[13720,{"text":"if $$out_interface{'main_interface'}"}],[13722,{"text":"if $$next_zone{'local_secondary_mark'}"}],[13732,{"text":"if ($type eq 'Zone') { }"}],[13732,{"text":"elsif ($type eq 'Interface') { }"}],[13745,{"text":"if (1 == @$src_zones and 1 == @$dst_zones)"}],[13755,{"text":"unless $$_{$mark}"}],[13756,{"text":"unless $$_{$mark}"}],[13767,{"text":"unless ($$zone{'secondary_mark'})"}],[13770,{"text":"unless ($$zone{'primary_mark'})"}],[13773,{"text":"unless ($$zone{'local_secondary_mark'})"}],[13790,{"text":"if (have_different_marks($src_zones, $dst_zones, 'secondary_mark')) { }"}],[13790,{"text":"elsif (have_set_and_equal_marks($src_zones, $dst_zones, 'local_mark') and have_different_marks($src_zones, $dst_zones, 'local_secondary_mark')) { }"}],[13799,{"text":"if (have_different_marks($src_zones, $dst_zones, 'primary_mark'))"}],[13825,{"text":"unless my $href = $$network{'nat'}"}],[13828,{"text":"unless $$nat_network{'dynamic'}"}],[13829,{"text":"if $$nat_network{'hidden'}"}],[13831,{"text":"if $$obj{'nat'} and $$obj{'nat'}{$nat_tag}"}],[13840,{"text":"unless my $dynamic_nets = $zone2dynamic{$zone}"}],[13844,{"text":"if $managed eq 'primary' or $managed eq 'full'"}],[13862,{"text":"unless my $href = $$network{'nat'}"}],[13865,{"text":"if $$nat_network{'dynamic'}"}],[13873,{"text":"unless my $nat_domain = $$network{'nat_domain'}"}],[13884,{"text":"if $$result{$key}"}],[13894,{"text":"$in_intf ? :"}],[13895,{"text":"$out_intf ? :"}],[13899,{"text":"unless $$no_nat_set1{$nat_tag}"}],[13897,{"text":"if ($no_nat_set1)"}],[13903,{"text":"unless $$no_nat_set2{$nat_tag}"}],[13901,{"text":"if ($no_nat_set2)"}],[13919,{"text":"unless my $nat_hash = $$network{'nat'}"}],[13927,{"text":"$nat_domain ? :"}],[13931,{"text":"$$network{'has_dynamic_host'} ? :"}],[13932,{"text":"if $seen{$cache_obj}{$no_nat_set}++"}],[13936,{"text":"$reversed ? :"}],[13945,{"text":"if $$no_nat_set{$nat_tag}"}],[13951,{"text":"unless $hidden_seen++"}],[13950,{"text":"if ($$nat_network{'hidden'})"}],[13956,{"text":"unless ($$nat_network{'dynamic'})"}],[13969,{"text":"if $obj eq $network"}],[13972,{"text":"if $$obj{'nat'}{$nat_tag}"}],[13984,{"text":"unless $nat_tag"}],[13985,{"text":"if $$obj{'nat'}{$nat_tag}"}],[13986,{"text":"$reversed ? :"}],[13991,{"text":"$reversed2 ? :"}],[13990,{"text":"if (not $intf or zone_eq($$network{'zone'}, $$intf{'zone'}))"}],[14008,{"text":"if (grep {$$_{'proto'} =~ /^(?:udp|ip)$/;} @$prt_list)"}],[14000,{"text":"if ($$router{'model'}{'stateless'})"}],[14015,{"text":"unless $nat_seen"}],[14017,{"text":"if $hidden_seen"}],[14029,{"text":"unless $$nat_network{'dynamic'}"}],[14032,{"text":"unless $dyn_nat_hash"}],[14038,{"text":"unless ($active_nat_at)"}],[14046,{"text":"unless my $interfaces = $$active_nat_at{$nat_tag}"}],[14048,{"text":"unless $is_hidden or $static_seen"}],[14051,{"text":"$is_hidden ? :"}],[14052,{"text":"$reversed ? :"}],[14116,{"text":"if ($cmp_rule ne $chg_rule and $cmp_log eq $chg_log)"}],[14114,{"text":"if (my $cmp_rule = $$cmp_hash{$prt})"}],[14126,{"text":"unless $prt = $$prt{'up'}"}],[14102,{"text":"if (my $cmp_hash = $$cmp_hash{$dst})"}],[14130,{"text":"unless $dst = $$dst{'up'}"}],[14098,{"text":"if (my $cmp_hash = $$cmp_hash{$src})"}],[14134,{"text":"unless $src = $$src{'up'}"}],[14094,{"text":"if (my $cmp_hash = $$cmp_hash{$src_range})"}],[14138,{"text":"unless $src_range = $$src_range{'up'}"}],[14090,{"text":"if (my $cmp_hash = $$cmp_hash{$deny})"}],[14142,{"text":"if $deny"}],[14087,{"text":"if (my $cmp_hash = $$cmp_hash{$stateless})"}],[14147,{"text":"unless $stateless"}],[14163,{"text":"unless $out_intf"}],[14166,{"text":"unless $in_intf"}],[14169,{"text":"unless $$router{'managed'}"}],[14171,{"text":"unless $$model{'has_interface_level'}"}],[14197,{"text":"if ($$in_hw{'level'} > $$out_hw{'level'})"}],[14205,{"text":"unless my $nat_info = $$dst{'nat'}"}],[14206,{"text":"unless grep {$$nat_info{$_};} @$nat_tags"}],[14191,{"text":"if ($identity_nat) { }"}],[14191,{"text":"elsif (my $nat_tags = $$in_hw{'bind_nat'}) { }"}],[14216,{"text":"unless my $nat_tags = $$out_hw{'bind_nat'}"}],[14218,{"text":"unless my $nat_info = $$src{'nat'}"}],[14223,{"text":"unless $$nat_info{$_}"}],[14223,{"text":"unless my($nat_net) = map({() unless $$nat_info{$_};} @$nat_tags)"}],[14234,{"text":"if ($$nat_net{'dynamic'} and $$in_hw{'level'} < $$out_hw{'level'})"}],[14228,{"text":"if ($identity_nat)"}],[14248,{"text":"if ($$obj{'is_aggregate'}) { }"}],[14247,{"text":"if ($type eq 'Network') { }"}],[14247,{"text":"elsif ($type eq 'Subnet' or $type eq 'Interface') { }"}],[14268,{"text":"if fast_mode()"}],[14277,{"text":"unless ($info)"}],[14284,{"text":"if ($$info{'nat_path'})"}],[14294,{"text":"unless my $nat_path = $$info{'nat_path'}"}],[14326,{"text":"if ($$obj{'is_aggregate'}) { }"}],[14326,{"text":"elsif (my $max = $$obj{'max_routing_net'}) { }"}],[14338,{"text":"if (my $max = $$net{'max_routing_net'}) { }"}],[14325,{"text":"if ($type eq 'Network') { }"}],[14325,{"text":"elsif ($type eq 'Subnet' or $type eq 'Interface') { }"}],[14372,{"text":"if $$in_interface{'main_interface'}"}],[14374,{"text":"if $border_networks{$network}"}],[14379,{"text":"if $$out_interface{'zone'}"}],[14380,{"text":"if $$out_interface{'main_interface'}"}],[14384,{"text":"unless keys %hop_interfaces"}],[14393,{"text":"if $$router{'active_path'}"}],[14398,{"text":"if $$interface{'main_interface'}"}],[14401,{"text":"if ($hop_interfaces{$interface})"}],[14407,{"text":"if $interface eq $in_intf"}],[14411,{"text":"if $$cluster{$network}"}],[14416,{"text":"if $out_intf eq $interface"}],[14417,{"text":"if $$out_intf{'main_interface'}"}],[14425,{"text":"if $hop2cluster{$interface}"}],[14438,{"text":"if $hop2networks{$hop}"}],[14447,{"text":"if $border eq $in_border"}],[14452,{"text":"unless $hop_interfaces{$out_hop}"}],[14453,{"text":"if $hop2cluster{$out_hop} eq $cluster"}],[14474,{"text":"if $$interface{'main_interface'}"}],[14475,{"text":"if ($$interface{'zone'}) { }"}],[14484,{"text":"if (1 == @hop_intf or is_redundany_group(\\@hop_intf))"}],[14505,{"text":"if $network eq $border"}],[14527,{"text":"if $$in_intf{'routing'}"}],[14534,{"text":"if ($in_net eq $out_net) { }"}],[14564,{"text":"if $$interface{'routing'}"}],[14570,{"text":"if $network eq $intf_net"}],[14571,{"text":"unless my $hops = $$route_in_zone{'default'} || $$route_in_zone{$network}"}],[14605,{"text":"if ($in_intf and $out_intf) { }"}],[14605,{"text":"elsif (not $in_intf) { }"}],[14641,{"text":"$what eq 'src' ? :"}],[14636,{"text":"if ($src_zone eq $dst_zone and $is_intf)"}],[14661,{"text":"$is_intf eq 'dst' ? :"}],[14661,{"text":"$is_intf eq 'src' ? :"}],[14653,{"text":"if ($pseudo_rule = $$routing_tree{$src_zone}{$dst_zone}) { }"}],[14653,{"text":"elsif ($pseudo_rule = $$routing_tree{$dst_zone}{$src_zone}) { }"}],[14692,{"text":"$what eq 'src' ? :"}],[14696,{"text":"unless $$router{'managed'} or $$router{'routing_only'}"}],[14699,{"text":"$what eq 'src' ? :"}],[14690,{"text":"if ($is_intf)"}],[14729,{"text":"if (is_zone($dst_path)) { }"}],[14726,{"text":"if (is_zone($src_path)) { }"}],[14726,{"text":"elsif (is_zone($dst_path)) { }"}],[14806,{"text":"if $$src_intf{'router'} eq $$entry{'router'}"}],[14808,{"text":"if (grep {$$_{'router'} eq $$entry{'router'};} @$redun_intf)"}],[14807,{"text":"if (my $redun_intf = $$src_intf{'redundancy_interfaces'})"}],[14831,{"text":"if $$dst_intf{'router'} eq $$exit{'router'}"}],[14833,{"text":"if (grep {$$_{'router'} eq $$exit{'router'};} @$redun_intf)"}],[14832,{"text":"if (my $redun_intf = $$dst_intf{'redundancy_interfaces'})"}],[14890,{"text":"if $interface eq $hop"}],[14895,{"text":"if ($$hop2{'ip'} eq 'bridge') { }"}],[14894,{"text":"if ($network eq $network2)"}],[14915,{"text":"unless $$interface{'network'}{'bridged'}"}],[14917,{"text":"if $$hop{'ip'} ne 'bridged'"}],[14935,{"text":"unless $$interface{'ip'} eq 'tunnel'"}],[14939,{"text":"if $$real_intf{'routing'}"}],[14950,{"text":"if (not $$real_peer{'ip'} =~ /^(?:short|negotiated)$/) { }"}],[14968,{"text":"unless my $hops = $$route_in_zone{'default'} || $$route_in_zone{$peer_net}"}],[14986,{"text":"unless $in_intf"}],[14987,{"text":"unless $in_intf eq $real_intf"}],[14988,{"text":"unless $out_intf"}],[14989,{"text":"unless $$out_intf{'network'}"}],[15001,{"text":"unless my $hops = $$route_in_zone{'default'} || $$route_in_zone{$hop_net}"}],[14997,{"text":"if ($hop_net eq $real_net) { }"}],[14949,{"text":"if ($real_net eq $peer_net) { }"}],[14949,{"text":"elsif ($$real_net{'zone'} eq $$peer_net{'zone'}) { }"}],[15013,{"text":"unless $$_{'redundancy_interfaces'}"}],[15013,{"text":"if (@hops > 1 and equal(map({$_ unless $$_{'redundancy_interfaces'};} @hops)) or @hops == 1) { }"}],[15049,{"text":"if ($peer_net ne $real_net)"}],[15069,{"text":"if $$interface{'loop'} and $$interface{'routing'}"}],[15070,{"text":"if $$interface{'ip'} eq 'bridged'"}],[15081,{"text":"unless ($$interface{'routing'} or $$interface2{'routing'})"}],[15076,{"text":"if ($interface2 ne $interface)"}],[15075,{"text":"if (my $interface2 = $net2intf{$network}) { }"}],[15097,{"text":"if ($group)"}],[15106,{"text":"if ($group and $group2 and $group eq $group2) { }"}],[15100,{"text":"if (my $hop2 = $net2hop{$network}) { }"}],[15095,{"text":"unless ($$interface{'routing'})"}],[15130,{"text":"if @$hops == @{$$hop1{'redundancy_interfaces'};}"}],[15136,{"text":"if (@$hops == 1 and my $phys_hop = $$hop1{'orig_main'}) { }"}],[15171,{"text":"$$router{'vrf_members'} ? :"}],[15191,{"text":"if $$interface{'ip'} eq 'bridged'"}],[15192,{"text":"if ($$interface{'routing'})"}],[15200,{"text":"if ($asa_crypto and $$interface{'hub'})"}],[15213,{"text":"if $$nat_network{'hidden'}"}],[15215,{"text":"if ($ip == 0 and $mask == 0)"}],[15225,{"text":"unless @interfaces"}],[15241,{"text":"if $$interface{'hub'}"}],[15238,{"text":"if ($asa_crypto)"}],[15250,{"text":"unless my $ip2net = $inv_prefix_aref[$inv_prefix]"}],[15256,{"text":"unless $ip % $modulo == 0"}],[15261,{"text":"unless my $right = $$ip2net{$next_ip}"}],[15266,{"text":"unless $hop_left eq $hop_right"}],[15270,{"text":"if $inv_prefix_aref[$combined_inv_prefix]{$ip}"}],[15307,{"text":"unless my $ip2net = $mask2ip2net{$m}"}],[15308,{"text":"unless my $big = $mask2ip2net{$m}{$i}"}],[15312,{"text":"if ($net2hop_info{$big} eq $hop_info)"}],[15296,{"text":"unless ($asa_crypto and $$interface{'hub'})"}],[15345,{"text":"unless $intf2hop2nets{$interface}{$hop}"}],[15347,{"text":"if ($count > $max)"}],[15354,{"text":"if ($max_intf and $max_hop)"}],[15334,{"text":"if ($do_auto_default_route)"}],[15369,{"text":"$vrf ? :"}],[15369,{"text":"if $type eq 'IOS'"}],[15377,{"text":"$$interface{'ip'} =~ /^(?:unnumbered|negotiated|tunnel)$/ ? :"}],[15388,{"text":"if ($vrf and not $nxos_prefix)"}],[15383,{"text":"if ($type eq 'IOS') { }"}],[15383,{"text":"elsif ($type eq 'NX-OS') { }"}],[15383,{"text":"elsif ($type eq 'PIX') { }"}],[15383,{"text":"elsif ($type eq 'iproute') { }"}],[15383,{"text":"elsif ($type eq 'none') { }"}],[15432,{"text":"unless my $src_nat = $$in_hw{'src_nat'}"}],[15437,{"text":"unless my $net_hash = $$src_nat{$out_hw}"}],[15442,{"text":"unless $$a{'ip'} <=> $$b{'ip'} or $$a{'mask'} <=> $$b{'mask'}"}],[15465,{"text":"if $in_hidden or $out_hidden"}],[15469,{"text":"if ($out_dynamic and $in_dynamic and $out_dynamic eq $in_dynamic)"}],[15483,{"text":"if (my $out_host_ip = $$host{'nat'}{$out_dynamic})"}],[15477,{"text":"if ($out_dynamic) { }"}],[15531,{"text":"if $global_index and $nat_index"}],[15549,{"text":"$out_ip == $max ? :"}],[15540,{"text":"if ($out_ip == $out_intf_ip and $out_mask == 4294967295) { }"}],[15534,{"text":"unless ($global_index)"}],[15563,{"text":"if $$in_hw{'level'} < $$out_hw{'level'}"}],[15558,{"text":"if (not $nat_index)"}],[15578,{"text":"if ($$in_hw{'level'} > $$out_hw{'level'} or $$in_hw{'need_identity_nat'} or $in_ip != $out_ip)"}],[15595,{"text":"unless $$in_hw{'need_nat_0'}"}],[15605,{"text":"unless my $src_nat = $$in_hw{'src_nat'}"}],[15610,{"text":"unless my $net_hash = $$src_nat{$out_hw}"}],[15617,{"text":"unless my $identical = $$network{'is_identical'}"}],[15620,{"text":"if ($in and $out and $in eq $out)"}],[15637,{"text":"if ($$net_hash{$net} and $net2 = $$network{'is_in'}{$in_nat} and $$net_hash{$net2}) { }"}],[15659,{"text":"unless $$model{'has_interface_level'}"}],[15678,{"text":"unless $in_intf"}],[15680,{"text":"unless my $managed = $$router{'managed'}"}],[15689,{"text":"unless ($$model{'stateless'} or not $out_intf and $$model{'stateless_self'})"}],[15688,{"text":"if ($$rule{'stateless'})"}],[15700,{"text":"if $$rule{'stateless_icmp'} and not $$model{'stateless_icmp'}"}],[15703,{"text":"if $$in_intf{'loopback'}"}],[15714,{"text":"unless my $filter_at = $$net{'filter_at'}"}],[15719,{"text":"unless my(@matching_src) = grep({&$match($_);} @$src_list)"}],[15720,{"text":"unless my(@matching_dst) = grep({&$match($_);} @$dst_list)"}],[15726,{"text":"if (@$src_list != @matching_src)"}],[15729,{"text":"if (@$dst_list != @matching_dst)"}],[15709,{"text":"if (my $mark = $$router{'local_mark'})"}],[15740,{"text":"if $$model{'filter'} eq 'PIX'"}],[15746,{"text":"unless ($$in_intf{'hardware'}{'no_in_acl'})"}],[15737,{"text":"if (not $out_intf) { }"}],[15737,{"text":"elsif ($$out_intf{'hardware'}{'need_out_acl'}) { }"}],[15765,{"text":"unless my $id = $$src{'id'}"}],[15770,{"text":"unless $$src{'has_id_hosts'}"}],[15764,{"text":"if (is_subnet($src)) { }"}],[15764,{"text":"elsif (is_network($src)) { }"}],[15787,{"text":"if (@$src_list != @$id_src_list)"}],[15760,{"text":"if (my $id2rules = $$in_intf{'id_rules'})"}],[15794,{"text":"if ($$router{'no_crypto_filter'})"}],[15799,{"text":"unless ($$in_intf{'id_rules'})"}],[15754,{"text":"if ($$in_intf{'ip'} eq 'tunnel') { }"}],[15754,{"text":"elsif ($key eq 'out_rules') { }"}],[15754,{"text":"elsif ($key eq 'rules' and $$model{'has_io_acl'}) { }"}],[15842,{"text":"if ($$hardware{'need_out_acl'})"}],[15835,{"text":"if ($has_io_acl) { }"}],[15828,{"text":"if ($$hardware{'crosslink'})"}],[15863,{"text":"if ($has_io_acl) { }"}],[15854,{"text":"if ($$interface{'reroute_permit'})"}],[15878,{"text":"if (my $dst_range = $$prt{'dst_range'})"}],[15876,{"text":"unless ($$routing{'name'} =~ /^(?:manual|dynamic)$/)"}],[15875,{"text":"if (my $routing = $$interface{'routing'})"}],[15912,{"text":"if (my $dst_range = $$prt{'dst_range'})"}],[15908,{"text":"if (my $type = $$interface{'redundancy_type'})"}],[15924,{"text":"if ($$interface{'dhcp_server'})"}],[15940,{"text":"$$_{'main_prt'} ? :"}],[15940,{"text":"ref $_ eq 'ARRAY' ? :"}],[15955,{"text":"unless my $general_permit = $$router{'general_permit'}"}],[15959,{"text":"if $$in_intf{'main_interface'}"}],[15965,{"text":"$id_rules ? :"}],[15974,{"text":"if $out_intf eq $in_intf"}],[15975,{"text":"if $$out_intf{'ip'} eq 'tunnel'"}],[15985,{"text":"if $out_intf eq $in_intf"}],[15997,{"text":"if ($$out_hw{'need_out_acl'})"}],[15990,{"text":"if ($need_protect)"}],[16002,{"text":"if $$out_intf{'main_interface'}"}],[16009,{"text":"if $$in_intf{'ip'} eq 'bridged'"}],[15963,{"text":"if ($$in_intf{'is_hub'}) { }"}],[16018,{"text":"if fast_mode()"}],[16053,{"text":"if ($$obj{'ip'} eq 'unnumbered') { }"}],[16063,{"text":"if (my $ip = $$obj{'nat'}{$nat_tag}) { }"}],[16062,{"text":"if (my $nat_tag = $$network{'dynamic'}) { }"}],[16082,{"text":"if ($$obj{'ip'} =~ /^(unnumbered|short)$/)"}],[16093,{"text":"if (my $ip = $$obj{'nat'}{$nat_tag}) { }"}],[16088,{"text":"if ($$obj{'ip'} eq 'negotiated') { }"}],[16088,{"text":"elsif (my $nat_tag = $$network{'dynamic'}) { }"}],[16050,{"text":"if ($type eq 'Network') { }"}],[16050,{"text":"elsif ($type eq 'Subnet') { }"}],[16050,{"text":"elsif ($type eq 'Interface') { }"}],[16132,{"text":"$prefix_code == 32 ? :"}],[16160,{"text":"if $$rule{'deny'}"}],[16167,{"text":"if $$dst_network{'mask'} == 0"}],[16171,{"text":"unless $$a{'ip'} <=> $$b{'ip'}"}],[16228,{"text":"if $asa_vpn_attr_need_value{$key}"}],[16227,{"text":"if (defined $value)"}],[16239,{"text":"unless $$interface{'ip'} eq 'tunnel'"}],[16275,{"text":"if ($$split_tunnel_nets[$i] ne $$cached_nets[$i])"}],[16270,{"text":"if (my $href = $split_t_cache{@$split_tunnel_nets})"}],[16288,{"text":"if (@$split_tunnel_nets) { }"}],[16285,{"text":"unless ($acl_name)"}],[16257,{"text":"if (not defined $split_tunnel_policy) { }"}],[16257,{"text":"elsif ($split_tunnel_policy eq 'tunnelall') { }"}],[16257,{"text":"elsif ($split_tunnel_policy eq 'tunnelspecified') { }"}],[16342,{"text":"if (%$attributes)"}],[16351,{"text":"if $group_policy_name"}],[16362,{"text":"if ($id =~ /^@/)"}],[16380,{"text":"defined $value ? :"}],[16378,{"text":"if ($spec and $$spec{'tg_general'})"}],[16334,{"text":"if ($$src{'mask'} == 4294967295) { }"}],[16448,{"text":"unless my $id = $$interface{'peers'}[0]{'id'}"}],[16453,{"text":"if (keys %$attributes)"}],[16461,{"text":"if $group_policy_name"}],[16242,{"text":"if (my $hash = $$interface{'id_rules'}) { }"}],[16468,{"text":"if (keys %cert_group_map or keys %single_cert_map)"}],[16489,{"text":"if $$model{'filter'} ne 'iptables'"}],[16522,{"text":"if $$model{'filter'} ne 'iptables'"}],[16537,{"text":"if $$hardware{'loopback'}"}],[16588,{"text":"if $$hardware{'loopback'}"}],[16591,{"text":"if $$hardware{'name'} eq 'device' and $$model{'class'} eq 'ASA'"}],[16601,{"text":"if $suffix eq 'out' and not $$hardware{'need_out_acl'}"}],[16608,{"text":"unless @$rules != 1"}],[16605,{"text":"unless (grep {my $rules = $$hardware{$_} || [];\n$$rules[0] ne $permit_any_rule unless @$rules != 1;} 'rules', 'intf_rules')"}],[16604,{"text":"unless ($$model{'need_acl'})"}],[16624,{"text":"$hardware eq $hw0 ? :"}],[16622,{"text":"if ($$router{'acl_use_real_ip'})"}],[16637,{"text":"if ($$router{'need_protect'})"}],[16640,{"text":"if ($$hardware{'no_in_acl'}) { }"}],[16656,{"text":"if $$zone{'zone_cluster'}"}],[16669,{"text":"unless @redundant == @interfaces and equal(@redundant)"}],[16662,{"text":"if (@interfaces > 1)"}],[16674,{"text":"if ($intf_ok == @{$$hardware{'interfaces'};})"}],[16647,{"text":"if ($managed_local)"}],[16631,{"text":"if ($suffix eq 'in') { }"}],[16691,{"text":"if ($filter eq 'IOS' or $filter eq 'NX-OS') { }"}],[16691,{"text":"elsif ($filter eq 'ACE') { }"}],[16691,{"text":"elsif ($filter eq 'PIX') { }"}],[16721,{"text":"if ($filter eq 'iptables') { }"}],[16740,{"text":"unless @tunnel_intf == 1"}],[16745,{"text":"if $_ ne $wan_intf"}],[16786,{"text":"if $$tunnel_intf{'crypto'}{'detailed_crypto_acl'}"}],[16829,{"text":"$is_hub ? :"}],[16831,{"text":"$detailed ? :"}],[16833,{"text":"unless $is_hub"}],[16855,{"text":"if $$router{'no_crypto_filter'}"}],[16883,{"text":"if ($crypto_filter_name)"}],[16889,{"text":"if ($$isakmp{'ike_version'} == 2) { }"}],[16888,{"text":"if ($crypto_type eq 'ASA') { }"}],[16900,{"text":"if (my $pfs_group = $$ipsec{'pfs_group'})"}],[16907,{"text":"unless ($lifetime == 3600 and $crypto_type eq 'IOS')"}],[16904,{"text":"if (my $lifetime = $$ipsec{'lifetime'})"}],[16926,{"text":"if ($$isakmp{'ike_version'} == 2) { }"}],[16924,{"text":"if ($authentication eq 'rsasig') { }"}],[16987,{"text":"if ($crypto_type eq 'IOS') { }"}],[16987,{"text":"elsif ($crypto_type eq 'ASA') { }"}],[16996,{"text":"if ($crypto_type eq 'IOS') { }"}],[16996,{"text":"elsif ($crypto_type eq 'ASA') { }"}],[17023,{"text":"if (my $id = $$peer{'id'})"}],[17015,{"text":"if ($crypto_type eq 'ASA')"}],[17036,{"text":"unless $crypto_type eq 'ASA'"}],[17095,{"text":"unless @ipsec"}],[17103,{"text":"if ($crypto_type eq 'EZVPN')"}],[17111,{"text":"if ($crypto_type =~ /^ASA/)"}],[17116,{"text":"if ($crypto_type eq 'ASA_VPN')"}],[17123,{"text":"if ($crypto_type eq 'ASA_EZVPN')"}],[17127,{"text":"unless $crypto_type =~ /^(:?IOS|ASA)$/"}],[17134,{"text":"unless $crypto_type eq 'IOS'"}],[17144,{"text":"unless ($authentication eq 'rsa-sig')"}],[17150,{"text":"$crypto_type eq 'ASA' ? :"}],[17149,{"text":"if ($encryption =~ /^aes(\\d+)$/)"}],[17162,{"text":"unless ($lifetime == 86400)"}],[17179,{"text":"if (my $ah = $$ipsec{'ah'})"}],[17183,{"text":"if (not my $esp = $$ipsec{'esp_encryption'}) { }"}],[17183,{"text":"elsif ($esp =~ /^(aes|des|3des)$/) { }"}],[17183,{"text":"elsif ($esp =~ /^aes(192|256)$/) { }"}],[17193,{"text":"if (my $esp_ah = $$ipsec{'esp_authentication'})"}],[17202,{"text":"if (my $ah = $$ipsec{'ah'})"}],[17212,{"text":"$crypto_type eq 'ASA' ? :"}],[17205,{"text":"if (not my $esp = $$ipsec{'esp_encryption'}) { }"}],[17205,{"text":"elsif ($esp =~ /^(aes|des|3des)$/) { }"}],[17205,{"text":"elsif ($esp =~ /^aes(192|256)$/) { }"}],[17215,{"text":"if (my $esp_ah = $$ipsec{'esp_authentication'})"}],[17218,{"text":"$crypto_type eq 'ASA' ? :"}],[17177,{"text":"if ($crypto_type eq 'ASA' and $$isakmp{'ike_version'} == 2) { }"}],[17230,{"text":"unless $$interface{'ip'} eq 'tunnel'"}],[17232,{"text":"if ($ip =~ /^(?:negotiated|short|unnumbered)$/) { }"}],[17248,{"text":"if (my $interfaces = $hardware2crypto{$hardware})"}],[17253,{"text":"if (my $interfaces = $hardware2dyn_crypto{$hardware})"}],[17260,{"text":"unless $have_crypto_map"}],[17261,{"text":"if ($crypto_type eq 'IOS') { }"}],[17261,{"text":"elsif ($crypto_type eq 'ASA') { }"}],[17274,{"text":"unless $$model{'print_interface'}"}],[17279,{"text":"if $name eq 'VIP' and $$model{'has_vip'}"}],[17298,{"text":"if $secondary"}],[17304,{"text":"if $secondary"}],[17285,{"text":"if ($ip eq 'tunnel') { }"}],[17285,{"text":"elsif ($ip eq 'unnumbered') { }"}],[17285,{"text":"elsif ($ip eq 'negotiated') { }"}],[17285,{"text":"elsif ($$model{'use_prefix'}) { }"}],[17310,{"text":"if ($class eq 'NX-OS') { }"}],[17309,{"text":"if (my $vrf = $$router{'vrf'})"}],[17321,{"text":"if ($class eq 'IOS' and $stateful and not $$hardware{'loopback'})"}],[17324,{"text":"if (my $other = $$hardware{'subcmd'})"}],[17329,{"text":"if $class eq 'ACE'"}],[17350,{"text":"if (my $result = $prt2code{$prt})"}],[17358,{"text":"if $$prt{'established'}"}],[17361,{"text":"if (defined(my $type = $$prt{'type'}))"}],[17364,{"text":"if (defined(my $code = $$prt{'code'}))"}],[17356,{"text":"if ($proto eq 'tcp' or $proto eq 'udp') { }"}],[17356,{"text":"elsif ($proto eq 'icmp') { }"}],[17405,{"text":"if ($$model{'has_vip'})"}],[17400,{"text":"unless ($need_protect)"}],[17387,{"text":"if ($$router{'need_protect'} or $$router{'crosslink_interfaces'})"}],[17411,{"text":"unless my $aref = delete $$router{'acl_list'}"}],[17426,{"text":"if ($need_protect and delete $$acl{'protect_self'})"}],[17436,{"text":"unless my $rules = $$acl{$what}"}],[17441,{"text":"if $deny"}],[17452,{"text":"if ($normalized eq ':subst') { }"}],[17449,{"text":"if (my $modifier = $$active_log{$tag}) { }"}],[17448,{"text":"if (exists $$active_log{$tag})"}],[17446,{"text":"if ($active_log and my $log = $$rule{'log'})"}],[17468,{"text":"if ($log_code) { }"}],[17468,{"text":"elsif ($$router{'log_deny'} and $deny) { }"}],[17494,{"text":"if $$obj{'id'}"}],[17493,{"text":"if ($type eq 'Subnet')"}],[17499,{"text":"if ($$obj{'has_id_hosts'})"}],[17489,{"text":"if ($do_auth)"}],[17508,{"text":"if $$net{'has_other_subnet'}"}],[17512,{"text":"if ($$no_opt{$net})"}],[17509,{"text":"if (my $no_opt = $$router{'no_secondary_opt'})"}],[17518,{"text":"if (my $max = $$subst{'max_secondary_net'})"}],[17523,{"text":"if $$subst{'mask'} == 4294967295"}],[17533,{"text":"if ($$obj{'has_other_subnet'})"}],[17538,{"text":"unless my $max = $$obj{'max_secondary_net'}"}],[17506,{"text":"if ($type eq 'Subnet' or $type eq 'Interface') { }"}],[17475,{"text":"if ($secondary_filter and $$rule{'some_non_secondary'} or $standard_filter and $$rule{'some_primary'})"}],[17553,{"text":"if (my $src_range = $$rule{'src_range'})"}],[17572,{"text":"if (values %opt_addr)"}],[17578,{"text":"if (values %no_opt_addrs)"}],[17592,{"text":"if (my $filter_only = $$router{'filter_only'})"}],[17598,{"text":"unless ($$router{'no_group_code'})"}],[17597,{"text":"if ($$model{'can_objectgroup'})"}],[17603,{"text":"if ($$router{'log_deny'})"}],[17615,{"text":"unless mkdir $dir"}],[17619,{"text":"unless -d $dir"}],[17630,{"text":"unless mkdir $prev"}],[17632,{"text":"unless system('mv', @old_files, $prev) == 0"}],[17624,{"text":"if (my $count = @old_files)"}],[17622,{"text":"unless (-d $prev)"}],[17614,{"text":"if (not -e $dir) { }"}],[17652,{"text":"if $seen{$router}"}],[17655,{"text":"if $$router{'orig_router'}"}],[17668,{"text":"unless open my $code_fd, '>', $config_file"}],[17676,{"text":"if (my $orig_interfaces = $$router{'orig_interfaces'})"}],[17683,{"text":"if (my $members = $$router{'vrf_members'}) { }"}],[17696,{"text":"$ips ? :"}],[17698,{"text":"if (@ips)"}],[17693,{"text":"if ($$router{'policy_distribution_point'})"}],[17708,{"text":"if ($$router{'managed'}) { }"}],[17723,{"text":"unless close $code_fd"}],[17729,{"text":"unless open my $acl_fd, '>', $acl_file"}],[17732,{"text":"unless close $acl_fd"}],[17740,{"text":"unless defined $in_path and -d $in_path"}],[17741,{"text":"unless defined $out_dir"}],[17751,{"text":"unless -d $raw_dir"}],[17761,{"text":"unless opendir my $dh, $raw_dir"}],[17763,{"text":"if $file =~ /^\\./"}],[17764,{"text":"if $file =~ /$$Netspoc::Compiler::Pass1::config{'ignore_files'}/o"}],[17769,{"text":"unless (-f $raw_path)"}],[17773,{"text":"unless ($device_names{$file})"}],[17778,{"text":"unless system(\"cp -f $raw_path $copy\") == 0"}],[17819,{"text":"unless ($err_count)"}],[17817,{"text":"if ($status != 0)"}],[17815,{"text":"if (not close $child_fd)"}],[17835,{"text":"unless open STDERR, '>&STDOUT'"}],[17838,{"text":"if $$Netspoc::Compiler::Pass1::config{'time_stamps'}"}],[17843,{"text":"unless ($@ =~ /^Aborted /)"}],[17840,{"text":"if ($@)"}],[17794,{"text":"if (1 >= $$Netspoc::Compiler::Pass1::config{'concurrency_pass1'}) { }"}],[17794,{"text":"elsif (my $child_pid = open(my $child_fd, '-|')) { }"}],[17794,{"text":"elsif (defined $child_pid) { }"}],[18073,{"text":"if ($out_dir)"}]]}
{"start":{"1309":{"errorsub":[{"pod":17,"branch":63,"subroutine":21,"time":null,"condition":34,"statement":217}]},"765":{"__ANON__":[{"subroutine":14,"branch":21,"pod":13,"statement":99,"condition":10,"time":null}]},"1473":{"input_streams":[{"pod":24,"branch":68,"subroutine":28,"time":null,"condition":35,"statement":231}]},"490":{"begin_pod":[{"branch":null,"pod":6,"subroutine":6,"time":null,"statement":17,"condition":1}]},"1374":{"parseopts":[{"condition":34,"statement":219,"time":null,"subroutine":23,"branch":65,"pod":19}]},"1330":{"cutting":[{"statement":218,"condition":34,"time":null,"subroutine":22,"branch":64,"pod":18}]},"1543":{"_push_input_stream":[{"pod":26,"branch":68,"subroutine":30,"time":null,"statement":233,"condition":36}]},"737":{"parse_text":[{"time":null,"condition":1,"statement":25,"branch":null,"pod":12,"subroutine":12}]},"553":{"end_pod":[{"time":null,"statement":20,"condition":1,"branch":null,"pod":9,"subroutine":9}]},"1601":{"_pop_input_stream":[{"branch":75,"pod":26,"subroutine":31,"time":null,"statement":250,"condition":36}]},"1410":{"output_handle":[{"pod":21,"branch":68,"subroutine":25,"time":null,"statement":228,"condition":35}]},"919":{"parse_paragraph":[{"subroutine":18,"branch":21,"pod":14,"condition":10,"statement":103,"time":null}]},"766":{"__ANON__":[{"time":null,"statement":99,"condition":10,"pod":13,"branch":21,"subroutine":15}]},"1396":{"output_file":[{"branch":68,"pod":20,"subroutine":24,"time":null,"condition":35,"statement":227}]},"1438":{"input_handle":[{"statement":230,"condition":35,"time":null,"subroutine":27,"branch":68,"pod":23}]},"271":{"command":[{"subroutine":null,"pod":null,"branch":null,"statement":null,"condition":null,"time":null}]},"1497":{"top_stream":[{"subroutine":29,"pod":25,"branch":68,"statement":232,"condition":35,"time":null}]},"625":{"preprocess_paragraph":[{"time":null,"statement":23,"condition":1,"branch":null,"pod":11,"subroutine":11}]},"536":{"end_input":[{"branch":null,"pod":8,"subroutine":8,"time":null,"statement":19,"condition":1}]},"473":{"initialize":[{"subroutine":5,"branch":null,"pod":5,"statement":16,"condition":1,"time":null}]},"893":{"interpolate":[{"time":null,"statement":99,"condition":10,"branch":21,"pod":13,"subroutine":17}]},"585":{"preprocess_line":[{"branch":null,"pod":10,"subroutine":10,"time":null,"condition":1,"statement":21}]},"1424":{"input_file":[{"pod":22,"branch":68,"subroutine":26,"time":null,"condition":35,"statement":229}]},"760":{"__ANON__":[{"pod":13,"branch":21,"subroutine":13,"time":null,"statement":99,"condition":10}]},"356":{"textblock":[{"pod":2,"branch":null,"subroutine":2,"time":null,"statement":5,"condition":null}]},"392":{"interior_sequence":[{"condition":null,"statement":8,"time":null,"subroutine":3,"branch":null,"pod":3}]},"310":{"verbatim":[{"subroutine":1,"pod":1,"branch":null,"condition":null,"statement":2,"time":null}]},"449":{"new":[{"time":null,"statement":10,"condition":null,"pod":4,"branch":null,"subroutine":4}]},"-1":{"__COVER__":[{"time":null,"statement":265,"condition":36,"pod":26,"branch":78,"subroutine":32}]},"767":{"__ANON__":[{"subroutine":16,"pod":13,"branch":21,"condition":10,"statement":99,"time":null}]},"513":{"begin_input":[{"time":null,"statement":18,"condition":1,"pod":7,"branch":null,"subroutine":7}]},"1172":{"parse_from_file":[{"subroutine":20,"branch":47,"pod":16,"statement":174,"condition":23,"time":null}]},"1067":{"parse_from_filehandle":[{"subroutine":19,"branch":39,"pod":15,"condition":18,"statement":144,"time":null}]}},"branch":[[741,{"text":"ref $_[0] ? :"}],[755,{"text":"if (defined $expand_seq and $expand_seq eq 'interior_sequence')"}],[765,{"text":"unless ref $xseq_sub"}],[766,{"text":"unless ref $xtext_sub"}],[767,{"text":"unless ref $xptree_sub"}],[800,{"text":"if @seq_stack > 1"}],[815,{"text":"if length $post_seq"}],[807,{"text":"if ($ldelim eq '<' and /\\A(.*?)(>)/s or /\\A(.*?)(\\s+$rdelim)/s)"}],[820,{"text":"$expand_text ? :"}],[817,{"text":"if (length $_)"}],[829,{"text":"$expand_seq ? :"}],[832,{"text":"if (@seq_stack > 1) { }"}],[823,{"text":"if (length $seq_end)"}],[844,{"text":"$expand_text ? :"}],[789,{"text":"if (/^([A-Z])(<(?:<+(?:\\r?\\n|[ \\t]))?)$/) { }"}],[789,{"text":"elsif (@seq_stack > 1) { }"}],[789,{"text":"elsif (length $_) { }"}],[853,{"text":"@seq_stack > 1 ? :"}],[862,{"text":"unless ref $errorsub and &{$errorsub;}($errmsg) or defined $errorsub and $self->$errorsub($errmsg)"}],[865,{"text":"$expand_seq ? :"}],[871,{"text":"$expand_ptree ? :"}],[928,{"text":"if $text =~ /^={1,2}\\S/"}],[931,{"text":"if $wantNonPods"}],[934,{"text":"if $Pod::Parser::myData{'_CUTTING'}"}],[949,{"text":"unless $self->is_selected($text)"}],[948,{"text":"if (exists $Pod::Parser::myData{'_SELECTED_SECTIONS'})"}],[956,{"text":"unless defined $text and length $text"}],[957,{"text":"if $Pod::Parser::myData{'_CUTTING'}"}],[954,{"text":"unless ($wantNonPods)"}],[970,{"text":"unless defined $sep"}],[971,{"text":"unless defined $text"}],[976,{"text":"unless $Pod::Parser::myOpts{'-process_cut_cmd'}"}],[974,{"text":"if ($cmd eq 'cut')"}],[963,{"text":"if ($text =~ /^(={1,2})(?=\\S)/)"}],[1003,{"text":"unless ref $errorsub and &{$errorsub;}($errmsg) or defined $errorsub and $self->$errorsub($errmsg)"}],[997,{"text":"if ($Pod::Parser::myData{'_WHITESPACE'} and $Pod::Parser::myOpts{'-warnings'} and not $text =~ /^\\s+/ && ($Pod::Parser::myData{'_PREVIOUS'} || '') eq 'verbatim')"}],[1008,{"text":"if (length $cmd) { }"}],[1008,{"text":"elsif ($text =~ /^\\s+/) { }"}],[1026,{"text":"$text =~ /^[^\\S\\r\\n]+\\r*\\Z/m ? :"}],[1068,{"text":"ref $_[0] eq 'HASH' ? :"}],[1070,{"text":"unless $in_fh"}],[1078,{"text":"if exists $opts{-'cutting'}"}],[1089,{"text":"$tied_fh ? :"}],[1091,{"text":"unless defined $textline and length $textline"}],[1093,{"text":"if (not length $paragraph and $textline =~ /^==/) { }"}],[1106,{"text":"unless $textline =~ /^[^\\S\\r\\n]*[\\r\\n]*$/ and length $paragraph"}],[1115,{"text":"if (length $paragraph)"}],[1173,{"text":"ref $_[0] eq 'HASH' ? :"}],[1176,{"text":"if ($] < 5.006)"}],[1185,{"text":"if (ref($infile) =~ /^(SCALAR|ARRAY|HASH|CODE|REF)$/)"}],[1204,{"text":"unless open $in_fh, \"< $infile\""}],[1184,{"text":"if (defined $infile and ref $infile) { }"}],[1184,{"text":"elsif (not defined $infile && length $infile or $infile eq '-' or $infile =~ /^<&(?:STDIN|0)$/i) { }"}],[1218,{"text":"if (ref($outfile) =~ /^(ARRAY|HASH|CODE)$/) { }"}],[1218,{"text":"elsif (ref $outfile eq 'SCALAR') { }"}],[1239,{"text":"if (defined $Pod::Parser::myData{'_TOP_STREAM'}) { }"}],[1257,{"text":"if -d $outfile"}],[1258,{"text":"unless open $out_fh, \"> $outfile\""}],[1216,{"text":"if (ref $outfile) { }"}],[1216,{"text":"elsif (not defined $outfile && length $outfile or $outfile eq '-' or $outfile =~ /^>&?(?:STDOUT|1)$/i) { }"}],[1216,{"text":"elsif ($outfile =~ /^>&(STDERR|2)$/i) { }"}],[1268,{"text":"if $close_input"}],[1270,{"text":"if $close_output"}],[1309,{"text":"@_ > 1 ? :"}],[1330,{"text":"@_ > 1 ? :"}],[1376,{"text":"if @_ == 0"}],[1379,{"text":"ref $_ ? :"}],[1377,{"text":"if (@_ == 1)"}],[1554,{"text":"unless defined $out_fh"}],[1553,{"text":"unless (defined $Pod::Parser::myData{'_TOP_STREAM'})"}],[1560,{"text":"unless defined $Pod::Parser::myData{'_OUTFILE'}"}],[1561,{"text":"if defined $out_fh"}],[1562,{"text":"unless defined $in_fh"}],[1563,{"text":"unless defined $Pod::Parser::myData{'_INFILE'}"}],[1575,{"text":"if @Pod::Parser::input_stack == 1"}],[1606,{"text":"if @Pod::Parser::input_stack > 0"}],[1607,{"text":"if @Pod::Parser::input_stack == 1"}],[1616,{"text":"if (@Pod::Parser::input_stack > 0) { }"}]],"digest":"46b8f345e441d459ddd2291e7533c002","condition":[[450,{"type":"or_3","left":"ref $this","right":"$this","op":"||"}],[742,{"op":"||","right":"undef","left":"$opts{'-expand_seq'}","type":"or_2"}],[743,{"left":"$opts{'-expand_text'}","type":"or_2","op":"||","right":"undef"}],[744,{"op":"||","right":"undef","type":"or_2","left":"$opts{'-expand_ptree'}"}],[755,{"right":"$expand_seq eq 'interior_sequence'","op":"and","left":"defined $expand_seq","type":"and_3"}],[807,{"op":"and","right":"/\\A(.*?)(>)/s","type":"and_3","left":"$ldelim eq '<'"}],[807,{"left":"$ldelim eq '<' and /\\A(.*?)(>)/s","type":"or_3","op":"or","right":"/\\A(.*?)(\\s+$rdelim)/s"}],[862,{"left":"ref $errorsub","type":"and_3","op":"and","right":"&{$errorsub;}($errmsg)"}],[862,{"right":"$self->$errorsub($errmsg)","op":"and","left":"defined $errorsub","type":"and_3"}],[862,{"left":"ref $errorsub and &{$errorsub;}($errmsg)","type":"or_3","op":"or","right":"defined $errorsub and $self->$errorsub($errmsg)"}],[921,{"type":"or_2","left":"$Pod::Parser::myData{'_PARSEOPTS'}","right":"{}","op":"||="}],[956,{"op":"and","right":"length $text","type":"and_3","left":"defined $text"}],[997,{"left":"$Pod::Parser::myData{'_WHITESPACE'}","type":"and_3","op":"and","right":"$Pod::Parser::myOpts{'-warnings'}"}],[997,{"type":"and_3","left":"$text =~ /^\\s+/","op":"&&","right":"($Pod::Parser::myData{'_PREVIOUS'} || '') eq 'verbatim'"}],[997,{"type":"and_3","left":"$Pod::Parser::myData{'_WHITESPACE'} and $Pod::Parser::myOpts{'-warnings'}","right":"not $text =~ /^\\s+/ && ($Pod::Parser::myData{'_PREVIOUS'} || '') eq 'verbatim'","op":"and"}],[1003,{"left":"ref $errorsub","type":"and_3","right":"&{$errorsub;}($errmsg)","op":"and"}],[1003,{"right":"$self->$errorsub($errmsg)","op":"and","left":"defined $errorsub","type":"and_3"}],[1003,{"type":"or_3","left":"ref $errorsub and &{$errorsub;}($errmsg)","right":"defined $errorsub and $self->$errorsub($errmsg)","op":"or"}],[1072,{"right":"{}","op":"||=","type":"or_2","left":"$Pod::Parser::myData{'_PARSEOPTS'}"}],[1086,{"type":"or_3","left":"/^(?:GLOB|FileHandle|IO::\\w+)$/","right":"tied $in_fh","op":"||"}],[1091,{"right":"length $textline","op":"and","type":"and_3","left":"defined $textline"}],[1093,{"left":"not length $paragraph","type":"and_3","op":"and","right":"$textline =~ /^==/"}],[1106,{"op":"and","right":"length $paragraph","left":"$textline =~ /^[^\\S\\r\\n]*[\\r\\n]*$/","type":"and_3"}],[1184,{"right":"ref $infile","op":"and","left":"defined $infile","type":"and_3"}],[1184,{"right":"length $infile","op":"&&","left":"defined $infile","type":"and_3"}],[1184,{"op":"or","right":"$infile eq '-'","type":"or_3","left":"not defined $infile && length $infile"}],[1184,{"type":"or_3","left":"not defined $infile && length $infile or $infile eq '-'","right":"$infile =~ /^<&(?:STDIN|0)$/i","op":"or"}],[1197,{"left":"$infile","type":"or_2","right":"'-'","op":"||="}],[1216,{"right":"length $outfile","op":"&&","type":"and_3","left":"defined $outfile"}],[1216,{"type":"or_3","left":"not defined $outfile && length $outfile","right":"$outfile eq '-'","op":"or"}],[1216,{"right":"$outfile =~ /^>&?(?:STDOUT|1)$/i","op":"or","left":"not defined $outfile && length $outfile or $outfile eq '-'","type":"or_3"}],[1244,{"type":"or_2","left":"$outfile","op":"||=","right":"'-'"}],[1268,{"op":"or","right":"croak(\"Can't close $infile after reading: $!\\n\")","left":"close $in_fh","type":"or_3"}],[1270,{"type":"or_3","left":"close $out_fh","right":"croak(\"Can't close $outfile after writing: $!\\n\")","op":"or"}],[1375,{"op":"||=","right":"{}","type":"or_2","left":"$Pod::Parser::myData{'_PARSEOPTS'}"}],[1497,{"type":"or_2","left":"$_[0]{'_TOP_STREAM'}","op":"||","right":"undef"}]],"file":"/usr/local/lib/perl5/5.20.1/Pod/Parser.pm","pod":[[271,"command"],[310,"verbatim"],[356,"textblock"],[392,"interior_sequence"],[449,"new"],[473,"initialize"],[490,"begin_pod"],[513,"begin_input"],[536,"end_input"],[553,"end_pod"],[585,"preprocess_line"],[625,"preprocess_paragraph"],[737,"parse_text"],[893,"interpolate"],[919,"parse_paragraph"],[1067,"parse_from_filehandle"],[1172,"parse_from_file"],[1309,"errorsub"],[1330,"cutting"],[1374,"parseopts"],[1396,"output_file"],[1410,"output_handle"],[1424,"input_file"],[1438,"input_handle"],[1473,"input_streams"],[1497,"top_stream"]],"subroutine":[[271,"command"],[310,"verbatim"],[356,"textblock"],[392,"interior_sequence"],[449,"new"],[473,"initialize"],[490,"begin_pod"],[513,"begin_input"],[536,"end_input"],[553,"end_pod"],[585,"preprocess_line"],[625,"preprocess_paragraph"],[737,"parse_text"],[760,"__ANON__"],[765,"__ANON__"],[766,"__ANON__"],[767,"__ANON__"],[893,"interpolate"],[919,"parse_paragraph"],[1067,"parse_from_filehandle"],[1172,"parse_from_file"],[1309,"errorsub"],[1330,"cutting"],[1374,"parseopts"],[1396,"output_file"],[1410,"output_handle"],[1424,"input_file"],[1438,"input_handle"],[1473,"input_streams"],[1497,"top_stream"],[1543,"_push_input_stream"],[1601,"_pop_input_stream"]],"statement":[271,273,310,311,312,356,357,358,392,394,449,450,453,455,456,457,473,490,513,536,553,585,586,625,626,737,738,741,741,742,743,744,746,747,748,749,752,753,754,755,763,760,761,762,765,765,766,766,767,767,778,779,780,784,785,786,787,789,791,792,793,794,795,800,801,806,807,813,814,815,817,820,821,823,825,827,829,832,833,834,835,837,844,847,849,853,854,855,856,857,858,859,860,862,862,865,866,870,871,893,894,895,896,919,920,921,922,925,928,931,934,948,949,954,955,956,957,961,962,963,967,968,969,970,971,974,975,976,980,997,999,1000,1001,1003,1003,1008,1010,1011,1015,1016,1020,1021,1026,1028,1067,1068,1068,1069,1070,1071,1072,1073,1077,1078,1081,1082,1085,1086,1089,1090,1091,1093,1095,1096,1097,1100,1101,1106,1110,1111,1112,1115,1116,1120,1172,1173,1173,1174,1175,1176,1177,1179,1180,1181,1184,1185,1186,1190,1190,1191,1197,1198,1199,1203,1204,1206,1216,1218,1219,1227,1232,1232,1233,1239,1240,1244,1245,1246,1251,1252,1256,1257,1258,1260,1266,1268,1270,1309,1330,1374,1375,1376,1377,1378,1379,1381,1382,1396,1410,1424,1438,1473,1497,1543,1544,1553,1554,1555,1556,1560,1561,1562,1563,1564,1565,1571,1572,1575,1576,1578,1601,1602,1603,1606,1607,1611,1612,1615,1616,1617,1618,1619,1621,1622,1625]}
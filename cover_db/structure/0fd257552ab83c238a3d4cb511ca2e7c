{"statement":[29,29,29,30,30,30,31,31,31,32,32,32,33,33,33,34,34,34,35,35,35,42,42,42,3866,3866,3866,13418,13418,13418,145,146,147,150,157,158,159,162,307,308,309,309,315,316,316,320,321,322,322,326,327,327,328,328,332,333,334,336,342,343,344,345,348,351,356,357,358,359,361,365,366,367,368,370,374,375,396,397,398,401,403,405,409,416,417,418,421,426,427,431,432,436,437,438,439,443,444,445,446,450,451,455,459,460,462,463,464,465,467,479,480,484,485,493,494,495,496,501,502,507,508,509,512,517,518,519,524,525,526,527,529,532,537,538,539,545,546,547,548,549,552,553,557,558,562,563,569,570,574,575,576,579,585,586,587,590,596,597,598,601,607,608,609,612,621,622,623,624,625,626,627,628,629,632,634,635,636,637,641,645,650,651,652,653,654,655,656,659,662,663,664,667,670,673,677,706,709,711,712,714,715,716,717,719,720,721,722,725,726,727,729,732,734,737,739,744,747,749,750,751,752,753,755,756,759,760,762,765,766,770,775,776,777,780,786,787,788,789,792,796,802,803,806,811,812,813,815,816,819,833,834,835,836,840,841,842,847,848,849,851,856,857,858,861,866,867,868,871,876,879,883,884,885,886,889,894,895,896,897,898,899,900,903,904,905,908,912,913,914,915,916,917,920,922,924,928,929,930,934,935,936,937,941,942,943,944,946,950,951,952,953,954,955,956,957,959,971,972,973,977,978,979,980,986,987,988,989,990,991,992,993,994,995,997,1001,1002,1004,1008,1009,1010,1011,1014,1015,1020,1023,1029,1032,1034,1038,1040,1041,1042,1045,1047,1050,1049,1051,1052,1054,1055,1056,1057,1059,1069,1070,1071,1072,1073,1074,1077,1080,1082,1083,1088,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1105,1106,1110,1111,1112,1113,1116,1117,1119,1120,1121,1122,1123,1124,1125,1126,1129,1130,1136,1138,1141,1142,1145,1148,1151,1154,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1168,1171,1175,1178,1181,1182,1193,1194,1195,1198,1199,1201,1202,1205,1208,1209,1214,1217,1221,1224,1225,1226,1227,1228,1229,1230,1231,1232,1235,1238,1244,1247,1250,1253,1254,1255,1255,1256,1260,1263,1264,1264,1265,1267,1270,1272,1278,1282,1283,1284,1285,1286,1288,1289,1290,1291,1292,1293,1294,1295,1298,1299,1304,1309,1312,1315,1318,1321,1322,1323,1324,1324,1325,1330,1330,1331,1334,1334,1337,1339,1340,1341,1342,1343,1345,1347,1350,1351,1354,1355,1358,1363,1366,1368,1369,1372,1373,1374,1383,1395,1396,1397,1404,1405,1406,1407,1408,1410,1415,1416,1416,1419,1420,1421,1426,1426,1427,1432,1437,1443,1443,1444,1446,1449,1449,1450,1451,1460,1460,1460,1463,1463,1467,1468,1471,1475,1495,1496,1499,1500,1501,1502,1505,1506,1507,1508,1509,1510,1511,1512,1516,1517,1518,1520,1524,1527,1530,1533,1536,1539,1544,1547,1548,1549,1550,1550,1554,1555,1556,1559,1562,1565,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1579,1584,1585,1586,1587,1588,1589,1590,1593,1596,1597,1600,1604,1608,1611,1616,1617,1618,1619,1620,1621,1624,1626,1629,1631,1632,1635,1638,1639,1644,1645,1648,1651,1654,1657,1657,1658,1659,1661,1664,1667,1670,1677,1678,1684,1685,1686,1687,1691,1693,1697,1700,1699,1699,1701,1704,1706,1707,1708,1711,1712,1713,1716,1718,1719,1720,1722,1723,1727,1730,1731,1731,1732,1733,1735,1736,1737,1738,1742,1745,1746,1747,1747,1748,1748,1749,1752,1754,1758,1765,1769,1770,1771,1773,1774,1774,1777,1778,1779,1781,1784,1785,1786,1787,1790,1797,1798,1798,1799,1800,1801,1802,1802,1803,1806,1807,1813,1817,1820,1828,1830,1832,1841,1842,1845,1845,1846,1847,1850,1851,1854,1854,1854,1860,1863,1865,1868,1873,1877,1877,1877,1878,1885,1885,1886,1889,1897,1902,1904,1905,1908,1909,1911,1912,1913,1914,1915,1916,1917,1919,1924,1927,1930,1933,1936,1939,1942,1945,1948,1953,1961,1964,1965,1966,1967,1969,1970,1971,1972,1975,1979,1980,1981,1981,1982,1983,1984,1988,1991,1994,1997,2002,2007,2007,2008,2008,2009,2010,2013,2014,2017,2020,2018,2023,2030,2031,2033,2034,2037,2041,2042,2043,2044,2047,2054,2055,2055,2058,2059,2062,2066,2069,2070,2074,2077,2078,2083,2091,2092,2093,2093,2094,2095,2099,2105,2109,2110,2115,2115,2121,2122,2130,2131,2133,2136,2137,2145,2146,2147,2149,2153,2158,2159,2160,2163,2165,2167,2168,2170,2171,2174,2179,2180,2185,2189,2190,2194,2194,2195,2198,2201,2202,2206,2209,2210,2216,2217,2217,2218,2219,2220,2221,2222,2228,2232,2234,2235,2240,2244,2248,2249,2253,2259,2260,2265,2266,2267,2267,2268,2269,2270,2274,2275,2278,2278,2278,2281,2282,2285,2287,2288,2288,2288,2292,2294,2294,2294,2300,2300,2300,2304,2307,2310,2311,2317,2318,2319,2321,2321,2322,2323,2326,2327,2332,2333,2338,2339,2344,2346,2346,2349,2350,2356,2361,2362,2369,2370,2372,2373,2384,2385,2387,2389,2394,2395,2396,2404,2405,2406,2409,2410,2412,2413,2413,2416,2421,2422,2424,2427,2427,2430,2433,2437,2439,2447,2448,2449,2453,2454,2461,2462,2465,2469,2470,2471,2473,2474,2475,2476,2479,2480,2481,2481,2484,2487,2491,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2510,2513,2516,2519,2520,2521,2523,2526,2529,2530,2531,2532,2533,2535,2535,2537,2541,2543,2547,2550,2551,2552,2553,2554,2555,2556,2557,2562,2570,2573,2576,2582,2583,2584,2585,2586,2587,2588,2589,2590,2590,2591,2592,2594,2599,2599,2600,2601,2603,2606,2609,2610,2611,2613,2616,2619,2622,2623,2624,2626,2629,2632,2637,2640,2646,2647,2648,2649,2650,2651,2652,2653,2659,2660,2661,2662,2666,2667,2668,2669,2670,2671,2672,2673,2675,2676,2679,2683,2687,2691,2696,2697,2698,2699,2700,2702,2705,2707,2711,2712,2713,2714,2715,2716,2717,2718,2721,2725,2726,2727,2735,2739,2740,2741,2742,2743,2744,2749,2750,2753,2754,2757,2761,2763,2767,2768,2769,2771,2785,2775,2776,2777,2780,2783,2786,2787,2788,2788,2789,2790,2791,2792,2795,2796,2797,2800,2805,2807,2813,2814,2815,2816,2819,2820,2821,2822,2827,2828,2829,2830,2831,2834,2835,2838,2839,2842,2843,2846,2849,2852,2854,2855,2858,2860,2864,2865,2866,2867,2868,2873,2876,2879,2883,2887,2888,2889,2890,2891,2892,2898,2899,2900,2901,2902,2903,2904,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2920,2923,2926,2929,2932,2935,2938,2943,2944,2945,2947,2948,2950,2951,2952,2953,2954,2955,2957,2958,2959,2962,2964,2965,2971,2979,2980,2980,2983,2986,2992,2993,2994,2995,2996,2997,2998,2999,3003,3004,3005,3006,3007,3008,3009,3010,3011,3013,3014,3015,3016,3017,3017,3021,3024,3026,3027,3029,3030,3031,3032,3033,3036,3041,3042,3043,3044,3048,3081,3082,3119,3120,3126,3127,3128,3129,3130,3131,3132,3133,3134,3135,3138,3140,3143,3146,3147,3153,3154,3155,3156,3157,3158,3159,3160,3161,3163,3166,3168,3171,3173,3176,3179,3182,3185,3188,3191,3192,3194,3196,3218,3219,3220,3222,3223,3224,3225,3226,3234,3239,3240,3243,3244,3246,3247,3252,3253,3256,3257,3259,3260,3261,3262,3264,3268,3269,3272,3273,3274,3278,3294,3280,3281,3282,3283,3284,3285,3286,3287,3289,3292,3311,3298,3301,3302,3303,3305,3306,3309,3315,3316,3316,3317,3319,3321,3322,3325,3327,3328,3330,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3365,3366,3367,3369,3370,3371,3372,3373,3374,3375,3376,3378,3379,3382,3398,3399,3400,3401,3409,3412,3413,3414,3415,3416,3421,3424,3426,3430,3431,3432,3433,3437,3443,3444,3447,3454,3456,3460,3463,3464,3465,3467,3470,3473,3476,3480,3482,3486,3487,3488,3491,3493,3503,3510,3504,3517,3631,3520,3521,3522,3523,3524,3524,3528,3532,3537,3542,3543,3546,3549,3550,3559,3560,3561,3562,3623,3566,3567,3568,3569,3571,3572,3572,3576,3577,3578,3582,3586,3587,3588,3592,3595,3600,3605,3607,3617,3620,3622,3624,3625,3626,3629,3634,3636,3637,3638,3638,3642,3647,3648,3652,3655,3656,3659,3660,3664,3707,3714,3714,3727,3730,3731,3736,3738,3739,3740,3741,3742,3745,3746,3756,3757,3758,3759,3760,3763,3766,3768,3772,3773,3774,3777,3778,3784,3791,3792,3795,3796,3800,3801,3801,3803,3804,3805,3807,3808,3809,3810,3811,3812,3813,3814,3816,3818,3819,3819,3822,3825,3828,3830,3830,3835,3838,3839,3842,3843,3844,3845,3846,3847,3848,3851,3855,3858,3859,3859,3865,3867,3876,3882,3882,3882,3883,3884,3884,3885,3885,3886,3890,3890,3891,3893,3898,3899,3900,3900,3901,3904,3905,3907,3908,3909,3910,3913,3914,3915,3916,3916,3917,3920,3921,3923,3927,3928,3929,3930,3931,3935,3936,3938,3939,3940,3944,3945,3947,3948,3952,3953,3954,3963,3959,3961,3968,3969,3971,3972,3973,3974,3977,3978,3980,3981,3982,3984,3985,3987,3988,3989,3993,3998,3999,4001,4000,4002,4003,4004,4005,4008,4012,4016,4018,4023,4024,4025,4026,4026,4027,4028,4029,4034,4035,4039,4043,4048,4049,4050,4053,4058,4059,4059,4060,4061,4063,4064,4066,4067,4070,4073,4078,4079,4082,4086,4087,4088,4096,4106,4106,4107,4109,4113,4114,4115,4116,4123,4128,4143,4144,4145,4148,4149,4150,4159,4160,4162,4163,4164,4168,4175,4176,4177,4178,4180,4184,4190,4187,4191,4192,4192,4193,4194,4198,4199,4201,4202,4203,4210,4211,4213,4214,4215,4216,4219,4220,4224,4225,4230,4231,4234,4238,4239,4241,4242,4243,4243,4244,4247,4253,4254,4255,4258,4258,4259,4260,4262,4263,4267,4268,4270,4271,4272,4272,4273,4274,4275,4276,4277,4283,4283,4287,4288,4291,4297,4298,4299,4305,4306,4311,4312,4315,4316,4316,4316,4318,4318,4319,4320,4324,4327,4333,4333,4334,4338,4339,4340,4340,4341,4342,4343,4346,4346,4347,4347,4351,4366,4371,4372,4373,4374,4375,4376,4377,4378,4379,4380,4381,4383,4385,4386,4388,4393,4394,4397,4402,4403,4405,4410,4424,4425,4426,4427,4428,4428,4429,4429,4430,4431,4431,4432,4433,4434,4435,4438,4436,4437,4438,4439,4440,4441,4442,4443,4444,4444,4445,4447,4450,4464,4465,4466,4467,4468,4469,4470,4471,4476,4485,4486,4488,4487,4489,4493,4494,4494,4498,4500,4500,4501,4503,4506,4511,4512,4512,4513,4514,4517,4517,4518,4522,4523,4524,4527,4529,4530,4533,4538,4542,4543,4548,4549,4549,4550,4551,4552,4556,4560,4561,4562,4566,4570,4570,4571,4572,4573,4574,4585,4593,4594,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4622,4625,4626,4627,4630,4632,4633,4633,4634,4636,4636,4637,4640,4643,4645,4646,4647,4648,4648,4649,4650,4653,4675,4676,4677,4678,4680,4681,4682,4687,4688,4689,4690,4691,4692,4693,4693,4697,4698,4698,4699,4702,4703,4703,4704,4705,4706,4707,4708,4709,4710,4714,4714,4715,4716,4717,4718,4719,4720,4722,4726,4727,4734,4738,4738,4740,4741,4742,4743,4749,4753,4756,4757,4758,4759,4764,4765,4766,4767,4770,4771,4772,4772,4773,4774,4778,4779,4782,4786,4787,4788,4789,4790,4793,4799,4800,4801,4802,4803,4803,4805,4806,4809,4807,4819,4820,4821,4821,4822,4823,4824,4830,4834,4835,4836,4837,4845,4846,4847,4847,4848,4849,4850,4855,4856,4857,4858,4859,4860,4863,4868,4868,4869,4870,4884,4885,4887,4888,4889,4890,4891,4892,4896,4900,4901,4902,4903,4907,4907,4909,4908,4910,4911,4912,4913,4914,4915,4922,4927,4927,4928,4929,4930,4931,4935,4938,4944,4946,4947,4948,4949,4950,4951,4952,4953,4958,4961,4962,4965,4966,4971,4975,4978,4979,4982,4985,4985,4988,4995,4996,4997,4998,4999,5000,5003,5004,5004,5005,5005,5011,5012,5013,5014,5015,5016,5017,5019,5036,5039,5040,5041,5042,5043,5046,5054,5056,5057,5064,5065,5067,5069,5070,5071,5071,5074,5079,5082,5083,5084,5085,5086,5087,5092,5099,5099,5100,5101,5102,5105,5110,5111,5111,5112,5113,5114,5115,5116,5117,5118,5119,5120,5122,5123,5126,5130,5131,5134,5142,5142,5163,5164,5165,5165,5168,5171,5171,5178,5179,5180,5181,5182,5183,5184,5187,5189,5190,5196,5197,5201,5218,5219,5222,5223,5224,5225,5226,5227,5228,5229,5232,5233,5234,5235,5236,5237,5238,5240,5243,5244,5244,5245,5246,5247,5248,5249,5252,5256,5257,5263,5264,5265,5266,5267,5268,5268,5271,5275,5283,5284,5285,5287,5288,5289,5291,5292,5293,5296,5294,5295,5295,5301,5302,5303,5306,5309,5312,5313,5314,5315,5317,5318,5319,5320,5321,5324,5326,5327,5328,5335,5335,5338,5344,5345,5348,5349,5350,5352,5353,5355,5356,5357,5358,5359,5360,5361,5366,5371,5371,5378,5374,5376,5381,5381,5385,5386,5391,5396,5397,5404,5407,5411,5417,5417,5418,5423,5423,5424,5425,5428,5429,5430,5433,5437,5436,5444,5441,5443,5442,5446,5447,5447,5450,5450,5454,5455,5456,5463,5466,5470,5475,5483,5484,5487,5488,5489,5492,5496,5503,5506,5514,5511,5512,5521,5518,5519,5519,5520,5539,5524,5525,5526,5527,5530,5528,5530,5533,5536,5538,5574,5541,5542,5543,5544,5545,5548,5549,5556,5556,5566,5566,5560,5571,5573,5575,5576,5577,5578,5579,5580,5581,5584,5585,5588,5593,5594,5594,5595,5596,5601,5605,5606,5606,5608,5611,5612,5613,5614,5643,5623,5624,5625,5626,5627,5630,5631,5636,5640,5623,5647,5648,5655,5658,5659,5660,5661,5663,5667,5666,5670,5671,5679,5682,5689,5694,5697,5698,5700,5703,5704,5705,5706,5713,5716,5718,5721,5726,5727,5728,5729,5738,5740,5741,5742,5743,5746,5747,5747,5749,5748,5750,5755,5757,5762,5762,5763,5768,5773,5776,5781,5782,5784,5785,5786,5787,5790,5792,5791,5793,5794,5794,5796,5800,5801,5802,5805,5806,5807,5808,5809,5812,5812,5813,5819,5820,5823,5824,5825,5826,5827,5828,5831,5834,5835,5838,5843,5844,5848,5850,5851,5852,5853,5856,5856,5858,5859,5861,5862,5865,5866,5866,5874,5875,5876,5879,5885,5888,5892,5893,5898,5903,5901,5904,5907,5914,5915,5916,5917,5918,5919,5921,5922,5923,5924,5927,5928,5929,5934,5935,5945,5946,5947,5950,5951,5952,5955,5956,5957,5958,5961,5964,5965,5969,5970,5971,5972,5973,5981,5982,5983,5986,5990,5993,5994,5998,6001,6006,6007,6008,6009,6010,6011,6012,6016,6017,6024,6025,6026,6027,6028,6029,6032,6034,6037,6038,6042,6064,6065,6067,6069,6068,6070,6071,6072,6073,6076,6079,6080,6081,6085,6088,6094,6095,6096,6099,6100,6101,6104,6105,6108,6111,6112,6115,6121,6122,6125,6129,6132,6134,6140,6141,6142,6143,6144,6145,6153,6158,6160,6161,6163,6164,6165,6166,6167,6170,6171,6172,6175,6179,6180,6181,6184,6188,6190,6192,6196,6197,6198,6199,6200,6201,6202,6206,6209,6211,6213,6213,6215,6220,6221,6222,6223,6224,6226,6227,6228,6230,6242,6244,6245,6246,6247,6250,6251,6255,6257,6261,6270,6271,6272,6273,6283,6291,6294,6300,6302,6303,6307,6308,6310,6313,6315,6316,6318,6322,6325,6327,6329,6331,6333,6334,6335,6336,6337,6338,6341,6343,6344,6348,6349,6350,6351,6352,6353,6355,6359,6360,6362,6363,6365,6366,6367,6369,6370,6371,6372,6373,6374,6375,6379,6380,6381,6382,6383,6387,6388,6389,6390,6391,6392,6393,6393,6395,6396,6397,6398,6399,6400,6401,6402,6402,6403,6409,6410,6414,6417,6418,6420,6421,6422,6426,6427,6428,6429,6430,6434,6435,6436,6437,6438,6440,6441,6442,6443,6444,6448,6449,6453,6454,6455,6456,6458,6459,6460,6461,6462,6463,6464,6465,6466,6466,6468,6469,6470,6471,6472,6473,6474,6478,6475,6479,6482,6488,6490,6494,6495,6496,6497,6498,6499,6500,6501,6507,6514,6515,6516,6517,6520,6524,6525,6526,6527,6528,6530,6538,6539,6540,6541,6549,6550,6551,6552,6553,6554,6555,6557,6558,6559,6560,6561,6562,6563,6564,6567,6570,6573,6574,6575,6579,6580,6582,6583,6586,6591,6593,6594,6597,6598,6601,6602,6603,6606,6607,6608,6609,6610,6611,6612,6617,6619,6625,6627,6630,6632,6633,6634,6635,6636,6637,6645,6650,6656,6658,6664,6665,6666,6667,6668,6669,6670,6672,6675,6675,6683,6686,6690,6691,6692,6692,6692,6694,6695,6699,6700,6701,6703,6706,6707,6708,6711,6712,6713,6714,6715,6716,6720,6723,6727,6733,6734,6735,6736,6736,6737,6741,6747,6748,6751,6752,6753,6754,6755,6757,6758,6759,6767,6774,6770,6772,6771,6775,6775,6779,6793,6781,6782,6783,6784,6786,6786,6786,6787,6788,6789,6792,6794,6795,6796,6798,6799,6800,6801,6802,6803,6804,6805,6810,6810,6813,6815,6816,6817,6821,6824,6825,6830,6834,6835,6836,6842,6844,6843,6844,6849,6855,6853,6854,6858,6860,6861,6862,6863,6864,6865,6866,6867,6869,6876,6874,6880,6883,6885,6888,6889,6890,6892,6893,6899,6907,6910,6911,6912,6917,6922,6923,6923,6924,6925,6926,6927,6928,6931,6934,6937,6938,6945,6946,6946,6948,6950,6955,6964,6965,6966,6966,6967,6967,6967,6967,6968,6976,6978,6985,6980,6981,6981,6982,6983,6984,6988,6989,6990,6995,6996,6996,6997,6998,7015,7005,7006,7006,7007,7009,7009,7010,7011,7012,7018,7027,7020,7021,7022,7023,7024,7025,7030,7031,7031,7032,7033,7039,7038,7039,7043,7098,7050,7051,7052,7053,7056,7057,7058,7059,7060,7068,7069,7073,7074,7075,7076,7076,7078,7079,7080,7084,7085,7086,7087,7090,7091,7093,7094,7095,7099,7100,7105,7106,7107,7109,7110,7111,7112,7113,7114,7115,7116,7120,7121,7122,7122,7123,7131,7134,7135,7138,7139,7141,7142,7143,7144,7145,7146,7149,7150,7150,7151,7163,7163,7163,7163,7164,7165,7166,7167,7167,7168,7169,7170,7177,7182,7183,7184,7186,7189,7195,7196,7197,7197,7198,7199,7200,7201,7202,7206,7211,7212,7212,7213,7214,7215,7216,7218,7221,7225,7226,7227,7228,7229,7230,7231,7236,7238,7245,7246,7248,7253,7254,7255,7256,7259,7262,7264,7265,7269,7271,7273,7274,7275,7277,7280,7283,7285,7285,7286,7287,7288,7289,7291,7292,7294,7293,7299,7306,7307,7308,7311,7313,7316,7320,7323,7324,7325,7326,7329,7333,7338,7339,7340,7345,7349,7350,7351,7359,7359,7361,7360,7363,7368,7371,7372,7375,7376,7377,7378,7378,7387,7388,7391,7392,7405,7408,7412,7411,7415,7416,7416,7417,7417,7420,7421,7424,7425,7431,7432,7433,7434,7435,7436,7440,7445,7447,7447,7450,7451,7455,7456,7458,7459,7465,7466,7466,7467,7467,7471,7481,7484,7488,7492,7493,7497,7498,7499,7500,7501,7512,7516,7516,7517,7518,7519,7527,7531,7532,7535,7535,7536,7537,7541,7541,7545,7545,7546,7547,7550,7550,7553,7556,7559,7566,7566,7567,7568,7572,7573,7574,7575,7576,7581,7582,7588,7589,7597,7598,7606,7612,7618,7619,7623,7627,7628,7631,7633,7632,7635,7639,7643,7645,7646,7647,7648,7649,7650,7659,7680,7681,7682,7687,7706,7689,7690,7691,7692,7693,7697,7697,7698,7704,7705,7709,7710,7711,7715,7716,7717,7718,7724,7725,7729,7729,7732,7733,7734,7737,7740,7741,7742,7743,7749,7750,7751,7762,7767,7768,7768,7769,7772,7777,7778,7786,7786,7791,7792,7793,7794,7795,7796,7800,7801,7802,7803,7804,7811,7812,7816,7817,7817,7818,7825,7827,7828,7829,7830,7830,7831,7832,7833,7834,7843,7847,7848,7849,7851,7854,7866,7867,7867,7867,7868,7869,7869,7870,7871,7874,7875,7875,7876,7877,7882,7891,7892,7898,7899,7900,7901,7902,7903,7903,7904,7907,7909,7910,7911,7911,7912,7913,7913,7914,7924,7925,7933,7947,7936,7937,7940,7941,7941,7942,7942,7943,7944,7948,7949,7950,7951,7955,7956,7957,7958,7958,7959,7960,7961,7967,7968,7969,7970,7973,7974,7974,7975,7984,7985,7986,7986,7987,7987,7988,7989,7992,7993,7998,8006,8007,8008,8008,8009,8010,8010,8011,8012,8013,8014,8015,8018,8019,8020,8021,8022,8025,8030,8034,8035,8036,8037,8038,8041,8052,8053,8054,8054,8078,8056,8057,8065,8068,8068,8072,8075,8079,8079,8080,8081,8082,8084,8084,8085,8086,8089,8092,8098,8100,8101,8102,8107,8107,8108,8109,8112,8112,8113,8114,8114,8115,8116,8120,8122,8125,8132,8133,8141,8142,8149,8149,8150,8153,8157,8159,8159,8159,8162,8164,8165,8166,8167,8168,8168,8169,8170,8174,8175,8176,8177,8185,8187,8187,8190,8191,8192,8193,8199,8205,8206,8209,8211,8213,8215,8219,8221,8222,8225,8226,8233,8230,8231,8237,8243,8244,8245,8256,8269,8271,8272,8273,8291,8311,8294,8295,8296,8297,8299,8300,8301,8305,8307,8308,8310,8312,8312,8318,8318,8319,8337,8324,8325,8330,8331,8332,8333,8336,8338,8339,8340,8342,8345,8346,8347,8348,8349,8350,8351,8357,8358,8358,8359,8360,8363,8364,8366,8368,8369,8377,8376,8377,8380,8380,8381,8389,8399,8400,8401,8403,8404,8407,8409,8410,8411,8412,8413,8413,8417,8418,8419,8420,8421,8422,8429,8430,8439,8442,8450,8452,8453,8454,8455,8461,8462,8462,8468,8473,8474,8475,8476,8483,8484,8487,8489,8490,8496,8500,8501,8502,8503,8504,8508,8513,8514,8517,8523,8526,8527,8529,8531,8536,8548,8550,8557,8558,8561,8566,8567,8580,8581,8582,8583,8584,8586,8587,8588,8589,8590,8593,8594,8596,8599,8601,8623,8624,8626,8644,8630,8631,8632,8633,8633,8634,8635,8636,8637,8637,8638,8639,8640,8641,8647,8648,8651,8652,8658,8655,8657,8656,8657,8663,8664,8667,8677,8680,8681,8682,8685,8686,8687,8690,8690,8691,8692,8693,8696,8697,8701,8703,8703,8703,8709,8710,8712,8712,8714,8715,8718,8719,8723,8722,8723,8727,8728,8728,8729,8733,8736,8745,8744,8748,8748,8753,8780,8781,8782,8783,8784,8785,8786,8787,8806,8795,8796,8797,8798,8799,8799,8800,8801,8804,8809,8879,8813,8814,8815,8820,8819,8820,8823,8821,8823,8824,8832,8832,8836,8837,8838,8839,8840,8841,8842,8845,8849,8848,8850,8850,8851,8852,8853,8854,8857,8858,8860,8864,8869,8869,8870,8871,8872,8873,8874,8875,8881,8882,8883,8885,8885,8886,8887,8888,8889,8890,8894,8902,8903,8905,8904,8907,8938,8909,8910,8912,8913,8916,8917,8918,8919,8919,8920,8921,8922,8925,8926,8930,8931,8934,8939,8940,8945,8947,8956,8957,8957,8958,8959,8961,8962,8963,8964,8965,8966,8973,8977,8983,8986,8992,8995,8996,8997,8998,8999,8999,9007,9007,9008,9009,9009,9010,9011,9014,9012,9013,9018,9037,9040,9041,9045,9048,9049,9051,9052,9057,9059,9070,9071,9072,9076,9076,9077,9083,9079,9080,9081,9082,9084,9084,9085,9085,9088,9088,9089,9089,9092,9093,9093,9094,9097,9098,9100,9105,9103,9104,9112,9112,9113,9113,9114,9115,9118,9122,9123,9124,9125,9126,9128,9129,9131,9132,9133,9146,9148,9149,9150,9150,9151,9155,9156,9157,9158,9162,9163,9164,9166,9167,9169,9170,9171,9175,9176,9179,9180,9181,9182,9187,9187,9188,9189,9190,9191,9192,9198,9199,9208,9209,9210,9211,9212,9219,9223,9224,9226,9240,9241,9242,9242,9243,9246,9247,9252,9261,9262,9265,9268,9277,9278,9279,9280,9286,9287,9288,9287,9291,9292,9293,9296,9299,9304,9305,9306,9307,9308,9315,9316,9318,9319,9322,9323,9326,9333,9334,9336,9336,9336,9346,9349,9350,9354,9355,9356,9356,9362,9363,9366,9367,9368,9369,9370,9371,9381,9385,9385,9386,9387,9390,9391,9392,9392,9397,9398,9399,9399,9402,9402,9403,9404,9405,9409,9419,9422,9423,9425,9428,9428,9429,9430,9431,9432,9433,9434,9437,9437,9438,9439,9440,9441,9444,9445,9454,9457,9464,9465,9478,9480,9482,9484,9487,9488,9489,9489,9493,9493,9496,9497,9499,9499,9502,9505,9508,9509,9512,9513,9517,9518,9523,9525,9524,9528,9533,9534,9535,9536,9539,9546,9549,9550,9553,9553,9554,9556,9559,9560,9561,9568,9577,9581,9587,9590,9591,9592,9593,9597,9605,9606,9607,9612,9613,9615,9622,9623,9626,9627,9630,9630,9633,9636,9637,9641,9646,9655,9655,9655,9655,9656,9657,9659,9668,9671,9669,9673,9674,9675,9680,9680,9681,9681,9684,9685,9688,9692,9697,9705,9715,9718,9719,9722,9726,9730,9735,9734,9734,9734,9739,9742,9742,9745,9748,9757,9758,9759,9760,9761,9763,9764,9765,9766,9767,9771,9775,9776,9777,9778,9786,9787,9790,9791,9792,9795,9799,9798,9802,9802,9803,9807,9808,9812,9813,9816,9828,9829,9832,9833,9836,9841,9849,9852,9853,9854,9855,9858,9859,9860,9863,9864,9869,9877,9878,9881,9882,9883,9884,9885,9892,9886,9894,9896,9902,9903,9904,9905,9910,9912,9916,9917,9918,9918,9919,9922,9923,9929,9930,9931,9934,9935,9936,9936,9940,9938,9943,9942,9948,9948,9953,9960,9963,9964,9970,9968,9967,9968,9968,9973,9975,9976,9977,9978,9981,9982,9982,9983,9984,9985,9986,9991,9992,9992,9992,9993,9998,10005,10008,10022,10025,10033,10030,10028,10030,10030,10036,10039,10040,10041,10042,10043,10044,10053,10054,10057,10057,10058,10059,10067,10073,10074,10075,10075,10076,10077,10080,10086,10087,10088,10089,10090,10091,10092,10093,10094,10095,10096,10097,10098,10107,10108,10109,10112,10113,10115,10116,10119,10120,10121,10122,10124,10127,10133,10130,10130,10137,10152,10153,10154,10156,10158,10159,10160,10161,10162,10169,10170,10171,10173,10174,10175,10179,10180,10181,10182,10186,10187,10191,10192,10197,10198,10198,10199,10200,10205,10206,10207,10212,10212,10217,10217,10217,10221,10222,10223,10224,10227,10228,10228,10229,10232,10232,10233,10234,10235,10236,10238,10239,10242,10251,10255,10259,10259,10259,10262,10281,10284,10285,10287,10288,10291,10296,10296,10299,10300,10303,10304,10305,10310,10311,10312,10315,10324,10337,10338,10339,10342,10345,10350,10351,10352,10353,10354,10354,10362,10363,10366,10371,10371,10372,10379,10388,10391,10392,10396,10397,10398,10402,10403,10404,10405,10408,10411,10412,10413,10414,10418,10421,10422,10427,10428,10431,10455,10460,10463,10464,10468,10472,10473,10474,10477,10477,10480,10481,10484,10485,10488,10489,10492,10493,10494,10497,10503,10508,10511,10512,10513,10516,10523,10529,10534,10535,10539,10540,10552,10555,10556,10561,10564,10567,10572,10575,10585,10586,10586,10587,10590,10591,10594,10599,10600,10602,10612,10612,10613,10614,10617,10620,10622,10625,10628,10632,10633,10633,10634,10635,10636,10638,10642,10650,10651,10652,10653,10654,10655,10656,10673,10674,10675,10678,10679,10682,10685,10686,10691,10695,10696,10699,10703,10709,10710,10713,10719,10724,10727,10731,10752,10755,10756,10762,10763,10764,10766,10777,10779,10780,10783,10784,10785,10786,10790,10800,10801,10804,10807,10816,10819,10823,10826,10829,10834,10835,10836,10837,10838,10839,10842,10849,10854,10855,10858,10862,10863,10866,10869,10873,10873,10874,10875,10876,10877,10878,10883,10892,10893,10895,10901,10902,10905,10908,10925,10928,10930,10932,10936,10939,10940,10941,10944,10945,10948,10953,10954,10958,10963,10966,10967,10973,10974,10975,10976,10979,10982,11002,11005,11009,11014,11017,11020,11021,11026,11029,11032,11035,11036,11040,11043,11046,11047,11051,11056,11057,11062,11067,11070,11071,11073,11082,11082,11086,11087,11088,11092,11093,11100,11101,11102,11103,11106,11109,11110,11115,11117,11122,11123,11124,11131,11132,11133,11134,11135,11136,11136,11152,11153,11156,11157,11160,11161,11164,11164,11165,11168,11170,11175,11176,11182,11186,11194,11194,11195,11203,11204,11207,11208,11209,11213,11214,11215,11218,11222,11223,11224,11229,11230,11231,11232,11235,11237,11239,11243,11247,11254,11255,11262,11265,11266,11267,11269,11270,11271,11273,11274,11281,11284,11285,11286,11289,11290,11292,11292,11291,11296,11297,11298,11299,11300,11300,11301,11302,11305,11311,11312,11313,11314,11319,11320,11321,11322,11323,11324,11324,11330,11331,11335,11336,11343,11344,11346,11363,11367,11368,11378,11379,11382,11386,11389,11390,11394,11398,11403,11406,11409,11412,11415,11418,11419,11422,11425,11432,11435,11436,11437,11443,11446,11449,11452,11453,11456,11459,11466,11469,11470,11471,11474,11491,11500,11518,11518,11519,11524,11527,11528,11529,11534,11538,11541,11541,11542,11545,11557,11560,11561,11564,11565,11569,11583,11584,11587,11588,11591,11600,11601,11606,11607,11609,11610,11613,11617,11620,11624,11626,11630,11631,11632,11635,11639,11642,11646,11647,11649,11654,11657,11661,11662,11663,11668,11669,11673,11675,11679,11680,11681,11684,11688,11689,11690,11691,11692,11693,11699,11700,11728,11703,11704,11705,11708,11708,11709,11710,11711,11712,11713,11714,11715,11719,11719,11720,11721,11722,11723,11725,11727,11729,11730,11731,11732,11734,11735,11742,11743,11746,11744,11748,11750,11751,11752,11753,11755,11756,11757,11758,11766,11767,11770,11773,11773,11776,11778,11778,11783,11784,11785,11786,11787,11789,11790,11791,11794,11797,11798,11803,11804,11810,11811,11814,11815,11819,11819,11827,11830,11830,11831,11832,11835,11838,11841,11845,11846,11849,11849,11851,11852,11855,11858,11861,11866,11867,11868,11869,11870,11871,11872,11873,11875,11877,11884,11885,11892,11899,11904,11905,11906,11907,11908,11909,11909,11910,11910,11911,11914,11917,11918,11919,11922,11922,11923,11930,11931,11935,11941,11942,11944,11946,11953,11954,11955,11955,11956,11957,11958,11959,11962,11963,11964,11965,11966,11968,11969,11970,11984,11986,11986,11987,11987,11988,11988,11989,11989,11990,11990,11991,11994,11995,11998,11999,12000,12001,12006,12007,12008,12009,12018,12022,12029,12030,12032,12032,12033,12034,12035,12038,12041,12044,12042,12046,12048,12049,12057,12058,12059,12065,12066,12066,12067,12070,12071,12071,12072,12076,12080,12081,12082,12083,12083,12086,12087,12090,12091,12091,12094,12124,12125,12126,12127,12128,12129,12130,12131,12139,12140,12145,12145,12145,12151,12156,12157,12158,12163,12160,12161,12162,12164,12165,12166,12167,12168,12169,12171,12172,12175,12179,12180,12181,12182,12188,12192,12194,12196,12197,12198,12199,12203,12203,12204,12205,12205,12206,12207,12208,12209,12210,12212,12213,12215,12215,12216,12217,12218,12219,12222,12224,12225,12226,12227,12230,12232,12234,12235,12236,12237,12238,12242,12245,12249,12249,12250,12254,12255,12256,12257,12258,12259,12260,12266,12268,12279,12282,12283,12291,12287,12298,12293,12301,12302,12303,12304,12305,12306,12308,12309,12318,12329,12325,12333,12342,12343,12346,12347,12348,12349,12354,12355,12362,12365,12365,12366,12367,12372,12376,12377,12379,12379,12380,12392,12393,12394,12395,12397,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12413,12419,12420,12421,12422,12425,12429,12432,12432,12433,12434,12440,12441,12448,12449,12450,12450,12450,12451,12454,12502,12505,12508,12509,12511,12512,12513,12516,12517,12518,12519,12522,12522,12524,12523,12525,12526,12527,12529,12533,12536,12537,12538,12539,12541,12542,12544,12559,12560,12561,12562,12563,12563,12564,12565,12566,12568,12569,12573,12574,12575,12576,12577,12578,12578,12579,12581,12586,12587,12588,12592,12593,12596,12597,12603,12612,12613,12617,12618,12623,12624,12628,12631,12632,12633,12634,12638,12653,12656,12655,12657,12658,12659,12663,12666,12667,12668,12669,12671,12671,12673,12677,12678,12679,12680,12681,12687,12688,12689,12690,12693,12696,12696,12699,12700,12701,12703,12704,12705,12707,12713,12737,12741,12744,12745,12747,12748,12749,12750,12751,12757,12762,12763,12764,12765,12766,12767,12770,12773,12774,12775,12778,12790,12793,12796,12799,12810,12811,12812,12813,12814,12819,12824,12825,12828,12841,12850,12850,12851,12852,12856,12857,12858,12859,12860,12868,12871,12872,12892,12895,12898,12899,12901,12902,12906,12907,12908,12909,12910,12911,12914,12915,12918,12919,12922,12935,12937,12943,12943,12951,12952,12955,12956,12957,12958,12959,12961,12968,12969,12971,12972,12973,12974,12975,12979,12979,12984,12985,12992,12993,12997,12998,13006,13008,13009,13011,13012,13015,13016,13017,13018,13019,13020,13023,13024,13025,13026,13027,13028,13031,13032,13033,13060,13061,13062,13064,13065,13066,13067,13068,13069,13072,13076,13076,13078,13080,13081,13082,13085,13086,13087,13088,13089,13090,13091,13095,13096,13099,13101,13105,13109,13110,13112,13113,13116,13120,13123,13127,13128,13129,13130,13131,13132,13133,13134,13135,13137,13138,13139,13142,13143,13145,13148,13149,13158,13161,13165,13169,13172,13176,13177,13180,13181,13186,13187,13188,13189,13190,13191,13191,13192,13194,13202,13210,13212,13213,13214,13215,13216,13217,13219,13220,13221,13222,13223,13231,13235,13238,13289,13290,13291,13291,13292,13293,13295,13298,13299,13300,13300,13301,13302,13303,13304,13307,13311,13312,13318,13315,13315,13320,13321,13322,13323,13324,13325,13326,13329,13330,13331,13332,13333,13335,13336,13339,13340,13342,13343,13347,13348,13349,13361,13362,13364,13365,13366,13368,13369,13370,13371,13372,13379,13380,13382,13385,13386,13387,13388,13394,13421,13395,13400,13401,13405,13406,13408,13415,13419,13423,13425,13427,13431,13432,13433,13435,13436,13437,13438,13439,13440,13443,13444,13445,13450,13451,13452,13454,13455,13456,13460,13463,13465,13466,13467,13467,13470,13471,13472,13473,13483,13484,13487,13490,13491,13495,13496,13497,13499,13527,13528,13529,13530,13533,13536,13546,13547,13550,13550,13551,13552,13553,13554,13556,13557,13558,13558,13559,13560,13561,13562,13563,13566,13576,13577,13578,13578,13579,13580,13581,13582,13584,13585,13586,13586,13587,13588,13589,13590,13591,13594,13602,13603,13606,13606,13607,13608,13609,13610,13612,13613,13614,13614,13615,13616,13617,13618,13619,13622,13626,13627,13628,13629,13632,13635,13635,13640,13641,13642,13644,13644,13645,13645,13646,13650,13651,13651,13652,13652,13653,13657,13659,13660,13661,13662,13663,13664,13666,13667,13669,13670,13676,13676,13678,13677,13684,13685,13686,13687,13693,13695,13696,13699,13703,13704,13707,13706,13707,13706,13718,13720,13721,13722,13723,13724,13725,13726,13726,13726,13727,13728,13729,13730,13730,13731,13735,13736,13737,13738,13739,13740,13744,13744,13753,13755,13758,13759,13760,13761,13762,13763,13769,13770,13771,13772,13773,13774,13776,13777,13777,13778,13779,13780,13781,13782,13784,13786,13804,13791,13792,13793,13794,13795,13797,13796,13799,13801,13800,13808,13813,13813,13813,13814,13815,13816,13817,13818,13819,13820,13821,13827,13831,13832,13834,13836,13837,13838,13839,13840,13843,13844,13847,13849,13850,13851,13862,13865,13906,13868,13869,13892,13872,13873,13874,13876,13877,13878,13879,13883,13885,13893,13894,13895,13902,13903,13907,13909,13911,13920,13921,13922,13923,13924,13926,13928,13929,13930,13933,13934,13936,13937,13940,13941,13942,13943,13945,13944,13946,13947,13963,13972,13973,13974,13975,13976,13977,13978,13979,13982,13983,13984,13986,13989,13990,13991,13994,13998,14000,14001,14005,14017,14020,14024,14025,14033,14039,14051,14056,14061,14065,14072,14077,14081,14085,14086,14090,14091,14094,14098,14099,14100,14101,14102,14103,14104,14116,14119,14123,14124,14125,14129,14130,14131,14132,14135,14136,14136,14137,14138,14139,14140,14144,14148,14149,14151,14150,14150,14152,14155,14156,14160,14159,14161,14164,14165,14169,14170,14174,14175,14176,14176,14181,14182,14183,14186,14187,14190,14192,14196,14197,14198,14199,14200,14203,14207,14208,14210,14211,14212,14213,14214,14215,14216,14217,14218,14219,14219,14221,14224,14226,14227,14228,14228,14230,14234,14235,14236,14237,14238,14239,14240,14243,14243,14245,14246,14248,14249,14250,14251,14251,14253,14254,14255,14256,14259,14265,14266,14269,14271,14272,14274,14283,14286,14289,14291,14292,14293,14294,14296,14296,14297,14302,14303,14304,14305,14310,14311,14313,14314,14317,14318,14320,14321,14327,14328,14329,14329,14332,14339,14340,14341,14346,14346,14349,14351,14357,14358,14359,14363,14367,14368,14369,14370,14371,14372,14373,14373,14376,14380,14381,14384,14387,14391,14392,14396,14397,14397,14398,14398,14399,14400,14401,14402,14403,14407,14408,14408,14409,14410,14411,14412,14415,14416,14417,14418,14418,14419,14419,14420,14421,14425,14444,14445,14446,14447,14448,14449,14450,14450,14453,14456,14460,14461,14462,14465,14469,14472,14487,14490,14494,14494,14495,14496,14497,14498,14501,14501,14502,14503,14504,14507,14511,14513,14544,14515,14516,14517,14520,14520,14521,14524,14525,14526,14527,14528,14530,14533,14534,14535,14538,14538,14539,14540,14541,14547,14548,14549,14550,14557,14587,14560,14561,14564,14565,14566,14569,14569,14570,14571,14574,14574,14575,14576,14579,14580,14580,14584,14591,14592,14596,14596,14597,14598,14599,14602,14607,14608,14613,14615,14619,14620,14623,14624,14624,14628,14629,14629,14634,14649,14650,14652,14653,14654,14657,14658,14661,14662,14666,14667,14668,14670,14673,14686,14687,14688,14689,14692,14693,14694,14699,14700,14702,14705,14718,14728,14729,14729,14734,14734,14739,14739,14741,14750,14753,14752,14759,14762,14763,14764,14765,14766,14767,14769,14773,14776,14779,14780,14784,14790,14797,14801,14802,14803,14805,14806,14807,14812,14813,14814,14817,14818,14819,14820,14821,14822,14829,14839,14843,14843,14847,14846,14848,14851,14852,14857,14858,14862,14867,14868,14872,14876,14877,14878,14882,14887,14898,14901,14902,14905,14908,14908,14909,14909,14910,14910,14911,14911,14914,14914,14915,14917,14918,14922,14922,14925,14928,14929,14930,14930,14933,14937,14936,14939,14943,14947,14947,14950,14953,14954,14955,14955,14958,14962,14961,14964,14968,14972,14979,14982,14983,14987,14990,14993,14994,15008,15009,15010,15011,15011,15012,15014,15013,15015,15015,15016,15017,15018,15021,15023,15028,15032,15035,15036,15036,15037,15038,15038,15039,15040,15040,15041,15042,15043,15044,15047,15048,15053,15056,15056,15057,15058,15059,15060,15061,15062,15063,15063,15064,15065,15068,15071,15072,15073,15076,15083,15089,15090,15094,15099,15105,15113,15107,15108,15109,15110,15111,15112,15114,15115,15116,15118,15119,15120,15123,15129,15134,15135,15135,15139,15140,15141,15151,15152,15152,15153,15164,15165,15166,15171,15172,15178,15180,15180,15183,15191,15192,15193,15193,15194,15194,15197,15198,15203,15206,15215,15217,15218,15219,15220,15220,15222,15227,15228,15233,15236,15244,15249,15250,15251,15252,15252,15253,15258,15259,15260,15261,15269,15279,15278,15282,15291,15292,15293,15294,15295,15299,15300,15301,15302,15303,15304,15305,15307,15308,15309,15311,15311,15312,15313,15314,15315,15318,15321,15322,15324,15326,15326,15327,15331,15332,15333,15334,15335,15335,15336,15337,15341,15342,15346,15350,15352,15351,15353,15354,15355,15358,15360,15361,15362,15366,15367,15368,15369,15370,15374,15377,15383,15386,15390,15390,15396,15399,15404,15405,15406,15406,15408,15407,15407,15409,15410,15411,15412,15416,15424,15421,15423,15428,15430,15431,15432,15434,15435,15435,15439,15444,15444,15445,15446,15447,15450,15454,15455,15457,15458,15461,15462,15466,15467,15474,15479,15487,15488,15491,15490,15491,15493,15494,15495,15496,15499,15500,15506,15504,15514,15517,15515,15522,15520,15527,15531,15535,15539,15542,15542,15542,15545,15546,15547,15548,15554,15560,15565,15569,15572,15575,15628,15582,15583,15584,15588,15592,15593,15595,15596,15597,15598,15601,15602,15603,15609,15610,15611,15615,15617,15620,15621,15622,15623,15624,15625,15626,15637,15630,15631,15632,15633,15634,15635,15636,15654,15639,15640,15644,15645,15646,15647,15648,15652,15655,15656,15656,15657,15658,15660,15664,15665,15665,15666,15667,15668,15669,15672,15673,15677,15678,15679,15680,15681,15682,15683,15686,15687,15688,15689,15695,15696,15697,15698,15699,15703,15704,15707,15713,15717,15718,15721,15723,15724,15725,15733,15740,15741,15742,15743,15750,15751,15756,15762,15765,15767,15771,15772,15778,15774,15775,15776,15777,15781,15781,15782,15782,15785,15788,15789,15791,15792,15796,15799,15802,15804,15807,15808,15809,15809,15813,15816,15822,15823,15824,15825,15826,15827,15829,15829,15832,15834,15834,15834,15835,15835,15839,15844,15845,15848,15849,15850,15852,15852,15856,15857,15857,15861,15862,15862,15866,15866,15872,15871,15876,15876,15878,15884,15885,15886,15886,15890,15897,15898,15898,15899,15903,15904,15905,15908,15909,15912,15912,15916,15917,15918,15925,15928,15929,15929,15932,15932,15937,15938,15939,15940,15941,15943,15944,15947,15948,15948,15960,15960,15970,15971,15972,15973,15974,15975,15977,15977,15986,15987,15987,15997,16001,16002,16002,16007,16012,16016,16017,16018,16019,16020,16020,16021,16025,16026,16027,16027,16029,16033,16034,16035,16035,16036,16037,16041,16046,16046,16047,16052,16053,16059,16060,16060,16062,16064,16067,16071,16072,16076,16080,16081,16084,16084,16085,16089,16092,16092,16093,16096,16099,16100,16101,16110,16111,16112,16113,16115,16116,16119,16123,16124,16125,16128,16131,16138,16140,16144,16145,16148,16150,16151,16151,16152,16155,16158,16161,16168,16170,16174,16177,16178,16183,16184,16185,16186,16187,16193,16194,16195,16196,16197,16201,16202,16203,16204,16205,16211,16212,16221,16223,16224,16224,16224,16225,16226,16227,16228,16232,16233,16236,16236,16246,16247,16248,16250,16251,16259,16260,16262,16273,16280,16298,16286,16287,16288,16289,16290,16291,16292,16293,16294,16296,16300,16302,16303,16303,16304,16305,16307,16308,16309,16310,16311,16312,16316,16313,16314,16315,16321,16322,16330,16333,16334,16335,16337,16338,16339,16340,16343,16346,16347,16350,16351,16352,16353,16354,16361,16363,16365,16372,16372,16373,16375,16380,16387,16388,16394,16394,16395,16397,16398,16399,16402,16403,16405,16406,16407,16408,16409,16411,16412,16413,16414,16415,16416,16418,16421,16422,16423,16425,16427,16428,16430,16431,16432,16433,16434,16435,16436,16437,16441,16442,16443,16444,16445,16446,16450,16452,16458,16460,16461,16466,16467,16469,16473,16474,16478,16482,16484,16494,16498,16499,16500,16503,16504,16510,16510,16511,16513,16515,16517,16518,16519,16520,16522,16523,16524,16525,16526,16528,16533,16534,16535,16536,16537,16538,16539,16541,16542,16543,16544,16547,16552,16553,16554,16555,16556,16557,16560,16561,16562,16563,16564,16565,16568,16569,16570,16571,16572,16573,16574,16577,16578,16579,16580,16581,16585,16586,16587,16588,16589,16590,16591,16592,16593,16594,16598,16599,16599,16602,16604,16605,16609,16610,16616,16616,16617,16618,16623,16624,16625,16626,16632,16632,16633,16634,16638,16640,16644,16645,16646,16647,16649,16649,16652,16655,16659,16661,16664,16665,16668,16669,16670,16672,16676,16680,16681,16689,16690,16693,16695,16696,16698,16699,16702,16705,16711,16712,16712,16713,16714,16718,16717,16717,16720,16726,16724,16725,16727,16730,16732,16732,16733,16740,16741,16745,16745,16746,16749,16751,16750,16757,16756,16762,16767,16770,16774,16775,16776,16777,16779,16780,16783,16785,16789,16790,16794,16795,16796,16796,16797,16797,16798,16799,16800,16801,16802,16803,16803,16806,16807,16808,16809,16810,16811,16812,16814,16814,16818,16820,16824,16827,16830,16831,16834,16835,16837,16836,16841,16841,16844,16847,16850,16856,16856,16857,16860,16868,16868,16869,16872,16873,16874,16880,16881,16886,16887,16888,16889,16890,16891,16892,16893,16894,16895,16902,16902,16903,16904,16910,16911,16913,16915,16916,16917,16918,16926,16926,16927,16928,16933,16938,16941,16942,16945,16946,16947,16948,16951,16955,16958,16959,16962,16965,16966,16972,16976,16977,16978,16979,16980,16981,16982,16983,16984,16985,16986,16989,16990,16996,16998,17002,17006,17007,17008,17009,17013,17014,17015,17016,17019,17022,17026,17025,17030,17031,17032,17034,17035,17036,17038,17040,17044,17045,17046,17047,17050,17054,17055,17055,17056,17058,17065,17062,17064,17069,17073,17074,17074,17075,17077,17081,17082,17087,17091,17092,17093,17094,17095,17098,17102,17101,17105,17106,17107,17108,17110,17111,17112,17114,17116,17121,17123,17128,17129,17132,17135,17137,17141,17142,17143,17149,17147,17148,17149,17153,17157,17157,17159,17161,17162,17163,17169,17170,17171,17174,17175,17176,17181,17182,17185,17188,17189,17192,17194,17195,17197,17198,17199,17202,17203,17206,17207,17208,17209,17211,17212,17213,17214,17215,17217,17220,17221,17226,17227,17228,17229,17230,17231,17232,17235,17236,17237,17238,17240,17241,17242,17245,17248,17250,17251,17252,17253,17259,17260,17261,17263,17264,17267,17270,17271,17273,17274,17276,17279,17285,17287,17287,17288,17289,17290,17291,17291,17295,17295,17299,17299,17300,17303,17305,17306,17307,17309,17311,17312,17314,17318,17319,17320,17320,17323,17326,17330,17331,17332,17333,17334,17335,17335,17336,17337,17338,17340,17341,17341,17342,17343,17344,17347,17350,17353,17354,17355,17356,17359,17360,17361,17362,17364,17365,17367,17368,17369,17372,17379,17380,17382,17383,17387,17389,17390,17391,17394,17395,17400,17401,17407,17408,17409,17411,17412,17414,17415,17415,17416,17419,17420,17422,17423,17426,17430,17431,17433,17435,17436,17437,17438,17439,17440,17441,17445,17457,17458,17459,17461,17460,17463,17464,17464,17469,17470,17473,17476,17481,17483,17488,17484,17492,17493,17494,17495,17497,17498,17502,17503,17504,17505,17506,17507,17509,17510,17513,17517,17521,17525,17526,17529,17532,17535,17536,17537,17540,17546,17550,17551,17556,17557,17558,17562,17563,17564,17565,17566,17569,17570,17571,17574,17575,17576,17580,17590,17591,17592,17595,17596,17598,17601,17604,17603,17603,17606,17605,17605,17608,17607,17607,17609,17610,17612,17628,17631,17629,17634,17637,17635,17640,17644,17645,17646,17648,17649,17649,17650,17653,17654,17655,17659,17660,17663,17669,17670,17671,17675,17677,17678,17679,17680,17681,17685,17686,17688,17693,17698,17702,17703,17705,17706,17707,17708,17711,17713,17714,17718,17721,17724,17726,17728,17729,17732,17733,17734,17738,17739,17740,17741,17744,17747,17748,17749,17751,17750,17752,17754,17755,17763,17759,17760,17761,17764,17765,17766,17767,17768,17769,17770,17771,17774,17777,17778,17779,17784,17785,17787,17788,17791,17795,17796,17797,17801,17802,17806,17807,17811,17815,17814,17817,17818,17819,17820,17823,17824,17825,17826,17827,17829,17830,17831,17833,17834,17837,17841,17842,17849,17885,17923,17924,17928,17933,17938,17943,17949,17955,17956,17957,17962,17964,17968,17969,17970,17971,17972,17973,17973,17975,17976,17977,17978,17979,17980,17981,17982,17983,17984,17985,17986,17987,17988,17989,17990,17991,17992,17993,17994,17995,17996,18000,18002,18003,18004,18007,18008,18009,18010,18011,18012,18013,18014,18015,18016,18017,18021,18025,18027,18028,18029,18032,18033,18034,18035,18036,18037,18042,18044,18045,18046,18047,18048,18049,18050,18053,18054,18056,18057,18058,18060],"pod":[[145,"store_description"],[157,"fast_mode"],[307,"equal"],[315,"unique"],[320,"find_duplicates"],[326,"intersect"],[332,"max"],[342,"aref_delete"],[356,"aref_eq"],[365,"keys_eq"],[374,"warn_msg"],[396,"context"],[409,"at_line"],[416,"check_abort"],[426,"abort_on_error"],[431,"set_abort_immediately"],[436,"error_atline"],[443,"err_msg"],[450,"syntax_err"],[455,"internal_err"],[479,"skip_space_and_comment"],[493,"check"],[501,"skip"],[507,"check_int"],[517,"read_int"],[524,"check_ip"],[537,"read_ip"],[545,"read_ip_prefix"],[557,"read_ip_prefix_pair"],[562,"gen_ip"],[569,"print_ip"],[574,"read_identifier"],[585,"read_owner_pattern"],[596,"read_name"],[607,"read_string"],[621,"read_union"],[650,"check_typed_name"],[677,"read_typed_name"],[706,"read_extended_name"],[775,"read_user_id"],[786,"check_hostname"],[802,"read_complement"],[811,"read_intersection"],[833,"read_time_val"],[840,"add_description"],[856,"check_permit_deny"],[866,"check_nat_name"],[876,"split_typed_name"],[883,"check_flag"],[894,"check_assign"],[912,"read_list"],[928,"read_list_or_null"],[934,"read_assign_list"],[941,"check_assign_list"],[950,"check_assign_pair"],[971,"new"],[977,"add_attribute"],[986,"check_radius_attributes"],[1001,"check_routing"],[1008,"check_managed"],[1038,"check_model"],[1069,"host_as_interface"],[1110,"read_host"],[1221,"read_nat"],[1278,"read_network"],[1495,"read_interface"],[1797,"set_pix_interface_level"],[1841,"check_no_in_acl"],[1897,"read_router"],[2447,"move_locked_interfaces"],[2497,"read_aggregate"],[2547,"check_router_attributes"],[2582,"read_area"],[2646,"read_group"],[2659,"read_protocolgroup"],[2666,"read_port_range"],[2696,"read_port_ranges"],[2711,"read_icmp_type_code"],[2739,"read_proto_nr"],[2767,"gen_protocol_name"],[2813,"cache_anonymous_protocol"],[2827,"read_simple_protocol"],[2864,"check_protocol_flags"],[2883,"read_typed_name_or_simple_protocol"],[2887,"read_protocol"],[2898,"assign_union_allow_user"],[2908,"read_service"],[2992,"read_pathrestriction"],[3003,"read_attributed_object"],[3081,"read_isakmp"],[3119,"read_ipsec"],[3126,"read_crypto"],[3153,"read_owner"],[3218,"read_netspoc"],[3239,"read_file"],[3268,"read_file_or_dir"],[3334,"show_read_statistics"],[3349,"is_network"],[3350,"is_router"],[3351,"is_interface"],[3352,"is_host"],[3353,"is_subnet"],[3354,"is_area"],[3355,"is_zone"],[3356,"is_group"],[3357,"is_protocolgroup"],[3358,"is_objectgroup"],[3359,"is_chain"],[3360,"is_autointerface"],[3365,"print_rule"],[3398,"prepare_prt_ordering"],[3460,"order_icmp"],[3486,"order_proto"],[3503,"order_ranges"],[3652,"expand_splitted_protocol"],[3707,"order_protocols"],[3756,"link_to_owner"],[3772,"link_to_real_owner"],[3791,"expand_watchers"],[3835,"link_owners"],[3927,"link_policy_distribution_point"],[3952,"link_general_permit"],[3998,"link_areas"],[4058,"link_interfaces"],[4113,"check_interface_ip"],[4175,"link_routers"],[4184,"link_subnet"],[4238,"link_subnets"],[4253,"add_pathrestriction"],[4267,"link_pathrestrictions"],[4366,"link_virtual_interfaces"],[4485,"is_redundany_group"],[4493,"check_ip_addresses"],[4593,"link_topology"],[4622,"disable_behind"],[4675,"check_bridged_networks"],[4738,"mark_disabled"],[4884,"split_ip_range"],[4900,"convert_hosts"],[5110,"combine_subnets"],[5163,"get_intf"],[5178,"get_auto_intf"],[5218,"check_auto_intf"],[5283,"expand_group1"],[5781,"remove_duplicates"],[5800,"expand_group"],[5819,"expand_group_in_rule"],[5921,"check_unused_groups"],[5945,"expand_protocols"],[6006,"split_protocols"],[6064,"add_rules"],[6094,"get_zone"],[6140,"expand_special"],[6220,"add_managed_hosts"],[6242,"collect_unenforceable"],[6307,"show_unenforceable"],[6348,"warn_useless_unenforceable"],[6359,"show_deleted_rules1"],[6414,"collect_redundant_rules"],[6453,"show_deleted_rules2"],[6494,"warn_unused_overlaps"],[6514,"collect_log"],[6524,"check_log"],[6538,"normalize_log"],[6549,"expand_rules"],[6690,"print_rulecount"],[6699,"expand_services"],[6767,"set_policy_distribution_ip"],[6907,"propagate_owners"],[7225,"expand_auto_intf"],[7245,"show_unknown_owners"],[7269,"set_service_owner"],[7405,"set_natdomain"],[7481,"distribute_nat1"],[7627,"distribute_nat"],[7639,"distribute_nat_info"],[7933,"invert_nat_set"],[8006,"adjust_crypto_nat"],[8034,"get_nat_network"],[8052,"check_subnets"],[8098,"nat_to_loopback_ok"],[8125,"by_name"],[8132,"find_subnets_in_zone"],[8399,"find_subnets_in_nat_domain"],[8623,"cluster_crosslink_routers"],[8677,"check_crosslink"],[8780,"get_managed_local_clusters"],[8902,"mark_managed_local"],[8956,"link_reroute_permit"],[8992,"add_managed_hosts_to_aggregate"],[9037,"link_aggregate_to_zone"],[9070,"link_implicit_aggregate_to_zone"],[9146,"link_aggregates"],[9240,"duplicate_aggregate_to_cluster"],[9277,"get_any"],[9333,"get_cluster_aggregates"],[9346,"set_zone1"],[9419,"set_zone_cluster"],[9464,"zone_eq"],[9478,"set_area1"],[9546,"inherit_router_attributes"],[9587,"nat_equal"],[9605,"check_useless_nat"],[9622,"inherit_area_nat"],[9655,"inherit_attributes_from_area"],[9668,"inherit_nat_to_subnets_in_zone"],[9730,"inherit_nat_in_zone"],[9757,"cleanup_after_inheritance"],[9775,"inherit_attributes"],[9786,"set_zones"],[9828,"cluster_zones"],[9849,"prepare_area_borders"],[9877,"set_area"],[9902,"set_areas"],[9960,"find_area_subset_relations"],[10022,"check_routers_in_nested_areas"],[10073,"clean_areas"],[10086,"set_zone"],[10107,"check_virtual_interfaces"],[10152,"check_pathrestrictions"],[10281,"traverse_loop_part"],[10324,"apply_pathrestriction_optimization"],[10388,"optimize_pathrestrictions"],[10455,"setpath_obj"],[10552,"set_loop_cluster"],[10585,"find_dists_and_loops"],[10612,"process_loops"],[10650,"setpath"],[10673,"get_path"],[10752,"cluster_path_mark1"],[10925,"cluster_navigation"],[11002,"cluster_path_mark"],[11363,"path_mark"],[11491,"loop_path_walk"],[11557,"path_walk"],[11688,"single_path_walk"],[11699,"set_auto_intf_from_border"],[11742,"path_auto_interfaces"],[11827,"link_ipsec"],[11845,"link_crypto"],[11866,"gen_tunnel_rules"],[11899,"link_tunnels"],[12080,"crypto_behind"],[12124,"verify_asa_vpn_attributes"],[12156,"verify_subject_name"],[12179,"verify_asa_trustpoint"],[12192,"expand_crypto"],[12448,"setup_ref2obj"],[12502,"collect_supernet_dst_rules"],[12533,"find_supernet"],[12559,"find_zone_network"],[12612,"find_matching_supernet"],[12653,"check_supernet_in_zone"],[12737,"check_supernet_src_rule"],[12892,"check_supernet_dst_rule"],[12968,"check_supernet_dst_collections"],[13006,"find_smaller_prt"],[13060,"check_for_transient_supernet_rule"],[13289,"mark_stateful"],[13311,"check_supernet_rules"],[13361,"gen_reverse_rules1"],[13495,"gen_reverse_rules"],[13527,"get_zone2"],[13546,"mark_secondary"],[13576,"mark_primary"],[13602,"mark_local_secondary"],[13626,"get_zones"],[13640,"have_different_marks"],[13650,"have_set_and_equal_marks"],[13657,"mark_secondary_rules"],[13703,"get_zone_cluster_borders"],[13718,"mark_dynamic_host_nets"],[13753,"check_dynamic_nat_rules"],[13972,"optimize_rules"],[14098,"optimize_and_warn_deleted"],[14116,"group_rules"],[14196,"group_path_rules"],[14283,"collect_nat_path"],[14302,"distribute_nat_to_device"],[14367,"add_networks"],[14391,"prepare_nat_commands"],[14444,"get_route_networks"],[14487,"set_routes_in_zone"],[14649,"add_path_routes"],[14686,"add_end_routes"],[14718,"get_route_path"],[14750,"generate_routing_tree1"],[14839,"generate_routing_tree"],[14898,"generate_routing_info"],[14979,"find_active_routes"],[15008,"fix_bridged_hops"],[15032,"check_and_convert_routes"],[15291,"print_header"],[15299,"print_routes"],[15487,"print_nat1"],[15569,"print_pix_static"],[15664,"optimize_nat_networks"],[15717,"print_nat"],[15733,"distribute_rule"],[15884,"add_router_acls"],[16001,"create_general_permit_rules"],[16016,"distribute_general_permit"],[16080,"rules_distribution"],[16110,"address"],[16183,"ios_route_code"],[16193,"prefix_code"],[16201,"full_prefix_code"],[16211,"print_acl_placeholder"],[16221,"get_split_tunnel_nets"],[16246,"print_asavpn"],[16552,"print_acl_prefix"],[16585,"print_acl_suffix"],[16598,"print_iptables_acls"],[16644,"print_cisco_acls"],[16774,"generate_acls"],[16789,"gen_crypto_rules"],[16794,"print_ezvpn"],[16880,"print_crypto_acl"],[16910,"print_crypto_filter_acl"],[16933,"print_crypto_map_attributes"],[16976,"print_tunnel_group"],[17002,"print_ca_and_tunnel_group_map"],[17013,"print_static_crypto_map"],[17091,"print_dynamic_crypto_map"],[17141,"print_crypto"],[17330,"print_interface"],[17400,"print_address"],[17407,"print_prt"],[17430,"print_acls"],[17669,"check_output_dir"],[17698,"print_code"],[17795,"copy_raw"],[17841,"show_version"],[17849,"init_protocols"],[17968,"init_global_vars"],[18000,"compile"]],"digest":"0fd257552ab83c238a3d4cb511ca2e7c","condition":[[495,{"right":"qr/\\G$token/","left":"$token2regex{$token}","type":"or_3","op":"||="}],[502,{"right":"syntax_err(\"Expected '${token}'\")","left":"check($token)","type":"or_2","op":"||"}],[526,{"type":"or_3","op":"or","left":"$1 > 255","right":"$2 > 255"}],[526,{"op":"or","type":"or_3","right":"$3 > 255","left":"$1 > 255 or $2 > 255"}],[526,{"type":"or_3","op":"or","right":"$4 > 255","left":"$1 > 255 or $2 > 255 or $3 > 255"}],[637,{"left":"$user_ref_error","right":"$has_user_ref != $$user_object{'refcount'} > $count","type":"or_3","op":"||="}],[663,{"op":"or","type":"or_3","right":"$type eq 'interface'","left":"$type eq 'network'"}],[677,{"right":"syntax_err('Typed name expected')","left":"check_typed_name()","type":"or_3","op":"||"}],[720,{"left":"$interface","right":"$type eq 'host'","type":"or_3","op":"||"}],[720,{"left":"$interface || $type eq 'host'","right":"check('managed')","type":"and_3","op":"and"}],[720,{"op":"and","type":"and_3","right":"check('ip')","left":"$type eq 'any'"}],[719,{"right":"$input =~ / \\G ( [\\w-]+ (?: \\@ [\\w-]+ ) ) /cgx","left":"$interface","op":"and","type":"and_3"}],[719,{"type":"or_3","op":"or","right":"$input =~ / \\G ( [\\w-]+ ) /cgx","left":"$interface and $input =~ / \\G ( [\\w-]+ (?: \\@ [\\w-]+ ) ) /cgx"}],[1047,{"op":"||","type":"or_2","right":"{}","left":"$$info{'extension'}"}],[1178,{"type":"xor_4","op":"xor","left":"$$host{'ip'}","right":"$$host{'range'}"}],[1198,{"right":"'short'","left":"$$host{'ip'}","type":"or_2","op":"||="}],[1202,{"right":"{}","left":"$$host{'radius_attributes'}","type":"or_2","op":"||="}],[1351,{"type":"and_3","op":"and","right":"$$network{'nat'}{$nat_tag}","left":"$$network{'nat'}"}],[1427,{"left":"match_ip($ip1, $ip, $mask)","right":"match_ip($ip2, $ip, $mask)","op":"and","type":"and_3"}],[1443,{"left":"@{$$network{'hosts'};}","right":"$$network{'crosslink'}","type":"and_3","op":"and"}],[1468,{"right":"{}","left":"$$network{'radius_attributes'}","op":"||=","type":"or_2"}],[1639,{"right":"not $$virtual{'redundancy_type'}","left":"$$virtual{'redundancy_id'}","op":"and","type":"and_3"}],[1678,{"left":"$$interface{'ip'}","right":"'bridged'","type":"or_2","op":"||="}],[1704,{"op":"||=","type":"or_2","left":"$$interface{'ip'}","right":"'short'"}],[1718,{"left":"$$interface{'owner'}","right":"not $$interface{'vip'}","op":"and","type":"and_3"}],[1806,{"left":"@levels >= 2","right":"not equal(@levels)","type":"and_3","op":"and"}],[1801,{"type":"and_3","op":"and","right":"$level <= 100","left":"($level) = $hwname =~ /(\\d+)$/"}],[2009,{"left":"$model","right":"$$model{'has_vip'}","type":"and_3","op":"&&"}],[2009,{"type":"and_3","op":"and","left":"$$interface{'vip'}","right":"not $model && $$model{'has_vip'}"}],[2047,{"left":"$$router{'vrf'}","right":"not $$model{'can_vrf'}","type":"and_3","op":"and"}],[2083,{"left":"$$interface{'bind_nat'}","right":"$bind_nat0","type":"or_3","op":"||"}],[2083,{"left":"$$hardware{'bind_nat'}","right":"$bind_nat0","op":"||","type":"or_3"}],[2099,{"right":"$$model{'has_vip'}","left":"$hw_name eq 'VIP'","type":"and_3","op":"and"}],[2099,{"left":"$hw_name eq 'VIP' and $$model{'has_vip'}","right":"not $$interface{'vip'}","op":"and","type":"and_3"}],[2131,{"right":"$all_routing","left":"$$interface{'routing'}","type":"or_3","op":"||="}],[2133,{"left":"my $routing = $$interface{'routing'}","right":"$$interface{'ip'} eq 'unnumbered'","op":"and","type":"and_3"}],[2153,{"op":"and","type":"and_3","right":"not $$model{'can_log_deny'}","left":"$$router{'log_deny'}"}],[2185,{"left":"$$router{'no_protect_self'}","right":"not $$model{'need_protect'}","type":"and_3","op":"and"}],[2195,{"op":"and","type":"and_3","right":"not $$model{'has_interface_level'}","left":"defined $$interface{'security_level'}"}],[2201,{"op":"or","type":"or_3","right":"$$interface{'spoke'}","left":"$$interface{'hub'}"}],[2206,{"left":"$$interface{'hub'}","right":"$$model{'do_auth'}","op":"&&","type":"and_3"}],[2206,{"right":"not $$interface{'hub'} && $$model{'do_auth'}","left":"$$interface{'no_check'}","op":"and","type":"and_3"}],[2304,{"op":"||=","type":"or_2","left":"$$router{'radius_attributes'}","right":"{}"}],[2430,{"op":"||","type":"or_3","left":"$$interface{'spoke'}","right":"$$interface{'hub'}"}],[2430,{"left":"$$interface{'spoke'} || $$interface{'hub'}","right":"not $$interface{'no_check'}","op":"and","type":"and_3"}],[2470,{"type":"or_2","op":"||=","left":"$$orig_router{'orig_interfaces'}","right":"[@$interfaces]"}],[2609,{"op":"or","type":"or_3","left":"$$pair[0] ne 'network'","right":"ref $$pair[1]"}],[2632,{"op":"||","type":"or_3","left":"$$area{'border'}","right":"$$area{'inclusive_border'}"}],[2632,{"left":"$$area{'border'} || $$area{'inclusive_border'}","right":"$$area{'anchor'}","op":"and","type":"and_3"}],[2637,{"type":"or_3","op":"or","left":"$$area{'anchor'}","right":"$$area{'border'}"}],[2637,{"right":"$$area{'inclusive_border'}","left":"$$area{'anchor'} or $$area{'border'}","op":"or","type":"or_3"}],[2675,{"right":"$port2 == 65535","left":"$port1 == 1","type":"and_3","op":"and"}],[2726,{"right":"$type == 3","left":"$type == 0","type":"or_3","op":"or"}],[2726,{"op":"or","type":"or_3","left":"$type == 0 or $type == 3","right":"$type == 11"}],[2771,{"left":"$proto eq 'tcp'","right":"$proto eq 'udp'","type":"or_3","op":"or"}],[2776,{"op":"and","type":"and_3","right":"$v2 == 65535","left":"$v1 == 1"}],[2787,{"left":"$src_range","right":"&$port_name(@$src_range)","type":"and_3","op":"&&"}],[2883,{"right":"read_simple_protocol()","left":"check_typed_name()","op":"||","type":"or_3"}],[2962,{"left":"$src_user","right":"$dst_user","op":"or","type":"or_3"}],[2964,{"left":"$src_user","right":"$dst_user","type":"and_3","op":"&&"}],[2964,{"op":"and","type":"and_3","left":"$$service{'foreach'}","right":"not $src_user && $dst_user"}],[3192,{"right":"$$owner{'watchers'}","left":"$$owner{'extend_only'}","op":"and","type":"and_3"}],[3269,{"right":"\\&read_netspoc","left":"$read_syntax","op":"||=","type":"or_2"}],[3272,{"left":"defined $path","right":"-d $path","op":"and","type":"and_3"}],[3370,{"type":"and_3","op":"&&","left":"$$rule{'rule'}","right":"$$rule{'rule'}{'service'}"}],[3375,{"right":"$$rule{'prt'}","left":"$$rule{'orig_prt'}","op":"||","type":"or_3"}],[3401,{"op":"or","type":"or_3","left":"$proto eq 'tcp'","right":"$proto eq 'udp'"}],[3473,{"type":"or_3","op":"||","left":"$$hash{$$prt{'type'}}","right":"$up"}],[3642,{"op":"and","type":"and_3","right":"$a2 == 65535","left":"$a1 == 1"}],[3757,{"right":"'owner'","left":"$key","type":"or_2","op":"||="}],[3842,{"right":"$name","left":"$$owner{'alias'}","op":"||","type":"or_3"}],[3984,{"left":"$range","right":"$range ne $aref_tcp_any","op":"and","type":"and_3"}],[3984,{"type":"or_3","op":"or","left":"$src_range","right":"$range and $range ne $aref_tcp_any"}],[4334,{"right":"$$interface{'hub'}","left":"$$interface{'spoke'}","type":"or_3","op":"or"}],[4375,{"type":"or_2","op":"||","right":"''","left":"$$virtual1{'redundancy_type'}"}],[4376,{"type":"or_2","op":"||","left":"$$virtual1{'redundancy_id'}","right":"''"}],[4379,{"right":"''","left":"$$virtual2{'redundancy_type'}","type":"or_2","op":"||"}],[4385,{"type":"or_2","op":"||","right":"''","left":"$$virtual2{'redundancy_id'}"}],[4468,{"right":"$$router{'routing_only'}","left":"$$router{'managed'}","op":"or","type":"or_3"}],[4494,{"left":"$$network{'ip'} eq 'unnumbered'","right":"$$network{'interfaces'}","type":"and_3","op":"and"}],[4494,{"right":"@{$$network{'interfaces'};} > 2","left":"$$network{'ip'} eq 'unnumbered' and $$network{'interfaces'}","op":"and","type":"and_3"}],[4524,{"left":"$$router{'managed'}","right":"$$router{'routing_only'}","op":"||","type":"or_3"}],[4524,{"left":"$$router{'managed'} || $$router{'routing_only'}","right":"not $$interface{'routing'}","op":"and","type":"and_3"}],[4530,{"op":"and","type":"and_3","right":"$$interface{'redundant'}","left":"$$old_intf{'redundant'}"}],[4542,{"op":"and","type":"and_3","left":"$short_intf","right":"$route_intf"}],[4627,{"type":"or_3","op":"or","right":"$$network{'disabled'}","left":"not $network"}],[4699,{"right":"$mask == $mask1","left":"$ip == $ip1","op":"and","type":"and_3"}],[4758,{"op":"or","type":"or_3","left":"$$router{'managed'}","right":"$$router{'routing_only'}"}],[4807,{"type":"or_3","op":"||","right":"$$_{'routing_only'}","left":"$$_{'managed'}"}],[4889,{"op":"and","type":"and_3","right":"$low + $mask <= $high","left":"($low & $mask) == 0"}],[4952,{"type":"xor_4","op":"xor","left":"$nat","right":"$nat2"}],[4952,{"op":"and","type":"and_3","right":"$nat2","left":"$nat"}],[4962,{"op":"and","type":"and_3","left":"$$nat2{$name}","right":"$$nat{$name} eq $$nat2{$name}"}],[4979,{"right":"$owner2","left":"$owner","type":"xor_4","op":"xor"}],[4979,{"left":"$owner","right":"$owner2","type":"and_3","op":"and"}],[4979,{"op":"and","type":"and_3","left":"$owner and $owner2","right":"$owner ne $owner2"}],[4979,{"left":"$owner xor $owner2","right":"$owner and $owner2 and $owner ne $owner2","op":"or","type":"or_3"}],[5019,{"right":"$$subnet{'id'}","left":"$$subnet{'nat'}","type":"or_3","op":"||"}],[5019,{"right":"$ip % $modulo == 0","left":"not $$subnet{'nat'} || $$subnet{'id'}","op":"and","type":"and_3"}],[5043,{"left":"$up_inv_prefix < @inv_prefix_aref","right":"$up = $inv_prefix_aref[$up_inv_prefix]{$ip}","type":"and_3","op":"and"}],[5092,{"right":"$network","left":"$$subnet{'up'}","type":"or_3","op":"||="}],[5101,{"op":"or","type":"or_3","left":"$$router{'managed'}","right":"$$router{'routing_only'}"}],[5116,{"type":"and_3","op":"and","left":"$neighbor = $$subnet{'neighbor'}","right":"$hash{$neighbor}"}],[5179,{"left":"$managed","right":"0","type":"or_2","op":"||="}],[5228,{"right":"$$info{'n'}{$router}{$network}","left":"$$info{'r'}{$router}","type":"or_3","op":"||"}],[5247,{"left":"not $other","right":"$other = $$info{'i'}{$router}","op":"and","type":"and_3"}],[5397,{"right":"$$router{'routing_only'}","left":"$$router{'managed'}","op":"||","type":"or_3"}],[5397,{"left":"$managed","right":"not $$router{'managed'} || $$router{'routing_only'}","op":"and","type":"and_3"}],[5456,{"type":"or_3","op":"||","left":"$$obj{'managed'}","right":"$$obj{'routing_only'}"}],[5456,{"type":"and_3","op":"and","left":"$managed","right":"not $$obj{'managed'} || $$obj{'routing_only'}"}],[5527,{"op":"and","type":"and_3","left":"$type eq 'Network'","right":"$$object{'is_aggregate'}"}],[5544,{"left":"$type eq 'Host'","right":"$type eq 'Interface'","op":"or","type":"or_3"}],[5726,{"type":"or_2","op":"||","right":"'public'","left":"$$object{'private'}"}],[5694,{"right":"$$object{'zone'}{'zone_cluster'}","left":"$$object{'is_aggregate'}","type":"and_3","op":"and"}],[5876,{"right":"$subnet_warning_seen{$subnet}++","left":"$$network{'has_id_hosts'}","type":"or_3","op":"or"}],[6010,{"type":"or_3","op":"or","right":"$proto eq 'udp'","left":"$proto eq 'tcp'"}],[6024,{"left":"$src_range","right":"$$prt{'flags'}","type":"or_3","op":"or"}],[6024,{"op":"or","type":"or_3","right":"$$dst_range{'name'} ne $$prt{'name'}","left":"$src_range or $$prt{'flags'}"}],[6065,{"right":"\\%rule_tree","left":"$rule_tree","type":"or_2","op":"||="}],[6070,{"right":"''","left":"$stateless","type":"or_2","op":"||="}],[6071,{"right":"''","left":"$deny","op":"||=","type":"or_2"}],[6072,{"type":"or_3","op":"||=","right":"$prt_ip","left":"$src_range"}],[6166,{"left":"$type eq 'Subnet'","right":"$type eq 'Host'","type":"or_3","op":"or"}],[6179,{"right":"$$obj{'loopback'}","left":"$$obj{'router'}{'managed'}","op":"or","type":"or_3"}],[6201,{"right":"$type eq 'Interface'","left":"$type eq 'Subnet'","type":"or_3","op":"or"}],[6201,{"right":"$type eq 'Host'","left":"$type eq 'Subnet' or $type eq 'Interface'","type":"or_3","op":"or"}],[6261,{"right":"is_autointerface($dst)","left":"is_autointerface($src)","op":"or","type":"or_3"}],[6257,{"type":"and_3","op":"and","left":"is_subnet($src)","right":"is_subnet($dst)"}],[6257,{"right":"$$dst{'is_aggregate'}","left":"$$src{'is_aggregate'}","op":"and","type":"and_3"}],[6283,{"right":"$$src{'ip'} == $$dst{'ip'}","left":"zone_eq($$src{'zone'}, $$dst{'zone'})","type":"and_3","op":"and"}],[6283,{"right":"$$src{'mask'} == $$dst{'mask'}","left":"zone_eq($$src{'zone'}, $$dst{'zone'}) and $$src{'ip'} == $$dst{'ip'}","type":"and_3","op":"and"}],[6257,{"left":"$$src{'is_aggregate'}","right":"$$src{'mask'} == 0","type":"and_3","op":"and"}],[6257,{"type":"and_3","op":"and","right":"$$dst{'mask'} == 0","left":"$$dst{'is_aggregate'}"}],[6302,{"op":"||=","type":"or_2","left":"$$service{'seen_unenforceable'}{$src}{$dst}","right":"[$src, $dst]"}],[6310,{"left":"$$service{'seen_unenforceable'}","right":"$$service{'seen_enforceable'}","type":"and_3","op":"&&"}],[6310,{"type":"and_3","op":"and","right":"not $$service{'seen_unenforceable'} && $$service{'seen_enforceable'}","left":"$$service{'has_unenforceable'}"}],[6325,{"right":"$$service{'silent_unenforceable'}","left":"$$service{'seen_unenforceable'}","type":"or_3","op":"or"}],[6365,{"right":"$$rule{'prt'}","left":"$$rule{'orig_prt'}","op":"||","type":"or_3"}],[6366,{"op":"||","type":"or_3","right":"$$other{'prt'}","left":"$$other{'orig_prt'}"}],[6367,{"left":"$$prt1{'flags'}{'overlaps'}","right":"$$prt2{'flags'}{'overlaps'}","op":"and","type":"and_3"}],[6420,{"left":"$$rule{'orig_prt'}","right":"$$rule{'prt'}","op":"||","type":"or_3"}],[6421,{"op":"||","type":"or_3","left":"$$other{'orig_prt'}","right":"$$other{'prt'}"}],[6422,{"type":"and_3","op":"and","left":"$$prt1{'flags'}{'overlaps'}","right":"$$prt2{'flags'}{'overlaps'}"}],[6429,{"right":"$$router{'routing_only'}","left":"$$router{'managed'}","op":"or","type":"or_3"}],[6541,{"op":"||=","type":"or_2","right":"\\@tags","left":"$key2log{$key}"}],[6607,{"left":"$obj2zone{$src}","right":"get_zone($src)","op":"||","type":"or_3"}],[6610,{"type":"or_3","op":"||","right":"get_zone($dst)","left":"$obj2zone{$dst}"}],[6612,{"type":"and_3","op":"and","left":"$src_zone_cluster","right":"$dst_zone_cluster"}],[6612,{"op":"and","type":"and_3","left":"$src_zone_cluster and $dst_zone_cluster","right":"$src_zone_cluster eq $dst_zone_cluster"}],[6612,{"right":"$src_zone_cluster and $dst_zone_cluster and $src_zone_cluster eq $dst_zone_cluster","left":"$src_zone eq $dst_zone","op":"or","type":"or_3"}],[6637,{"op":"and","type":"and_3","left":"$src_p","right":"$src_p eq $private"}],[6637,{"right":"$dst_p eq $private","left":"$dst_p","op":"and","type":"and_3"}],[6637,{"type":"or_3","op":"or","right":"$dst_p and $dst_p eq $private","left":"$src_p and $src_p eq $private"}],[6772,{"op":"and","type":"and_3","left":"$p1 <= 23","right":"23 <= $p2"}],[6772,{"op":"and","type":"and_3","right":"22 <= $p2","left":"$p1 <= 22"}],[6854,{"op":"||","type":"or_2","right":"''","left":"$$b{'loopback'}"}],[6854,{"left":"$$a{'loopback'}","right":"''","op":"||","type":"or_2"}],[6948,{"type":"and_3","op":"and","right":"equal(map({$$_{'owner'};} @implicit_owner_zones))","left":"@implicit_owner_zones == @$cluster"}],[7011,{"left":"$$router{'managed'}","right":"$$router{'routing_only'}","op":"or","type":"or_3"}],[7078,{"op":"and","type":"and_3","left":"$owner","right":"$$owner{'extend_only'}"}],[7084,{"type":"and_3","op":"and","left":"$owner","right":"$$owner{'extend_only'}"}],[7106,{"left":"$extended{$owner}","right":"[]","op":"||","type":"or_2"}],[7138,{"type":"and_3","op":"and","left":"$combined","right":"@$combined"}],[7144,{"left":"$$node{'owner'}","right":"''","op":"||","type":"or_2"}],[7189,{"left":"$$interface{'owner'}","right":"$owner","op":"||=","type":"or_3"}],[7196,{"type":"or_3","op":"||","right":"$$router{'routing_only'}","left":"$$router{'managed'}"}],[7256,{"type":"and_3","op":"and","right":"$unknown2services{$obj} eq $unknown2services{$up}","left":"$unknown2services{$up}"}],[7340,{"left":"keys %$service_owners == 1","right":"$$service_owners{$sub_owner}","type":"and_3","op":"and"}],[7349,{"type":"xor_4","op":"xor","right":"$$service{'multi_owner'}","left":"$multi_count > 1"}],[7368,{"type":"and_3","op":"and","left":"$unknown_owners","right":"keys %$unknown_owners"}],[7368,{"type":"xor_4","op":"xor","left":"$unknown_owners and keys %$unknown_owners","right":"$$service{'unknown_owner'}"}],[7424,{"right":"$bind_nat0","left":"$$interface{'bind_nat'}","op":"||","type":"or_3"}],[7433,{"type":"or_2","op":"||","left":"join(',', @$nat_tags)","right":"'(none)'"}],[7434,{"left":"join(',', @$entry_nat_tags)","right":"'(none)'","op":"||","type":"or_2"}],[7455,{"left":"$$out_interface{'bind_nat'}","right":"$bind_nat0","op":"||","type":"or_3"}],[7871,{"op":"and","type":"and_3","right":"$$nat_network{'dynamic'}","left":"$nat_network = $$network{'nat'}{$nat_tag}"}],[7907,{"right":"$$intf_nat{$nat_tag}","left":"$intf_nat","op":"and","type":"and_3"}],[7970,{"op":"||=","type":"or_2","left":"$partition2tags{$mark}","right":"{}"}],[7989,{"right":"$$router{'semi_managed'}","left":"$$router{'managed'}","type":"or_3","op":"or"}],[7993,{"right":"$$router{'routing_only'}","left":"$$router{'managed'}","type":"or_3","op":"or"}],[8035,{"right":"$no_nat_set","left":"my $href = $$network{'nat'}","type":"and_3","op":"and"}],[8053,{"type":"or_3","op":"or","left":"$$network{'is_aggregate'}","right":"$$subnet{'is_aggregate'}"}],[8057,{"type":"or_3","op":"||","right":"$ip1 <= $sub_ip && $sub_ip <= $ip2","left":"match_ip($ip2, $sub_ip, $sub_mask)"}],[8057,{"left":"$ip2","right":"match_ip($ip2, $sub_ip, $sub_mask) || $ip1 <= $sub_ip && $sub_ip <= $ip2","type":"and_3","op":"and"}],[8057,{"type":"or_3","op":"or","left":"match_ip($ip1, $sub_ip, $sub_mask)","right":"$ip2 and match_ip($ip2, $sub_ip, $sub_mask) || $ip1 <= $sub_ip && $sub_ip <= $ip2"}],[8065,{"left":"my $nat_tags = $$object{'bind_nat'}","right":"my($nat_tag2) = $$subnet{'name'} =~ /^nat:(.*)\\(/","type":"and_3","op":"and"}],[8068,{"left":"grep {$_ eq $nat_tag2;} @$nat_tags","right":"$$object{'ip'} == $$subnet{'ip'}","type":"and_3","op":"and"}],[8068,{"right":"$$subnet{'mask'} == 4294967295","left":"grep {$_ eq $nat_tag2;} @$nat_tags and $$object{'ip'} == $$subnet{'ip'}","type":"and_3","op":"and"}],[8325,{"type":"or_2","op":"||","right":"{}","left":"$$network{'nat'}"}],[8420,{"left":"$$old_net{'is_aggregate'}","right":"$$network{'is_aggregate'}","type":"or_3","op":"or"}],[8420,{"op":"and","type":"and_3","right":"$$nat_network{'dynamic'}","left":"$$nat_old_net{'dynamic'}"}],[8420,{"op":"and","type":"and_3","left":"$$old_net{'loopback'}","right":"$$nat_network{'dynamic'}"}],[8420,{"op":"and","type":"and_3","right":"$$network{'loopback'}","left":"$$nat_old_net{'dynamic'}"}],[8420,{"op":"||","type":"or_2","right":"0","left":"$$network{'bridged'}"}],[8420,{"right":"1","left":"$$old_net{'bridged'}","op":"||","type":"or_2"}],[8461,{"left":"$identical{$old_net}","right":"[$old_net]","type":"or_2","op":"||="}],[8536,{"right":"$$subnet{'is_aggregate'}","left":"$$bignet{'is_aggregate'}","type":"or_3","op":"or"}],[8536,{"op":"or","type":"or_3","right":"$$bignet{'has_subnets'}","left":"$$bignet{'is_aggregate'} or $$subnet{'is_aggregate'}"}],[8536,{"type":"and_3","op":"and","left":"$$nat_subnet{'subnet_of'}","right":"$$nat_subnet{'subnet_of'} eq $bignet"}],[8536,{"left":"$$bignet{'is_aggregate'} or $$subnet{'is_aggregate'} or $$bignet{'has_subnets'}","right":"$$nat_subnet{'subnet_of'} and $$nat_subnet{'subnet_of'} eq $bignet","type":"or_3","op":"or"}],[8536,{"right":"$$nat_subnet{'is_layer3'}","left":"$$bignet{'is_aggregate'} or $$subnet{'is_aggregate'} or $$bignet{'has_subnets'} or $$nat_subnet{'subnet_of'} and $$nat_subnet{'subnet_of'} eq $bignet","op":"or","type":"or_3"}],[8548,{"left":"$$nat_subnet{'subnet_of'}","right":"$bignet","op":"||=","type":"or_3"}],[8733,{"op":"and","type":"and_3","left":"$weakest == $crosslink_strength{'local'}","right":"$strength2intf{$crosslink_strength{'secondary'}}"}],[8745,{"type":"or_3","op":"or","right":"$out_acl_count == @{$$network{'interfaces'};}","left":"not $out_acl_count"}],[8820,{"left":"$k0","right":"join(',', map({join '/', @$_;} @{$$router0{'filter_only'};}))","op":"||=","type":"or_3"}],[8836,{"type":"or_3","op":"||=","right":"$$in_intf{'no_nat_set'}","left":"$no_nat_set"}],[8837,{"right":"$no_nat_set","left":"$$info{'no_nat_set'}","op":"||=","type":"or_3"}],[8853,{"right":"match_ip($ip, $i, $m)","left":"$mask >= $m","op":"and","type":"and_3"}],[8922,{"type":"and_3","op":"and","right":"match_ip($ip, $i, $m)","left":"$mask > $m"}],[9045,{"right":"[]","left":"$$aggregate{'networks'}","type":"or_2","op":"||="}],[9128,{"left":"$owner","right":"$$zone{'owner'}","op":"||=","type":"or_3"}],[9179,{"left":"$$aggregate{'private'}","right":"'public'","type":"or_2","op":"||"}],[9181,{"op":"||=","type":"or_2","left":"$private2","right":"'public'"}],[9366,{"left":"$$network{'private'}","right":"'public'","op":"||","type":"or_2"}],[9390,{"right":"$$router{'semi_managed'}","left":"$$router{'managed'}","op":"or","type":"or_3"}],[9425,{"op":"||","type":"or_2","right":"'public'","left":"$$zone{'private'}"}],[9444,{"right":"'public'","left":"$$next{'private'}","type":"or_2","op":"||"}],[9465,{"type":"or_3","op":"||","right":"$zone1","left":"$$zone1{'zone_cluster'}"}],[9465,{"left":"$$zone2{'zone_cluster'}","right":"$zone2","type":"or_3","op":"||"}],[9487,{"type":"or_3","op":"or","right":"$$obj{'routing_only'}","left":"$$obj{'managed'}"}],[9512,{"right":"not $is_zone","left":"$$is_inclusive{$area}","op":"xor","type":"xor_4"}],[9550,{"type":"and_3","op":"and","left":"$$attributes{'owner'}","right":"keys %$attributes == 1"}],[9561,{"op":"and","type":"and_3","right":"ref $val eq 'ARRAY'","left":"ref $r_val eq 'ARRAY'"}],[9561,{"type":"and_3","op":"and","left":"ref $r_val eq 'ARRAY' and ref $val eq 'ARRAY'","right":"aref_eq($r_val, $val)"}],[9561,{"right":"ref $r_val eq 'ARRAY' and ref $val eq 'ARRAY' and aref_eq($r_val, $val)","left":"$r_val eq $val","op":"or","type":"or_3"}],[9591,{"type":"xor_4","op":"xor","right":"defined $$nat2{$attr}","left":"defined $$nat1{$attr}"}],[9688,{"right":"not $$nat{'identity'}","left":"$$network{'ip'} eq 'bridged'","op":"and","type":"and_3"}],[9799,{"left":"$$network{'loopback'}","right":"@{$$zone{'networks'};} == 1","op":"and","type":"and_3"}],[9812,{"op":"and","type":"and_3","left":"$$zone{'private'}","right":"$$zone{'private'} eq 'public'"}],[10042,{"left":"$$small{'subset_of'}","right":"''","op":"||","type":"or_2"}],[10113,{"right":"$$router{'semi_managed'}","left":"$$router{'managed'}","op":"or","type":"or_3"}],[10162,{"type":"or_3","op":"||","right":"$$interface{'zone'}{'loop'}","left":"$$interface{'loop'} || $$interface{'router'}{'loop'}"}],[10224,{"type":"or_2","op":"||","left":"$$zone{'zone_cluster'}","right":"[$zone]"}],[10342,{"right":"$$reached{'zone'} ne 'none'","left":"$$reached{'zone'} eq $$reached{'router'}","op":"and","type":"and_3"}],[10503,{"type":"or_2","op":"||=","right":"{'exit', $obj, 'distance', $distance}","left":"$$obj{'loop'}"}],[10534,{"op":"and","type":"and_3","left":"$$obj{'loop'}","right":"$$obj{'loop'}{'exit'} ne $obj"}],[10591,{"right":"$$obj{'loop'}","left":"$$obj{'to_zone1'}","type":"or_3","op":"or"}],[10686,{"left":"$$router{'managed'}","right":"$$router{'semi_managed'}","op":"or","type":"or_3"}],[10691,{"op":"||","type":"or_3","left":"$$obj{'main_interface'}","right":"$obj"}],[10695,{"right":"$$main{'reachable_at'}","left":"$$main{'path_restrict'}","type":"or_3","op":"or"}],[10709,{"op":"or","type":"or_3","left":"$$obj{'managed'}","right":"$$obj{'semi_managed'}"}],[10777,{"left":"$reachable_at","right":"$end_intf","op":"and","type":"and_3"}],[10777,{"op":"and","type":"and_3","left":"$reachable_at and $end_intf","right":"$end_intf ne $in_intf"}],[10930,{"left":"$navi = $$from{'navi'}{$to}","right":"scalar keys %$navi","type":"and_2","op":"and"}],[11017,{"left":"$$from_store{'router'} eq $from","right":"$$from_store{'zone'} eq $from","op":"||","type":"or_3"}],[11017,{"type":"and_3","op":"and","right":"$$from_store{'router'} eq $from || $$from_store{'zone'} eq $from","left":"is_interface($from_store)"}],[11017,{"left":"$$from_in{'path_restrict'}","right":"$$from_in{'reachable_at'}","op":"||","type":"or_3"}],[11017,{"right":"$$from_in{'path_restrict'} || $$from_in{'reachable_at'}","left":"$from_in","type":"and_3","op":"and"}],[11032,{"type":"or_3","op":"||","right":"$$to_store{'zone'} eq $to","left":"$$to_store{'router'} eq $to"}],[11032,{"type":"and_3","op":"and","right":"$$to_store{'router'} eq $to || $$to_store{'zone'} eq $to","left":"is_interface($to_store)"}],[11032,{"right":"$$to_out{'reachable_at'}","left":"$$to_out{'path_restrict'}","op":"||","type":"or_3"}],[11032,{"op":"and","type":"and_3","left":"$to_out","right":"$$to_out{'path_restrict'} || $$to_out{'reachable_at'}"}],[11051,{"right":"not $$from_in{'loop'}","left":"$from_in","type":"and_3","op":"and"}],[11051,{"right":"my $restrictions = $$from_in{'path_restrict'}","left":"$from_in and not $$from_in{'loop'}","type":"and_3","op":"and"}],[11051,{"left":"$from_in and not $$from_in{'loop'} and my $restrictions = $$from_in{'path_restrict'}","right":"not $start_intf","type":"and_3","op":"and"}],[11062,{"type":"and_3","op":"and","left":"$to_out","right":"not $$to_out{'loop'}"}],[11062,{"left":"$to_out and not $$to_out{'loop'}","right":"my $restrictions = $$to_out{'path_restrict'}","op":"and","type":"and_3"}],[11062,{"left":"$to_out and not $$to_out{'loop'} and my $restrictions = $$to_out{'path_restrict'}","right":"not $end_intf","type":"and_3","op":"and"}],[11086,{"type":"and_3","op":"and","left":"$start_intf","right":"$$start_intf{'zone'} eq $end_node"}],[11092,{"type":"or_3","op":"||","right":"$from_in","left":"$start_intf"}],[11122,{"right":"$start_intf","left":"$success","type":"and_3","op":"and"}],[11157,{"right":"$router eq $to","left":"$router eq $from","type":"or_3","op":"or"}],[11239,{"right":"$get_next eq 'zone'","left":"$$interface{'loopback'}","op":"and","type":"and_3"}],[11331,{"right":"not $$intf{'loop'}","left":"$intf","op":"and","type":"and_3"}],[11331,{"type":"and_3","op":"and","right":"my $restrictions = $$intf{'path_restrict'}","left":"$intf and not $$intf{'loop'}"}],[11394,{"op":"and","type":"and_3","right":"$to_loop","left":"$from_loop"}],[11394,{"right":"$$from_loop{'cluster_exit'} eq $$to_loop{'cluster_exit'}","left":"$from_loop and $to_loop","op":"and","type":"and_3"}],[11500,{"left":"is_interface($loop_entry)","right":"$$loop_entry{'router'} eq $$loop_entry{'loop_enter'}{$loop_exit}[0]{'router'}","type":"and_3","op":"and"}],[11500,{"left":"is_router($loop_entry)","right":"is_interface($loop_entry) and $$loop_entry{'router'} eq $$loop_entry{'loop_enter'}{$loop_exit}[0]{'router'}","type":"or_3","op":"or"}],[11500,{"op":"xor","type":"xor_4","right":"$call_at_zone","left":"is_router($loop_entry) or is_interface($loop_entry) and $$loop_entry{'router'} eq $$loop_entry{'loop_enter'}{$loop_exit}[0]{'router'}"}],[11529,{"left":"$at_router","right":"$call_at_zone","type":"xor_4","op":"xor"}],[11534,{"right":"is_interface($loop_exit) && $$loop_exit{'router'} eq $$loop_entry{'loop_leave'}{$loop_exit}[0]{'router'}","left":"is_router($loop_exit)","op":"||","type":"or_3"}],[11538,{"left":"$exit_at_router","right":"$call_at_zone","type":"xor_4","op":"xor"}],[11564,{"op":"||","type":"or_3","right":"$from_store","left":"$$from_store{'router'}"}],[11565,{"right":"$to_store","left":"$$to_store{'router'}","op":"||","type":"or_3"}],[11583,{"left":"$from","right":"$to","type":"and_3","op":"and"}],[11606,{"right":"$where eq 'Zone'","left":"$where","type":"and_3","op":"&&"}],[11607,{"right":"$at_zone","left":"is_router($from)","type":"xor_4","op":"xor"}],[11613,{"right":"$$from_store{'loop_exit'}","left":"$$from{'loop'}","type":"and_3","op":"and"}],[11613,{"left":"$$from{'loop'} and $$from_store{'loop_exit'}","right":"my $loop_exit = $$from_store{'loop_exit'}{$to_store}","type":"and_3","op":"and"}],[11630,{"right":"$at_zone","left":"$exit_at_router","type":"xor_4","op":"xor"}],[11642,{"type":"and_3","op":"and","right":"$$in{'loop_entry'}","left":"$in"}],[11642,{"left":"$in and $$in{'loop_entry'}","right":"my $loop_entry = $$in{'loop_entry'}{$to_store}","op":"and","type":"and_3"}],[11661,{"op":"xor","type":"xor_4","left":"$exit_at_router","right":"$at_zone"}],[11691,{"left":"$obj2path{$src}","right":"get_path($src)","op":"||","type":"or_3"}],[11692,{"right":"get_path($dst)","left":"$obj2path{$dst}","type":"or_3","op":"||"}],[11750,{"type":"or_3","op":"||","left":"$obj2path{$src2}","right":"get_path($src2)"}],[11751,{"op":"||","type":"or_3","left":"$obj2path{$dst2}","right":"get_path($dst2)"}],[11752,{"left":"$$from_store{'router'}","right":"$from_store","type":"or_3","op":"||"}],[11753,{"right":"$to_store","left":"$$to_store{'router'}","type":"or_3","op":"||"}],[11770,{"op":"and","type":"and_3","left":"$$from_store{'loop_exit'}","right":"my $exit = $$from_store{'loop_exit'}{$to_store}"}],[11868,{"right":"$$ipsec{'esp_encryption'}","left":"$$ipsec{'esp_authentication'}","type":"or_3","op":"||"}],[11872,{"op":"or","type":"or_3","left":"not $nat_traversal","right":"$nat_traversal ne 'on'"}],[11911,{"left":"$real_hubs","right":"@$real_hubs","op":"and","type":"and_3"}],[11914,{"type":"and_3","op":"and","right":"@$real_spokes","left":"$real_spokes"}],[11935,{"left":"$$router{'model'}{'do_auth'}","right":"not $need_id","type":"and_3","op":"and"}],[12000,{"type":"or_3","op":"or","right":"$$model{'can_dyn_crypto'}","left":"$$model{'do_auth'}"}],[12009,{"type":"and_3","op":"and","left":"$s_p","right":"$s_p eq $private"}],[12009,{"right":"$h_p eq $private","left":"$h_p","op":"and","type":"and_3"}],[12009,{"op":"or","type":"or_3","right":"$h_p and $h_p eq $private","left":"$s_p and $s_p eq $private"}],[12041,{"left":"$has_id_hosts","right":"@other","op":"and","type":"and_3"}],[12048,{"type":"and_3","op":"and","left":"$$router{'managed'}","right":"$$crypto{'detailed_crypto_acl'}"}],[12162,{"op":"&&","type":"and_3","left":"$attributes","right":"$$attributes{'check-subject-name'}"}],[12218,{"left":"$managed","right":"$$router{'model'}{'crypto'} eq 'EZVPN'","op":"and","type":"and_3"}],[12291,{"type":"and_3","op":"and","left":"$has_id_hosts","right":"$has_other_network"}],[12298,{"op":"or","type":"or_3","left":"$has_id_hosts","right":"$has_other_network"}],[12354,{"right":"$$router{'model'}{'crypto'} eq 'ASA'","left":"$managed","type":"and_3","op":"and"}],[12362,{"op":"and","type":"and_3","left":"$real_spoke","right":"not $$real_spoke{'ip'} =~ /^(?:short|unnumbered)$/"}],[12525,{"left":"$stateless","right":"''","op":"||=","type":"or_2"}],[12526,{"op":"||=","type":"or_3","right":"$prt_ip","left":"$src_range"}],[12581,{"left":"$m >= $mask","right":"match_ip($i, $ip, $mask)","type":"and_3","op":"and"}],[12581,{"op":"and","type":"and_3","left":"$m < $mask","right":"match_ip($ip, $i, $m)"}],[12581,{"type":"or_3","op":"or","right":"$m < $mask and match_ip($ip, $i, $m)","left":"$m >= $mask and match_ip($i, $ip, $mask)"}],[12657,{"right":"''","left":"$stateless","op":"||=","type":"or_2"}],[12658,{"op":"||=","type":"or_3","left":"$src_range","right":"$prt_ip"}],[12687,{"op":"||=","type":"or_2","left":"$deny","right":"''"}],[12751,{"right":"$out_zone eq $dst_zone","left":"$$dst{'has_other_subnet'}","op":"and","type":"and_3"}],[12764,{"right":"$dst","left":"$$dst{'network'}","op":"||","type":"or_3"}],[12767,{"left":"$$src_filter_at{$mark}","right":"$$dst_filter_at{$mark}","type":"and_3","op":"and"}],[12796,{"right":"not $$rule{'oneway'}","left":"$$router{'model'}{'stateless'}","op":"and","type":"and_3"}],[12819,{"right":"$proto eq 'ip'","left":"$proto eq 'tcp' || $proto eq 'udp'","type":"or_3","op":"||"}],[12819,{"right":"$m1 == $m2","left":"$proto eq 'tcp' || $proto eq 'udp' || $proto eq 'ip'","op":"and","type":"and_3"}],[12852,{"left":"$$intf{'loopback'}","right":"not $$intf{'vip'}","type":"and_3","op":"and"}],[12907,{"right":"$src","left":"$$src{'network'}","type":"or_3","op":"||"}],[12911,{"type":"and_3","op":"and","right":"$$dst_filter_at{$mark}","left":"$$src_filter_at{$mark}"}],[12952,{"right":"not $$intf{'vip'}","left":"$$intf{'loopback'}","type":"and_3","op":"and"}],[13080,{"type":"or_2","op":"||=","right":"''","left":"$stateless1"}],[13082,{"op":"||=","type":"or_3","left":"$src_range1","right":"$prt_ip"}],[13105,{"op":"||","type":"or_3","left":"$obj2zone{$src1}","right":"get_zone($src1)"}],[13105,{"type":"or_3","op":"||","right":"get_zone($dst2)","left":"$obj2zone{$dst2}"}],[13113,{"op":"||","type":"or_3","right":"$prt_ip","left":"$$rule2{'src_range'}"}],[13123,{"op":"||","type":"or_3","right":"$stateless2","left":"$stateless1"}],[13295,{"op":"or","type":"or_3","right":"$$router{'managed'} =~ /^(?:secondary|local.*)$/","left":"$$router{'model'}{'stateless'}"}],[13312,{"type":"or_3","op":"or","right":"$$Netspoc::Compiler::Pass1::config{'check_transient_supernet_rules'}","left":"$$Netspoc::Compiler::Pass1::config{'check_supernet_rules'}"}],[13315,{"right":"$$_{'dst'}{'has_other_subnet'}","left":"$$_{'src'}{'has_other_subnet'}","type":"or_3","op":"or"}],[13372,{"left":"$proto eq 'tcp'","right":"$proto eq 'udp'","op":"or","type":"or_3"}],[13372,{"type":"or_3","op":"or","left":"$proto eq 'tcp' or $proto eq 'udp'","right":"$proto eq 'ip'"}],[13379,{"right":"$deny","left":"$proto eq 'tcp'","op":"and","type":"and_3"}],[13408,{"left":"not $in_intf","right":"$$model{'stateless_self'}","type":"and_3","op":"and"}],[13408,{"left":"$$model{'stateless'}","right":"not $in_intf and $$model{'stateless_self'}","type":"or_3","op":"or"}],[13425,{"op":"||","type":"or_2","right":"0","left":"$has_stateless_router"}],[13466,{"right":"$index++","left":"$src_range2index{$new_src_range}","op":"||=","type":"or_3"}],[13641,{"type":"and_3","op":"and","right":"1 == @$dst_zones","left":"1 == @$src_zones"}],[13686,{"right":"have_different_marks($src_zones, $dst_zones, 'local_secondary_mark')","left":"have_set_and_equal_marks($src_zones, $dst_zones, 'local_mark')","op":"and","type":"and_3"}],[13704,{"left":"$$zone{'zone_cluster'}","right":"[$zone]","op":"||","type":"or_2"}],[13727,{"type":"and_3","op":"and","right":"$$obj{'nat'}{$nat_tag}","left":"$$obj{'nat'}"}],[13740,{"right":"$managed eq 'full'","left":"$managed eq 'primary'","op":"or","type":"or_3"}],[13817,{"left":"$$obj{'network'}","right":"$obj","type":"or_3","op":"||"}],[13820,{"left":"$$other{'network'}","right":"$other","op":"||","type":"or_3"}],[13869,{"op":"||","type":"or_3","left":"$in_intf","right":"$out_intf"}],[13883,{"type":"or_3","op":"or","left":"not $intf","right":"zone_eq($$network{'zone'}, $$intf{'zone'})"}],[13902,{"op":"or","type":"or_3","right":"$proto eq 'ip'","left":"$proto eq 'udp'"}],[13928,{"left":"$obj2path{$obj}","right":"get_path($obj)","type":"or_3","op":"||"}],[13929,{"type":"or_3","op":"||","left":"$obj2path{$other}","right":"get_path($other)"}],[13930,{"left":"$cache{$from_store}{$to_store}","right":"$cache{$to_store}{$from_store}","type":"or_3","op":"||"}],[13943,{"left":"$is_hidden","right":"$static_seen","type":"or_3","op":"or"}],[14020,{"left":"$$chg_rule{'log'}","right":"''","type":"or_2","op":"||"}],[14033,{"op":"||","type":"or_2","left":"$$cmp_rule{'log'}","right":"''"}],[14039,{"left":"$cmp_rule ne $chg_rule","right":"$cmp_log eq $chg_log","type":"and_3","op":"and"}],[14137,{"left":"$key2index{$key}","right":"$index1++","op":"||=","type":"or_3"}],[14139,{"left":"$this2index{$this}","right":"$index2++","op":"||=","type":"or_3"}],[14212,{"right":"''","left":"$$rule{'src_range'}","type":"or_2","op":"||"}],[14213,{"left":"$$rule{'log'}","right":"''","type":"or_2","op":"||"}],[14214,{"op":"||","type":"or_2","right":"''","left":"$$rule{'oneway'}"}],[14215,{"op":"||","type":"or_2","right":"''","left":"$$rule{'stateless'}"}],[14216,{"right":"''","left":"$$rule{'stateless_icmp'}","type":"or_2","op":"||"}],[14218,{"left":"$attr2index{$attr}","right":"$index++","op":"||=","type":"or_3"}],[14240,{"op":"||","type":"or_3","right":"get_path($element0)","left":"$obj2path{$element0}"}],[14243,{"left":"$obj2path{$_}","right":"get_path($_)","type":"or_3","op":"||"}],[14250,{"type":"or_3","op":"||=","right":"$index++","left":"$path2index{$path}"}],[14357,{"type":"and_3","op":"and","left":"$$nat_net{'dynamic'}","right":"$$in_hw{'level'} < $$out_hw{'level'}"}],[14370,{"op":"or","type":"or_3","right":"$type eq 'Interface'","left":"$type eq 'Subnet'"}],[14409,{"op":"||=","type":"or_2","left":"$$info{'src_net'}","right":"{}"}],[14410,{"op":"||=","type":"or_2","right":"{}","left":"$$info{'dst_net'}"}],[14448,{"type":"or_3","op":"or","right":"$type eq 'Interface'","left":"$type eq 'Subnet'"}],[14607,{"op":"or","type":"or_3","right":"is_redundany_group(\\@hop_intf)","left":"1 == @hop_intf"}],[14662,{"left":"$$route_in_zone{'default'}","right":"$$route_in_zone{$out_net}","op":"||","type":"or_3"}],[14694,{"right":"$$route_in_zone{$network}","left":"$$route_in_zone{'default'}","type":"or_3","op":"||"}],[14728,{"op":"and","type":"and_3","left":"$in_intf","right":"$out_intf"}],[14759,{"right":"$is_intf","left":"$src_zone eq $dst_zone","op":"and","type":"and_3"}],[14765,{"op":"||","type":"or_3","left":"$$from{'main_interface'}","right":"$from"}],[14784,{"op":"&&=","type":"and_3","left":"$is_intf","right":"$is_intf eq 'src' ? 'dst' : ($is_intf eq 'dst' ? 'src' : $is_intf)"}],[14818,{"type":"or_3","op":"or","left":"$$router{'managed'}","right":"$$router{'routing_only'}"}],[14819,{"left":"$$intf{'main_interface'}","right":"$intf","op":"||","type":"or_3"}],[15090,{"left":"$$route_in_zone{'default'}","right":"$$route_in_zone{$peer_net}","op":"||","type":"or_3"}],[15123,{"type":"or_3","op":"||","right":"$$route_in_zone{$hop_net}","left":"$$route_in_zone{'default'}"}],[15135,{"op":"and","type":"and_3","right":"equal(map({$_ unless $$_{'redundancy_interfaces'};} @hops))","left":"@hops > 1"}],[15135,{"left":"@hops > 1 and equal(map({$_ unless $$_{'redundancy_interfaces'};} @hops))","right":"@hops == 1","type":"or_3","op":"or"}],[15140,{"right":"{}","left":"$$real_intf{'routes'}{$hop}","op":"||=","type":"or_2"}],[15191,{"op":"and","type":"and_3","left":"$$interface{'loop'}","right":"$$interface{'routing'}"}],[15203,{"left":"$$interface{'routing'}","right":"$$interface2{'routing'}","type":"or_3","op":"or"}],[15228,{"type":"and_3","op":"and","right":"$group2","left":"$group"}],[15228,{"op":"and","type":"and_3","left":"$group and $group2","right":"$group eq $group2"}],[15258,{"type":"and_3","op":"and","left":"@$hops == 1","right":"my $phys_hop = $$hop1{'orig_main'}"}],[15304,{"op":"||","type":"or_2","left":"$$model{'crypto'}","right":"''"}],[15321,{"left":"$$interface{'hub'}","right":"$crypto_type eq 'ASA'","op":"and","type":"and_3"}],[15336,{"left":"$ip == 0","right":"$mask == 0","op":"and","type":"and_3"}],[15358,{"left":"$$interface{'hub'}","right":"$crypto_type eq 'ASA'","op":"and","type":"and_3"}],[15416,{"op":"and","type":"and_3","right":"$max_hop","left":"$max_intf"}],[15450,{"type":"and_3","op":"and","right":"not $nxos_prefix","left":"$vrf"}],[15504,{"left":"get_nat_network($a, $out_nat)->{'ip'}","right":"0","op":"||","type":"or_2"}],[15504,{"right":"0","left":"get_nat_network($b, $out_nat)->{'ip'}","op":"||","type":"or_2"}],[15504,{"op":"or","type":"or_3","right":"$$a{'mask'} <=> $$b{'mask'}","left":"$$a{'ip'} <=> $$b{'ip'}"}],[15527,{"right":"$out_hidden","left":"$in_hidden","op":"or","type":"or_3"}],[15531,{"left":"$out_dynamic","right":"$in_dynamic","op":"and","type":"and_3"}],[15531,{"left":"$out_dynamic and $in_dynamic","right":"$out_dynamic eq $in_dynamic","op":"and","type":"and_3"}],[15593,{"right":"$nat_index","left":"$global_index","op":"and","type":"and_3"}],[15595,{"right":"$dyn_index++","left":"$global_index || $nat_index","type":"or_3","op":"||"}],[15602,{"op":"and","type":"and_3","left":"$out_ip == $out_intf_ip","right":"$out_mask == 4294967295"}],[15640,{"type":"or_3","op":"or","right":"$$in_hw{'need_identity_nat'}","left":"$$in_hw{'level'} > $$out_hw{'level'}"}],[15640,{"right":"$in_ip != $out_ip","left":"$$in_hw{'level'} > $$out_hw{'level'} or $$in_hw{'need_identity_nat'}","op":"or","type":"or_3"}],[15682,{"op":"and","type":"and_3","right":"$out","left":"$in"}],[15682,{"op":"and","type":"and_3","left":"$in and $out","right":"$in eq $out"}],[15699,{"type":"and_3","op":"and","right":"$net2 = $$network{'is_in'}{$in_nat}","left":"$$net_hash{$net}"}],[15699,{"right":"$$net_hash{$net2}","left":"$$net_hash{$net} and $net2 = $$network{'is_in'}{$in_nat}","type":"and_3","op":"and"}],[15751,{"right":"$$model{'stateless_self'}","left":"not $out_intf","op":"and","type":"and_3"}],[15751,{"left":"$$model{'stateless'}","right":"not $out_intf and $$model{'stateless_self'}","type":"or_3","op":"or"}],[15762,{"left":"$$rule{'stateless_icmp'}","right":"not $$model{'stateless_icmp'}","type":"and_3","op":"and"}],[15775,{"op":"||","type":"or_3","right":"$obj","left":"$$obj{'network'}"}],[15816,{"left":"$key eq 'rules'","right":"$$model{'has_io_acl'}","op":"and","type":"and_3"}],[16228,{"op":"||","type":"or_3","right":"$dst","left":"$$dst{'network'}"}],[16443,{"right":"$$spec{'tg_general'}","left":"$spec","type":"and_3","op":"and"}],[16450,{"right":"$trust_point","left":"delete $$attributes{'trust-point'}","type":"or_3","op":"||"}],[16533,{"right":"keys %single_cert_map","left":"keys %cert_group_map","op":"or","type":"or_3"}],[16655,{"type":"and_3","op":"and","right":"$$model{'class'} eq 'ASA'","left":"$$hardware{'name'} eq 'device'"}],[16659,{"type":"or_2","op":"||=","left":"$$hardware{'rules'}","right":"[]"}],[16665,{"type":"and_3","op":"and","right":"not $$hardware{'need_out_acl'}","left":"$suffix eq 'out'"}],[16670,{"op":"||","type":"or_2","right":"[]","left":"$$hardware{$_}"}],[16727,{"type":"and_3","op":"and","right":"equal(@redundant)","left":"@redundant == @interfaces"}],[16749,{"left":"$filter eq 'IOS'","right":"$filter eq 'NX-OS'","type":"or_3","op":"or"}],[16965,{"right":"$crypto_type eq 'IOS'","left":"$lifetime == 3600","op":"and","type":"and_3"}],[17143,{"left":"$$model{'crypto'}","right":"''","op":"||","type":"or_2"}],[17235,{"right":"$$isakmp{'ike_version'} == 2","left":"$crypto_type eq 'ASA'","op":"and","type":"and_3"}],[17337,{"left":"$name eq 'VIP'","right":"$$model{'has_vip'}","op":"and","type":"and_3"}],[17379,{"right":"$stateful","left":"$class eq 'IOS'","type":"and_3","op":"and"}],[17379,{"type":"and_3","op":"and","left":"$class eq 'IOS' and $stateful","right":"not $$hardware{'loopback'}"}],[17401,{"type":"or_3","op":"||=","right":"full_prefix_code(address($obj, $no_nat_set))","left":"$obj2nat2address{$obj}{$no_nat_set}"}],[17414,{"op":"or","type":"or_3","right":"$proto eq 'udp'","left":"$proto eq 'tcp'"}],[17435,{"type":"or_2","op":"||","right":"''","left":"$$router{'managed'}"}],[17445,{"op":"or","type":"or_3","left":"$$router{'need_protect'}","right":"$$router{'crosslink_interfaces'}"}],[17483,{"type":"and_3","op":"and","left":"$need_protect","right":"delete $$acl{'protect_self'}"}],[17503,{"right":"my $log = $$rule{'log'}","left":"$active_log","type":"and_3","op":"and"}],[17525,{"right":"$deny","left":"$$router{'log_deny'}","type":"and_3","op":"and"}],[17532,{"type":"and_3","op":"and","left":"$secondary_filter","right":"$$rule{'some_non_secondary'}"}],[17532,{"left":"$standard_filter","right":"$$rule{'some_primary'}","op":"and","type":"and_3"}],[17532,{"op":"or","type":"or_3","right":"$standard_filter and $$rule{'some_primary'}","left":"$secondary_filter and $$rule{'some_non_secondary'}"}],[17563,{"right":"$type eq 'Interface'","left":"$type eq 'Subnet'","type":"or_3","op":"or"}],[17796,{"type":"and_3","op":"and","right":"-d $in_path","left":"defined $in_path"}],[17968,{"left":"$$Netspoc::Compiler::Pass1::config{'start_time'}","right":"time","op":"||","type":"or_3"}]],"file":"lib/Netspoc/Compiler/Pass1.pm","branch":[[146,{"text":"if (defined $set) { }"}],[158,{"text":"if (defined $set) { }"}],[307,{"text":"unless @_"}],[334,{"text":"if $max < $el"}],[344,{"text":"if ($$aref[$i] eq $elt)"}],[357,{"text":"unless @$a1 == @$a2"}],[359,{"text":"if $$a1[$i] ne $$a2[$i]"}],[366,{"text":"unless keys %$href1 == keys %$href2"}],[368,{"text":"unless exists $$href2{$key}"}],[397,{"text":"if (pos $input == length $input) { }"}],[417,{"text":"if ($error_counter == $$Netspoc::Compiler::Pass1::config{'max_errors'}) { }"}],[417,{"text":"elsif ($abort_immediately) { }"}],[426,{"text":"if $error_counter"}],[459,{"text":"if ($error_counter)"}],[465,{"text":"if @args"}],[508,{"text":"if ($input =~ /\\G(\\d+)/cg) { }"}],[518,{"text":"unless defined $result"}],[526,{"text":"if ($1 > 255 or $2 > 255 or $3 > 255 or $4 > 255)"}],[525,{"text":"if ($input =~ /\\G(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)/cg) { }"}],[538,{"text":"unless defined $result"}],[548,{"text":"unless defined $mask"}],[549,{"text":"unless match_ip($ip, $ip, $mask)"}],[575,{"text":"if ($input =~ /(\\G[\\w-]+)/cg) { }"}],[586,{"text":"if ($input =~ / ( \\G [\\w-]* [*] ) /cgx) { }"}],[597,{"text":"if ($input =~ /(\\G[^;,\\s\"\"'']+)/cg) { }"}],[608,{"text":"if ($input =~ /\\G([^;,\"\"''\\n]+)/cg) { }"}],[628,{"text":"if check($delimiter)"}],[632,{"text":"if check($delimiter)"}],[634,{"text":"unless $comma_seen"}],[641,{"text":"if $user_ref_error"}],[651,{"text":"unless $input =~ / \\G (\\w+) : /cgx"}],[654,{"text":"if ($input =~ m[ \\G ( [\\w-]+ (?: ( [\\@/] ) [\\w-]+ )? ) ]cgx) { }"}],[664,{"text":"unless $separator eq '@'"}],[667,{"text":"unless $separator eq '/'"}],[663,{"text":"if ($type eq 'router') { }"}],[663,{"text":"elsif ($type eq 'network' or $type eq 'interface') { }"}],[662,{"text":"if ($separator)"}],[709,{"text":"unless $$user_object{'active'}"}],[706,{"text":"if (check('user'))"}],[714,{"text":"unless $input =~ /\\G([\\w-]+):/cg"}],[720,{"text":"if ($interface || $type eq 'host' and check('managed')) { }"}],[720,{"text":"elsif ($type eq 'any' and check('ip')) { }"}],[732,{"text":"unless $input =~ / \\G ( $hostname_regex ) /cgox"}],[737,{"text":"unless $input =~ / \\G ( $network_regex ) /cgox"}],[719,{"text":"if ($input =~ / \\G \\[ /cgox) { }"}],[719,{"text":"elsif ($type eq 'host') { }"}],[719,{"text":"elsif ($type eq 'network') { }"}],[719,{"text":"elsif ($interface and $input =~ / \\G ( [\\w-]+ (?: \\@ [\\w-]+ ) ) /cgx or $input =~ / \\G ( [\\w-]+ ) /cgx) { }"}],[750,{"text":"unless $input =~ / \\G \\. /cgox"}],[753,{"text":"unless $selector =~ /^(auto|all)$/"}],[759,{"text":"if $ext"}],[760,{"text":"unless $input =~ / \\G ( $network_regex ) /cgox"}],[765,{"text":"if ($input =~ / \\G \\. /cgox)"}],[751,{"text":"if ($input =~ / \\G \\[ /cgox) { }"}],[749,{"text":"if ($interface)"}],[770,{"text":"$ext ? :"}],[776,{"text":"if ($input =~ /\\G($user_id_regex)/cog) { }"}],[788,{"text":"if ($input =~ /\\G($hostname_regex)/cog) { }"}],[787,{"text":"if ($input =~ /\\G host:/cgx) { }"}],[802,{"text":"if (check('!')) { }"}],[815,{"text":"if (@result == 1) { }"}],[835,{"text":"unless my $factor = $timeunits{$unit}"}],[841,{"text":"unless check('description')"}],[848,{"text":"if (store_description())"}],[857,{"text":"if ($input =~ /\\G(permit|deny)/cg) { }"}],[867,{"text":"if ($input =~ /\\G nat:([\\w-]+)/cgx) { }"}],[884,{"text":"if (check($token)) { }"}],[897,{"text":"if (wantarray) { }"}],[895,{"text":"if (check($token))"}],[916,{"text":"if check(';')"}],[920,{"text":"if check(';')"}],[922,{"text":"unless $comma_seen"}],[929,{"text":"if check(';')"}],[942,{"text":"if (check($token))"}],[951,{"text":"if (check($token))"}],[978,{"text":"if defined $$obj{$key}"}],[987,{"text":"unless check('radius_attributes')"}],[991,{"text":"if check('\\\\}')"}],[993,{"text":"check('=') ? :"}],[1001,{"text":"unless my $protocol = check_assign('routing', \\&read_identifier)"}],[1002,{"text":"unless my $routing = $routing_info{$protocol}"}],[1008,{"text":"unless check('managed')"}],[1015,{"text":"if ($value =~ /^(?:secondary|standard|full|primary|\n\f                           local|local_secondary|routing_only)$/x) { }"}],[1010,{"text":"if (check(';')) { }"}],[1010,{"text":"elsif (check('=')) { }"}],[1038,{"text":"unless my($model, @attributes) = check_assign_list('model', \\&read_name)"}],[1041,{"text":"unless ($info)"}],[1051,{"text":"unless $ext"}],[1052,{"text":"$ext ? :"}],[1054,{"text":"if (@ext_list)"}],[1073,{"text":"if (not $model) { }"}],[1073,{"text":"elsif (not $$model{'can_managed_host'}) { }"}],[1082,{"text":"unless ($hw_name)"}],[1088,{"text":"$$host{'server_name'} ? :"}],[1112,{"text":"if $private"}],[1113,{"text":"if (my($id) = $name =~ /^host:id:(.*)$/)"}],[1124,{"text":"if check('\\\\}')"}],[1129,{"text":"unless $ip1 <= $ip2"}],[1136,{"text":"unless $managed eq 'standard'"}],[1141,{"text":"if $$host{'model'}"}],[1166,{"text":"if $$host{'nat'}{$name}"}],[1158,{"text":"if ($type eq 'nat') { }"}],[1125,{"text":"if (my $ip = check_assign('ip', \\&read_ip)) { }"}],[1125,{"text":"elsif (my($ip1, $ip2) = check_assign_pair('range', '-', \\&read_ip)) { }"}],[1125,{"text":"elsif (my $managed = check_managed()) { }"}],[1125,{"text":"elsif (my $model = check_model()) { }"}],[1125,{"text":"elsif (my $hardware = check_assign('hardware', \\&read_name)) { }"}],[1125,{"text":"elsif (my $server_name = check_assign('server_name', \\&read_name)) { }"}],[1125,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[1125,{"text":"elsif (my $radius_attributes = check_radius_attributes()) { }"}],[1125,{"text":"elsif (my $pair = check_typed_name()) { }"}],[1178,{"text":"unless $$host{'ip'} xor $$host{'range'}"}],[1194,{"text":"if $ok{$key}"}],[1181,{"text":"if ($$host{'managed'})"}],[1205,{"text":"if $$host{'radius_attributes'}"}],[1201,{"text":"if ($$host{'id'}) { }"}],[1209,{"text":"if ($$host{'range'})"}],[1208,{"text":"if ($$host{'nat'})"}],[1229,{"text":"if check('\\\\}')"}],[1230,{"text":"if (my($ip, $mask) = check_assign('ip', \\&read_ip_prefix)) { }"}],[1230,{"text":"elsif (check_flag('hidden')) { }"}],[1230,{"text":"elsif (check_flag('identity')) { }"}],[1230,{"text":"elsif (check_flag('dynamic')) { }"}],[1230,{"text":"elsif (my $pair = check_assign('subnet_of', \\&read_typed_name)) { }"}],[1255,{"text":"if grep {$key eq $_;} 'name', 'hidden'"}],[1264,{"text":"if grep {$key eq $_;} 'name', 'identity'"}],[1270,{"text":"unless defined $$nat{'ip'}"}],[1253,{"text":"if ($$nat{'hidden'}) { }"}],[1253,{"text":"elsif ($$nat{'identity'}) { }"}],[1284,{"text":"if $private"}],[1285,{"text":"if ($net_name =~ m[^(.*)/])"}],[1292,{"text":"if check('\\\\}')"}],[1298,{"text":"if defined $$network{'ip'}"}],[1323,{"text":"if (is_host($host)) { }"}],[1323,{"text":"elsif (is_interface($host)) { }"}],[1342,{"text":"if ($other_net ne $network)"}],[1339,{"text":"if (my $other = $hosts{$host_name})"}],[1351,{"text":"if $$network{'nat'} and $$network{'nat'}{$nat_tag}"}],[1293,{"text":"if (my($ip, $mask) = check_assign('ip', \\&read_ip_prefix)) { }"}],[1293,{"text":"elsif (check_flag('unnumbered')) { }"}],[1293,{"text":"elsif (check_flag('has_subnets')) { }"}],[1293,{"text":"elsif (check_flag('crosslink')) { }"}],[1293,{"text":"elsif (my $pair = check_assign('subnet_of', \\&read_typed_name)) { }"}],[1293,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[1293,{"text":"elsif (my $radius_attributes = check_radius_attributes()) { }"}],[1293,{"text":"elsif (my $host_name = check_hostname()) { }"}],[1293,{"text":"elsif (my $nat_tag = check_nat_name()) { }"}],[1366,{"text":"unless defined $ip"}],[1373,{"text":"if $ok{$key}"}],[1374,{"text":"$key eq 'nat' ? :"}],[1374,{"text":"$key eq 'hosts' ? :"}],[1396,{"text":"if $ok{$key}"}],[1397,{"text":"$key eq 'hosts' ? :"}],[1406,{"text":"if $$hash{$nat_tag}{'identity'}"}],[1404,{"text":"if (my $hash = $$network{'nat'})"}],[1420,{"text":"unless (match_ip($host_ip, $ip, $mask))"}],[1427,{"text":"unless (match_ip($ip1, $ip, $mask) and match_ip($ip2, $ip, $mask))"}],[1419,{"text":"if (my $host_ip = $$host{'ip'}) { }"}],[1419,{"text":"elsif ($$host{'range'}) { }"}],[1443,{"text":"if (@{$$network{'hosts'};} and $$network{'crosslink'})"}],[1450,{"text":"if $$nat{'dynamic'}"}],[1451,{"text":"unless $$nat{'mask'} == $mask"}],[1446,{"text":"if ($$network{'nat'})"}],[1463,{"text":"unless @{$$network{'hosts'};} == $id_hosts_count"}],[1471,{"text":"if $$network{'radius_attributes'}"}],[1460,{"text":"if (my $id_hosts_count = grep({$$_{'id'};} @{$$network{'hosts'};})) { }"}],[1368,{"text":"if ($ip eq 'unnumbered') { }"}],[1368,{"text":"elsif ($$network{'bridged'}) { }"}],[1499,{"text":"unless (check('='))"}],[1510,{"text":"if check('\\\\}')"}],[1549,{"text":"unless $type eq 'crypto'"}],[1555,{"text":"unless $type eq 'crypto'"}],[1562,{"text":"if $level > 100"}],[1577,{"text":"if $$interface{'nat'}{$name2}"}],[1588,{"text":"if check('\\\\}')"}],[1589,{"text":"if (my $ip = check_assign('ip', \\&read_ip)) { }"}],[1596,{"text":"if ($$secondary{'ip'}) { }"}],[1569,{"text":"if ($type eq 'nat') { }"}],[1569,{"text":"elsif ($type eq 'secondary') { }"}],[1608,{"text":"if $virtual"}],[1619,{"text":"if check('\\\\}')"}],[1624,{"text":"unless $xxrp_info{$type}"}],[1629,{"text":"unless $id =~ /^\\d+$/"}],[1631,{"text":"unless $id < 256"}],[1620,{"text":"if (my $ip = check_assign('ip', \\&read_ip)) { }"}],[1620,{"text":"elsif (my $type = check_assign('type', \\&read_identifier)) { }"}],[1620,{"text":"elsif (my $id = check_assign('id', \\&read_identifier)) { }"}],[1638,{"text":"unless $$virtual{'ip'}"}],[1639,{"text":"if $$virtual{'redundancy_id'} and not $$virtual{'redundancy_type'}"}],[1644,{"text":"if $$interface{'bind_nat'}"}],[1657,{"text":"unless $$_[0] ne 'network'"}],[1657,{"text":"if (grep {ref $$_[1] unless $$_[0] ne 'network';} @pairs)"}],[1511,{"text":"if (my(@ip) = check_assign_list('ip', \\&read_ip)) { }"}],[1511,{"text":"elsif (check_flag('unnumbered')) { }"}],[1511,{"text":"elsif (check_flag('negotiated')) { }"}],[1511,{"text":"elsif (check_flag('loopback')) { }"}],[1511,{"text":"elsif (check_flag('vip')) { }"}],[1511,{"text":"elsif (check_flag('no_in_acl')) { }"}],[1511,{"text":"elsif (check_flag('dhcp_server')) { }"}],[1511,{"text":"elsif (my $pair = check_assign('subnet_of', \\&read_typed_name)) { }"}],[1511,{"text":"elsif (my(@pairs) = check_assign_list('hub', \\&read_typed_name)) { }"}],[1511,{"text":"elsif ($pair = check_assign('spoke', \\&read_typed_name)) { }"}],[1511,{"text":"elsif (my $id = check_assign('id', \\&read_user_id)) { }"}],[1511,{"text":"elsif (defined(my $level = check_assign('security_level', \\&read_int))) { }"}],[1511,{"text":"elsif ($pair = check_typed_name()) { }"}],[1511,{"text":"elsif (check('virtual')) { }"}],[1511,{"text":"elsif (my(@tags) = check_assign_list('bind_nat', \\&read_identifier)) { }"}],[1511,{"text":"elsif (my $hardware = check_assign('hardware', \\&read_name)) { }"}],[1511,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[1511,{"text":"elsif (my $routing = check_routing()) { }"}],[1511,{"text":"elsif (@pairs = check_assign_list('reroute_permit', \\&read_typed_name)) { }"}],[1511,{"text":"elsif (check_flag('disabled')) { }"}],[1511,{"text":"elsif (check_flag('no_check')) { }"}],[1677,{"text":"if ($name =~ m[/])"}],[1686,{"text":"if ($ip =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[1685,{"text":"if (my $ip = $$interface{'ip'})"}],[1684,{"text":"if ($virtual) { }"}],[1707,{"text":"if ($$interface{'ip'} =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[1706,{"text":"if ($$interface{'nat'})"}],[1713,{"text":"if $$interface{'hardware'}"}],[1711,{"text":"if ($$interface{'vip'})"}],[1718,{"text":"if ($$interface{'owner'} and not $$interface{'vip'})"}],[1732,{"text":"$$interface{'vip'} ? :"}],[1730,{"text":"if (keys %copy)"}],[1736,{"text":"$$interface{'vip'} ? :"}],[1735,{"text":"if ($$interface{'ip'} =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[1722,{"text":"if ($$interface{'loopback'}) { }"}],[1722,{"text":"elsif ($$interface{'subnet_of'}) { }"}],[1747,{"text":"if (my(@extra) = grep({not $ok{$_};} keys %$interface))"}],[1745,{"text":"if ($$interface{'ip'} eq 'bridged')"}],[1754,{"text":"if @secondary_interfaces"}],[1758,{"text":"if $$interface{'hub'}"}],[1765,{"text":"if $$interface{'id'}"}],[1752,{"text":"if (my $crypto = $$interface{'spoke'}) { }"}],[1770,{"text":"if ($$interface{'ip'} =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[1769,{"text":"if (my $crypto_list = $$interface{'hub'})"}],[1778,{"text":"if ($$interface{'ip'} =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[1777,{"text":"if (@secondary_interfaces)"}],[1787,{"text":"if $$interface{$key}"}],[1806,{"text":"if (@levels >= 2 and not equal(@levels)) { }"}],[1801,{"text":"if (my(@levels) = grep({defined $_;} map({$$_{'security_level'};} @{$$hardware{'interfaces'};}))) { }"}],[1801,{"text":"elsif ($hwname =~ /inside/) { }"}],[1801,{"text":"elsif ($hwname =~ /outside/) { }"}],[1801,{"text":"elsif (($level) = $hwname =~ /(\\d+)$/ and $level <= 100) { }"}],[1846,{"text":"unless delete $$interface{'no_in_acl'}"}],[1850,{"text":"if $$hardware{'no_in_acl'}"}],[1854,{"text":"unless 1 == grep({not $$_{'main_interface'};} @{$$hardware{'interfaces'};})"}],[1865,{"text":"unless $no_in_acl_counter"}],[1868,{"text":"unless 1 == $no_in_acl_counter"}],[1873,{"text":"unless $$router{'model'}{'has_out_acl'}"}],[1877,{"text":"unless $$_{'hub'}"}],[1877,{"text":"if (grep {$$_{'spoke'} unless $$_{'hub'};} @{$$router{'interfaces'};})"}],[1886,{"text":"unless $$hardware{'no_in_acl'}"}],[1908,{"text":"unless $vrf"}],[1905,{"text":"if (defined $vrf)"}],[1915,{"text":"if check('\\\\}')"}],[1917,{"text":"if $$router{'managed'}"}],[1967,{"text":"if defined $$router{'log'}{$name2}"}],[1969,{"text":"check('=') ? :"}],[1966,{"text":"if ($type eq 'log') { }"}],[1966,{"text":"elsif ($type ne 'interface') { }"}],[1983,{"text":"if ($interfaces{$iname})"}],[1997,{"text":"if $private"}],[1916,{"text":"if (my $managed = check_managed()) { }"}],[1916,{"text":"elsif (my(@filter_only) = check_assign_list('filter_only', \\&read_ip_prefix_pair)) { }"}],[1916,{"text":"elsif (my $model = check_model()) { }"}],[1916,{"text":"elsif (check_flag('no_group_code')) { }"}],[1916,{"text":"elsif (check_flag('no_crypto_filter')) { }"}],[1916,{"text":"elsif (check_flag('no_protect_self')) { }"}],[1916,{"text":"elsif (check_flag('log_deny')) { }"}],[1916,{"text":"elsif (my $routing = check_routing()) { }"}],[1916,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[1916,{"text":"elsif (my $radius_attributes = check_radius_attributes()) { }"}],[1916,{"text":"elsif (my $pair = check_assign('policy_distribution_point', \\&read_typed_name)) { }"}],[1916,{"text":"elsif (my(@list) = check_assign_list('general_permit', \\&read_typed_name_or_simple_protocol)) { }"}],[2009,{"text":"if ($$interface{'vip'} and not $model && $$model{'has_vip'})"}],[2017,{"text":"if ($error)"}],[2033,{"text":"unless ($model)"}],[2041,{"text":"if ($managed eq 'routing_only')"}],[2047,{"text":"if $$router{'vrf'} and not $$model{'can_vrf'}"}],[2058,{"text":"if ($$interface{'ip'} eq 'short')"}],[2069,{"text":"if ($$interface{'ip'} ne 'short')"}],[2066,{"text":"unless ($hw_name)"}],[2083,{"text":"unless aref_eq($$interface{'bind_nat'} || $bind_nat0, $$hardware{'bind_nat'} || $bind_nat0)"}],[2094,{"text":"if (my $nat = $$interface{'bind_nat'})"}],[2099,{"text":"if $hw_name eq 'VIP' and $$model{'has_vip'} and not $$interface{'vip'}"}],[2078,{"text":"if ($hardware = $hardware{$hw_name}) { }"}],[2109,{"text":"unless ($$interface{'loopback'})"}],[2122,{"text":"if $$routing{'name'} eq 'manual'"}],[2121,{"text":"if (my $routing = $$interface{'routing'})"}],[2130,{"text":"if ($all_routing)"}],[2137,{"text":"unless $rname =~ /^(?:manual|dynamic)$/"}],[2133,{"text":"if (my $routing = $$interface{'routing'} and $$interface{'ip'} eq 'unnumbered')"}],[2030,{"text":"if (my $managed = $$router{'managed'})"}],[2147,{"text":"unless $$router{'filter_only'}"}],[2149,{"text":"if $$model{'has_io_acl'}"}],[2146,{"text":"if ($managed =~ /^local/)"}],[2153,{"text":"if $$router{'log_deny'} and not $$model{'can_log_deny'}"}],[2163,{"text":"unless my $modifier = $$hash{$name2}"}],[2165,{"text":"if $$log_modifiers{$modifier}"}],[2170,{"text":"if ($valid) { }"}],[2159,{"text":"if (my $log_modifiers = $$model{'log_modifiers'}) { }"}],[2158,{"text":"if (my $hash = $$router{'log'})"}],[2185,{"text":"if $$router{'no_protect_self'} and not $$model{'need_protect'}"}],[2189,{"text":"if ($$model{'need_protect'})"}],[2195,{"text":"if (defined $$interface{'security_level'} and not $$model{'has_interface_level'})"}],[2202,{"text":"unless $$model{'crypto'}"}],[2201,{"text":"if ($$interface{'hub'} or $$interface{'spoke'})"}],[2206,{"text":"if ($$interface{'no_check'} and not $$interface{'hub'} && $$model{'do_auth'})"}],[2218,{"text":"unless $$interface{'ip'} eq 'bridged'"}],[2235,{"text":"unless $$layer3_intf{'hardware'}{'name'} eq 'device'"}],[2234,{"text":"if ($$model{'class'} eq 'ASA')"}],[2240,{"text":"if (my($no_ip) = $$layer3_intf{'ip'} =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[2221,{"text":"if (exists $layer3_seen{$layer3_name}) { }"}],[2221,{"text":"elsif ($layer3_intf = $interfaces{$layer3_name}) { }"}],[2268,{"text":"unless my $main = $$interface{'main_interface'}"}],[2269,{"text":"if ($$main{'is_layer3'})"}],[2278,{"text":"if $changed"}],[2265,{"text":"if (keys %layer3_seen)"}],[2281,{"text":"if ($$model{'has_interface_level'})"}],[2288,{"text":"if grep {$$_{'bind_nat'};} @{$$router{'interfaces'};}"}],[2287,{"text":"if ($managed =~ /^local/)"}],[2294,{"text":"unless grep {$$_{'hub'};} @{$$router{'interfaces'};}"}],[2300,{"text":"if grep {$$_{'bind_nat'};} @{$$router{'interfaces'};}"}],[2307,{"text":"if $$router{'radius_attributes'}"}],[2292,{"text":"if ($$model{'do_auth'}) { }"}],[2310,{"text":"if ($$model{'no_crypto_filter'})"}],[2318,{"text":"if (delete $$router{'owner'})"}],[2322,{"text":"if ($$interface{'hub'})"}],[2326,{"text":"if (delete $$interface{'reroute_permit'})"}],[2332,{"text":"if ($$interface{'ip'} eq 'bridged')"}],[2338,{"text":"if ($bridged)"}],[2145,{"text":"if (my $managed = $$router{'managed'}) { }"}],[2356,{"text":"if ($$interface{'redundant'}) { }"}],[2384,{"text":"if (my $private = $$interface{'private'})"}],[2372,{"text":"unless ($networks{$net_name})"}],[2405,{"text":"if ($$interface{$key})"}],[2409,{"text":"if ($interfaces{$iname})"}],[2421,{"text":"if (my $private = $$interface{'private'})"}],[2349,{"text":"if ($$interface{'loopback'}) { }"}],[2349,{"text":"elsif (my $crypto = $$interface{'spoke'}) { }"}],[2430,{"text":"if ($$interface{'spoke'} || $$interface{'hub'} and not $$interface{'no_check'})"}],[2437,{"text":"if @move_locked"}],[2481,{"text":"unless 1 == @{$$hardware{'interfaces'};}"}],[2484,{"text":"if (my $hash = $$orig_router{'radius_attributes'})"}],[2473,{"text":"if ($$orig_router{'managed'})"}],[2499,{"text":"if $private"}],[2504,{"text":"if check('\\\\}')"}],[2520,{"text":"unless $$nat{'dynamic'}"}],[2521,{"text":"if $$aggregate{'nat'}{$nat_name}"}],[2505,{"text":"if (my($ip, $mask) = check_assign('ip', \\&read_ip_prefix)) { }"}],[2505,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[2505,{"text":"elsif (my $link = check_assign('link', \\&read_typed_name)) { }"}],[2505,{"text":"elsif (check_flag('has_unenforceable')) { }"}],[2505,{"text":"elsif (my $nat_name = check_nat_name()) { }"}],[2529,{"text":"unless $$aggregate{'link'}"}],[2535,{"text":"if grep {$key eq $_;} 'name', 'ip', 'mask', 'link', 'is_aggregate', 'private', 'nat'"}],[2532,{"text":"if ($ip) { }"}],[2551,{"text":"unless check('router_attributes')"}],[2555,{"text":"if check('\\\\}')"}],[2556,{"text":"if (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[2556,{"text":"elsif (my $pair = check_assign('policy_distribution_point', \\&read_typed_name)) { }"}],[2556,{"text":"elsif (my(@list) = check_assign_list('general_permit', \\&read_typed_name_or_simple_protocol)) { }"}],[2588,{"text":"if check('\\\\}')"}],[2590,{"text":"unless $$_[0] ne 'interface'"}],[2590,{"text":"if (grep {ref $$_[1] unless $$_[0] ne 'interface';} @elements)"}],[2599,{"text":"unless $$_[0] ne 'interface'"}],[2599,{"text":"if (grep {ref $$_[1] unless $$_[0] ne 'interface';} @elements)"}],[2609,{"text":"if ($$pair[0] ne 'network' or ref $$pair[1])"}],[2623,{"text":"unless $$nat{'dynamic'}"}],[2624,{"text":"if $$area{'nat'}{$nat_name}"}],[2589,{"text":"if (my(@elements) = check_assign_list('border', \\&read_intersection)) { }"}],[2589,{"text":"elsif (@elements = check_assign_list('inclusive_border', \\&read_intersection)) { }"}],[2589,{"text":"elsif (check_flag('auto_border')) { }"}],[2589,{"text":"elsif (my $pair = check_assign('anchor', \\&read_typed_name)) { }"}],[2589,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[2589,{"text":"elsif (my $router_attributes = check_router_attributes($name)) { }"}],[2589,{"text":"elsif (my $nat_name = check_nat_name()) { }"}],[2632,{"text":"if $$area{'border'} || $$area{'inclusive_border'} and $$area{'anchor'}"}],[2637,{"text":"unless $$area{'anchor'} or $$area{'border'} or $$area{'inclusive_border'}"}],[2649,{"text":"if $private"}],[2667,{"text":"if $port1 > 65535"}],[2668,{"text":"if $port1 == 0"}],[2671,{"text":"if $port2 > 65535"}],[2672,{"text":"if $port2 == 0"}],[2673,{"text":"if $port1 > $port2"}],[2675,{"text":"if ($port1 == 1 and $port2 == 65535) { }"}],[2670,{"text":"if (defined(my $port2 = check_int())) { }"}],[2669,{"text":"if (check('-')) { }"}],[2666,{"text":"if (defined(my $port1 = check_int())) { }"}],[2699,{"text":"if ($range ne $aref_tcp_any)"}],[2698,{"text":"if (check(':')) { }"}],[2713,{"text":"if $type > 255"}],[2716,{"text":"if $code > 255"}],[2715,{"text":"if (defined(my $code = check_int())) { }"}],[2726,{"text":"if ($type == 0 or $type == 3 or $type == 11)"}],[2714,{"text":"if (check('/')) { }"}],[2712,{"text":"if (defined(my $type = check_int())) { }"}],[2741,{"text":"if $nr > 255"}],[2742,{"text":"if $nr == 0"}],[2743,{"text":"if ($nr == 1) { }"}],[2743,{"text":"elsif ($nr == 4) { }"}],[2743,{"text":"elsif ($nr == 17) { }"}],[2740,{"text":"if (defined(my $nr = check_int())) { }"}],[2776,{"text":"if ($v1 == $v2) { }"}],[2776,{"text":"elsif ($v1 == 1 and $v2 == 65535) { }"}],[2790,{"text":"if $src_port"}],[2791,{"text":"if $dst_port"}],[2792,{"text":"if $port"}],[2796,{"text":"if (defined(my $code = $$protocol{'code'})) { }"}],[2795,{"text":"if (defined(my $type = $$protocol{'type'}))"}],[2771,{"text":"if ($proto eq 'ip') { }"}],[2771,{"text":"elsif ($proto eq 'tcp' or $proto eq 'udp') { }"}],[2771,{"text":"elsif ($proto eq 'icmp') { }"}],[2815,{"text":"if (my $cached = $protocols{$name}) { }"}],[2830,{"text":"if ($proto eq 'ip') { }"}],[2830,{"text":"elsif ($proto eq 'tcp') { }"}],[2830,{"text":"elsif ($proto eq 'udp') { }"}],[2830,{"text":"elsif ($proto eq 'icmp') { }"}],[2830,{"text":"elsif ($proto eq 'proto') { }"}],[2854,{"text":"if ($name) { }"}],[2867,{"text":"if ($flag =~ /^(src|dst)_(net|any)$/) { }"}],[2867,{"text":"elsif ($flag =~ /^(?:stateless|reversed|oneway|overlaps|no_check_supernet_rules)/) { }"}],[2910,{"text":"if $private"}],[2915,{"text":"if check('user')"}],[2916,{"text":"if (my $sub_owner = check_assign('sub_owner', \\&read_identifier)) { }"}],[2916,{"text":"elsif (my(@other) = check_assign_list('overlaps', \\&read_typed_name)) { }"}],[2916,{"text":"elsif (my $visible = check_assign('visible', \\&read_owner_pattern)) { }"}],[2916,{"text":"elsif (check_flag('multi_owner')) { }"}],[2916,{"text":"elsif (check_flag('unknown_owner')) { }"}],[2916,{"text":"elsif (check_flag('has_unenforceable')) { }"}],[2916,{"text":"elsif (check_flag('disabled')) { }"}],[2944,{"text":"if (check('foreach'))"}],[2951,{"text":"if check('\\\\}')"}],[2958,{"text":"if (my(@list) = check_assign_list('log', \\&read_identifier))"}],[2962,{"text":"unless $src_user or $dst_user"}],[2964,{"text":"if ($$service{'foreach'} and not $src_user && $dst_user)"}],[2971,{"text":"$dst_user ? :"}],[2971,{"text":"$src_user ? :"}],[2979,{"text":"if $log"}],[2952,{"text":"if (my $action = check_permit_deny()) { }"}],[2995,{"text":"if $private"}],[3009,{"text":"if check('\\\\}')"}],[3011,{"text":"unless my $val_descr = $$attr_descr{$attribute}"}],[3017,{"text":"unless grep {$_ eq $val;} @$values"}],[3015,{"text":"if (my $values = $$val_descr{'values'}) { }"}],[3015,{"text":"elsif (my $fun = $$val_descr{'function'}) { }"}],[3032,{"text":"if (my $default = $$description{'default'}) { }"}],[3031,{"text":"unless (defined $$object{$attribute})"}],[3043,{"text":"if (exists $$map{$value})"}],[3041,{"text":"if (my $map = $$description{'map'})"}],[3130,{"text":"if $private"}],[3133,{"text":"if check('\\\\}')"}],[3138,{"text":"if $$crypto{'type'}"}],[3134,{"text":"if (check_flag('detailed_crypto_acl')) { }"}],[3134,{"text":"elsif (my $type = check_assign('type', \\&read_typed_name)) { }"}],[3146,{"text":"unless $$crypto{'type'}"}],[3159,{"text":"if check('\\\\}')"}],[3161,{"text":"if $$owner{'alias'}"}],[3166,{"text":"if $$owner{'admins'}"}],[3171,{"text":"if $$owner{'watchers'}"}],[3160,{"text":"if (my $alias = check_assign('alias', \\&read_string)) { }"}],[3160,{"text":"elsif (my(@admins) = check_assign_list('admins', \\&read_name)) { }"}],[3160,{"text":"elsif (my(@watchers) = check_assign_list('watchers', \\&read_name)) { }"}],[3160,{"text":"elsif (check_flag('extend_only')) { }"}],[3160,{"text":"elsif (check_flag('extend_unbounded')) { }"}],[3160,{"text":"elsif (check_flag('extend')) { }"}],[3160,{"text":"elsif (check_flag('show_all')) { }"}],[3192,{"text":"unless $$owner{'extend_only'} and $$owner{'watchers'}"}],[3191,{"text":"unless ($$owner{'admins'})"}],[3218,{"text":"unless my $pair = check_typed_name()"}],[3220,{"text":"unless my $descr = $global_type{$type}"}],[3225,{"text":"if (my $other = $$hash{$name})"}],[3247,{"text":"unless open my $fh, '<', $current_file"}],[3246,{"text":"if (defined $current_file) { }"}],[3272,{"text":"unless (defined $path and -d $path)"}],[3282,{"text":"unless opendir my $dh, $path"}],[3284,{"text":"if $file =~ /^\\./"}],[3285,{"text":"if $file =~ /$$Netspoc::Compiler::Pass1::config{'ignore_files'}/o"}],[3281,{"text":"if (-d $path) { }"}],[3302,{"text":"if ($private)"}],[3301,{"text":"if (my($name) = $path =~ m[([^/]*)\\.private$]) { }"}],[3315,{"text":"unless opendir my $dh, $path"}],[3321,{"text":"if $file =~ /^\\./"}],[3322,{"text":"if $file =~ /$$Netspoc::Compiler::Pass1::config{'ignore_files'}/o"}],[3325,{"text":"if $file =~ /^(config|raw)$/"}],[3366,{"text":"if (my $orig_rule = $$rule{'orig_rule'})"}],[3371,{"text":"if $$rule{'for_router'}"}],[3372,{"text":"if $$rule{'stateless'}"}],[3373,{"text":"if $$rule{'stateless_icmp'}"}],[3374,{"text":"if $service"}],[3376,{"text":"$$rule{'deny'} ? :"}],[3378,{"text":"if (my $chain = $$rule{'chain'})"}],[3412,{"text":"unless my $range = $$prt{$where}"}],[3415,{"text":"unless ($range_prt)"}],[3432,{"text":"defined $code ? :"}],[3432,{"text":"defined $type ? :"}],[3433,{"text":"unless $main_prt = $prt_hash{$proto}{$key}"}],[3437,{"text":"unless $main_prt = $prt_hash{$proto}"}],[3444,{"text":"unless $main_prt = $prt_hash{'proto'}{$key}"}],[3401,{"text":"if ($proto eq 'tcp' or $proto eq 'udp') { }"}],[3401,{"text":"elsif ($proto eq 'icmp') { }"}],[3401,{"text":"elsif ($proto eq 'ip') { }"}],[3447,{"text":"if ($main_prt)"}],[3463,{"text":"if (my $prt = $$hash{''})"}],[3470,{"text":"if (not defined $$prt{'type'}) { }"}],[3470,{"text":"elsif (defined $$prt{'code'}) { }"}],[3504,{"text":"unless $$a{'range'}[0] <=> $$b{'range'}[0]"}],[3522,{"text":"if $i == @sorted"}],[3528,{"text":"if ($a2 + 1 == $b1)"}],[3537,{"text":"if $a2 < $b1"}],[3549,{"text":"unless $i"}],[3542,{"text":"if ($a2 >= $b2)"}],[3568,{"text":"if ($i == @sorted)"}],[3576,{"text":"if ($a1 > $b1)"}],[3586,{"text":"if ($a2 < $b2)"}],[3592,{"text":"if ($a2 == $b2)"}],[3582,{"text":"if ($a1 == $b1)"}],[3634,{"text":"unless @sorted"}],[3642,{"text":"unless $a1 == 1 and $a2 == 65535"}],[3647,{"text":"if &$check_subrange($a, $a1, $a2, 1)"}],[3655,{"text":"if (not $prt) { }"}],[3655,{"text":"elsif (my $split = $$prt{'split'}) { }"}],[3714,{"text":"$$_{'prt'} ? :"}],[3759,{"text":"if (my $owner = $owners{$value})"}],[3758,{"text":"if (my $value = $$obj{$key})"}],[3774,{"text":"if ($$owner{'extend_only'})"}],[3773,{"text":"if (my $owner = link_to_owner($obj, $key))"}],[3795,{"text":"unless ($names)"}],[3800,{"text":"if ($$owner{'watching_owners'})"}],[3803,{"text":"if ($names eq 'recursive')"}],[3813,{"text":"unless ($owner_b)"}],[3811,{"text":"if (my($o_name) = $name =~ /^owner:(.*)$/) { }"}],[3845,{"text":"if $$owner{'alias'}"}],[3847,{"text":"if $$other{'alias'}"}],[3843,{"text":"if (my $other = $alias2owner{$alias}) { }"}],[3867,{"text":"unless $email =~ m[^ [\\w.!\\#$%&''*+/=?^_``{|}~-]+ \\@ [\\w.-]+ $]x"}],[3865,{"text":"unless do {\n\tuse bytes;\n$email eq 'guest' unless $email =~ m[^ [\\w.!\\#$%&''*+/=?^_``{|}~-]+ \\@ [\\w.-]+ $]x\n}"}],[3884,{"text":"if (my(@emails) = find_duplicates(@{$$owner{$attr};}))"}],[3890,{"text":"if (my(@duplicates) = find_duplicates(@{$$owner{'admins'};}, @{$$owner{'watchers'};}))"}],[3882,{"text":"if (find_duplicates(@{$$owner{'admins'};}, @{$$owner{'watchers'};}))"}],[3909,{"text":"if (my $router_attributes = $$area{'router_attributes'})"}],[3915,{"text":"unless $$router{'model'}{'has_vip'}"}],[3928,{"text":"unless my $pair = $$obj{'policy_distribution_point'}"}],[3930,{"text":"if ($type ne 'host')"}],[3939,{"text":"unless ($host)"}],[3953,{"text":"unless my $list = $$obj{'general_permit'}"}],[3959,{"text":"ref $a eq 'ARRAY' ? :"}],[3959,{"text":"ref $b eq 'ARRAY' ? :"}],[3977,{"text":"unless $range = $$prt{'range'}"}],[3972,{"text":"if (ref $prt eq 'ARRAY') { }"}],[3981,{"text":"if (my $flags = $$orig_prt{'flags'})"}],[3984,{"text":"if ($src_range or $range and $range ne $aref_tcp_any)"}],[3987,{"text":"if (@reason)"}],[4004,{"text":"if (is_network($obj)) { }"}],[4002,{"text":"if (@elements == 1) { }"}],[4024,{"text":"unless $$area{$attr}"}],[4029,{"text":"unless $$router{'managed'}"}],[4034,{"text":"if (my $main_interface = $$obj{'main_interface'})"}],[4027,{"text":"if (is_interface($obj)) { }"}],[3999,{"text":"if ($$area{'anchor'}) { }"}],[4048,{"text":"if (my $router_attributes = $$area{'router_attributes'})"}],[4066,{"text":"if ($$interface{'disabled'}) { }"}],[4063,{"text":"unless ($network)"}],[4088,{"text":"unless $private1 eq $private2"}],[4087,{"text":"if (my $private2 = $$interface{'private'}) { }"}],[4086,{"text":"if (my $private1 = $$network{'private'})"}],[4123,{"text":"unless $network_ip eq 'unnumbered'"}],[4144,{"text":"unless (match_ip($ip, $network_ip, $mask))"}],[4149,{"text":"unless ($$network{'loopback'})"}],[4159,{"text":"if ($ip == $network_ip)"}],[4163,{"text":"if ($ip == $broadcast)"}],[4148,{"text":"if ($mask == 4294967295) { }"}],[4116,{"text":"if ($ip =~ /^(?:short|tunnel)$/) { }"}],[4116,{"text":"elsif ($ip eq 'unnumbered') { }"}],[4116,{"text":"elsif ($network_ip eq 'unnumbered') { }"}],[4116,{"text":"elsif ($ip eq 'negotiated') { }"}],[4116,{"text":"elsif ($ip eq 'bridged') { }"}],[4187,{"text":"ref $parent ? :"}],[4187,{"text":"!$parent ? :"}],[4191,{"text":"unless $$object{'subnet_of'}"}],[4193,{"text":"if ($type ne 'network')"}],[4202,{"text":"unless ($network)"}],[4219,{"text":"if ($ip eq 'unnumbered')"}],[4230,{"text":"unless (match_ip($sub_ip, $ip, $mask))"}],[4242,{"text":"unless my $nat = $$obj{'nat'}"}],[4260,{"text":"unless $$router{'managed'}"}],[4273,{"text":"unless (is_interface($obj))"}],[4288,{"text":"unless $$router{'managed'}"}],[4291,{"text":"if $$obj{'main_interface'}"}],[4299,{"text":"if $private eq $obj_p"}],[4298,{"text":"if (my $obj_p = $$obj{'private'})"}],[4305,{"text":"if (my $obj_p = $$obj{'private'})"}],[4297,{"text":"if ($private) { }"}],[4311,{"text":"if ($no_private)"}],[4315,{"text":"if ($changed)"}],[4319,{"text":"if ($count == 1) { }"}],[4319,{"text":"elsif ($count == 0) { }"}],[4334,{"text":"unless $$interface{'spoke'} or $$interface{'hub'}"}],[4338,{"text":"if $$interface{'no_check'}"}],[4342,{"text":"unless $real_intf"}],[4343,{"text":"unless $real_intf eq $interface"}],[4372,{"text":"if $$virtual1{'disabled'}"}],[4380,{"text":"if ($type1 ne $type2)"}],[4385,{"text":"unless ($id1 eq ($$virtual2{'redundancy_id'} || ''))"}],[4403,{"text":"if (my $virtual2 = $net2id2type2virtual{$net}{$id1}{$type1}) { }"}],[4402,{"text":"if ($id1)"}],[4377,{"text":"if (my $interfaces = $net2ip2virtual{$net}{$ip}) { }"}],[4427,{"text":"if @$interfaces <= 2"}],[4432,{"text":"if $$interface{'main_interface'}"}],[4433,{"text":"unless my $restricts = $$interface{'path_restrict'}"}],[4435,{"text":"if $seen{$restrict}"}],[4439,{"text":"if @restrict_routers == @virt_routers"}],[4444,{"text":"if (grep {$_ eq $router;} @restrict_routers)"}],[4468,{"text":"if ($$router{'managed'} or $$router{'routing_only'})"}],[4486,{"text":"unless my $group = $$interfaces[0]{'redundancy_interfaces'}"}],[4487,{"text":"unless $$_{'redundancy_interfaces'}"}],[4494,{"text":"if ($$network{'ip'} eq 'unnumbered' and $$network{'interfaces'} and @{$$network{'interfaces'};} > 2)"}],[4517,{"text":"if (1 < @{$$interface{'router'}{'interfaces'};})"}],[4524,{"text":"if ($$router{'managed'} || $$router{'routing_only'} and not $$interface{'routing'})"}],[4530,{"text":"unless ($$old_intf{'redundant'} and $$interface{'redundant'})"}],[4529,{"text":"if (my $old_intf = $ip2obj{$ip}) { }"}],[4522,{"text":"unless ($ip =~ /^(?:unnumbered|negotiated|tunnel|bridged)$/)"}],[4514,{"text":"if ($ip eq 'short') { }"}],[4542,{"text":"if ($short_intf and $route_intf)"}],[4551,{"text":"if (my $other_device = $ip2obj{$ip}) { }"}],[4561,{"text":"if (my $other_device = $range2obj{$from}{$to}) { }"}],[4550,{"text":"if (my $ip = $$host{'ip'}) { }"}],[4550,{"text":"elsif (my $range = $$host{'range'}) { }"}],[4574,{"text":"unless is_host($other_device)"}],[4573,{"text":"if (my $other_device = $ip2obj{$ip})"}],[4571,{"text":"if (my $range = $$host{'range'})"}],[4627,{"text":"if (not $network or $$network{'disabled'})"}],[4637,{"text":"if $interface eq $in_interface"}],[4640,{"text":"if ($$interface{'disabled'})"}],[4649,{"text":"if $out_interface eq $interface"}],[4677,{"text":"unless my $prefix = $$network{'bridged'}"}],[4682,{"text":"unless $$network{'disabled'}"}],[4681,{"text":"if (my $network = $networks{$prefix})"}],[4690,{"text":"unless @group"}],[4699,{"text":"unless $ip == $ip1 and $mask == $mask1"}],[4704,{"text":"if $$in_intf{'ip'} ne 'bridged'"}],[4706,{"text":"if $seen{$router}"}],[4710,{"text":"unless match_ip($$layer3_intf{'ip'}, $ip, $mask)"}],[4709,{"text":"if (my $layer3_intf = $$in_intf{'layer3_interface'})"}],[4715,{"text":"if $out_intf eq $in_intf"}],[4716,{"text":"if $$out_intf{'ip'} ne 'bridged'"}],[4718,{"text":"unless $$href{$next_net}"}],[4722,{"text":"unless $count > 1"}],[4727,{"text":"unless $$href{$network} eq 'connected'"}],[4741,{"text":"if $$interface{'router'}{'disabled'}"}],[4743,{"text":"if ($$interface{'router'}{'disabled'})"}],[4758,{"text":"if ($$router{'managed'} or $$router{'routing_only'})"}],[4771,{"text":"unless my $borders = $$area{$attr}"}],[4772,{"text":"if (my(@active_borders) = grep({not $$_{'disabled'};} @$borders))"}],[4766,{"text":"if (my $anchor = $$area{'anchor'}) { }"}],[4778,{"text":"if ($ok) { }"}],[4787,{"text":"if $$router{'disabled'}"}],[4789,{"text":"if ($$router{'managed'}) { }"}],[4789,{"text":"elsif ($$router{'routing_only'}) { }"}],[4801,{"text":"if $$router{'orig_router'}"}],[4806,{"text":"if @$aref == 1"}],[4807,{"text":"$$_{'managed'} || $$_{'routing_only'} ? :"}],[4809,{"text":"unless equal(map({$$_{'managed'} || $$_{'routing_only'} ? $$_{'model'}{'name'} : ();} @$aref))"}],[4823,{"text":"if (my $other = $hardware{$name}) { }"}],[4848,{"text":"if $$interface{'disabled'}"}],[4850,{"text":"unless $seen{$network}++"}],[4856,{"text":"if $$network{'disabled'}"}],[4858,{"text":"if (keys %networks > 1) { }"}],[4857,{"text":"unless ($seen{$network})"}],[4889,{"text":"if (($low & $mask) == 0 and $low + $mask <= $high)"}],[4902,{"text":"if $$network{'ip'} =~ /^(?:unnumbered|tunnel)$/"}],[4915,{"text":"unless $user"}],[4914,{"text":"if (my($user, $dom) = $id =~ /^(.*?)(\\@.*)$/) { }"}],[4913,{"text":"if ($id)"}],[4930,{"text":"if (@ip_mask > 1) { }"}],[4930,{"text":"elsif ($ip_mask[0][1] == 4294967295) { }"}],[4930,{"text":"elsif ($id =~ /^.+\\@/) { }"}],[4929,{"text":"if ($id)"}],[4911,{"text":"if (my $ip = $$host{'ip'}) { }"}],[4911,{"text":"elsif ($$host{'range'}) { }"}],[4962,{"text":"unless ($$nat2{$name} and $$nat{$name} eq $$nat2{$name})"}],[4958,{"text":"if (keys %$nat == keys %$nat2) { }"}],[4952,{"text":"if ($nat xor $nat2) { }"}],[4952,{"text":"elsif ($nat and $nat2) { }"}],[4975,{"text":"if $nat_error"}],[4979,{"text":"if ($owner xor $owner2 or $owner and $owner2 and $owner ne $owner2)"}],[4995,{"text":"if $nat"}],[4996,{"text":"if $private"}],[4997,{"text":"if $owner"}],[4998,{"text":"if ($id)"}],[4949,{"text":"if (my $other_subnet = $inv_prefix_aref[$inv_prefix]{$ip}) { }"}],[5065,{"text":"if $private"}],[5064,{"text":"if (my $private = $$subnet{'private'})"}],[5043,{"text":"if ($up_inv_prefix >= $network_inv_prefix) { }"}],[5043,{"text":"elsif ($up_inv_prefix < @inv_prefix_aref and $up = $inv_prefix_aref[$up_inv_prefix]{$ip}) { }"}],[5039,{"text":"if (my $neighbor = $$ip2subnet{$next_ip})"}],[5019,{"text":"if (not $$subnet{'nat'} || $$subnet{'id'} and $ip % $modulo == 0)"}],[5079,{"text":"if $$subnet{'up'}"}],[5085,{"text":"if (my $up = $inv_prefix_aref[$j]{$ip})"}],[5013,{"text":"if (my $ip2subnet = $inv_prefix_aref[$i])"}],[5101,{"text":"if $$router{'managed'} or $$router{'routing_only'}"}],[5118,{"text":"unless ($hash{$up})"}],[5116,{"text":"if ($neighbor = $$subnet{'neighbor'} and $hash{$neighbor})"}],[5126,{"text":"if (@extra) { }"}],[5142,{"text":"unless $$a{'mask'} <=> $$b{'mask'}"}],[5164,{"text":"if (my $orig_router = $$router{'orig_router'}) { }"}],[5164,{"text":"elsif (my $orig_interfaces = $$router{'orig_interfaces'}) { }"}],[5183,{"text":"if (is_router($object)) { }"}],[5196,{"text":"if $$object{'disabled'}"}],[5181,{"text":"unless ($result)"}],[5236,{"text":"unless ($other)"}],[5248,{"text":"if (!$$other{'network'} eq $network)"}],[5247,{"text":"if (not $other and $other = $$info{'i'}{$router})"}],[5233,{"text":"if (is_router($auto)) { }"}],[5225,{"text":"if ($type eq 'Interface') { }"}],[5225,{"text":"elsif ($type eq 'Autointerface') { }"}],[5256,{"text":"if ($other)"}],[5267,{"text":"if (ref $val) { }"}],[5293,{"text":"$$element[0] eq '!' ? :"}],[5302,{"text":"if ($$element[0] eq '!') { }"}],[5309,{"text":"unless @non_compl >= 1"}],[5320,{"text":"if ($$result{$element})"}],[5327,{"text":"if $$element{'disabled'}"}],[5328,{"text":"unless delete $$result{$element}"}],[5345,{"text":"ref $elements eq 'ARRAY' ? :"}],[5350,{"text":"unless ref $ext"}],[5356,{"text":"if $$object{'disabled'}"}],[5366,{"text":"unless $$object{'mask'} == 0"}],[5374,{"text":"unless $$_{'router'}{'managed'}"}],[5361,{"text":"if ($$object{'is_aggregate'}) { }"}],[5361,{"text":"elsif ($managed) { }"}],[5385,{"text":"if ($$object{'is_aggregate'}) { }"}],[5360,{"text":"if ($selector eq 'all') { }"}],[5397,{"text":"if ($managed and not $$router{'managed'} || $$router{'routing_only'}) { }"}],[5397,{"text":"elsif ($selector eq 'all') { }"}],[5428,{"text":"unless ($seen{$router})"}],[5436,{"text":"unless $$_{'managed'}"}],[5443,{"text":"$r ? :"}],[5433,{"text":"if ($managed) { }"}],[5446,{"text":"if ($selector eq 'all') { }"}],[5456,{"text":"if ($managed and not $$obj{'managed'} || $$obj{'routing_only'}) { }"}],[5456,{"text":"elsif ($selector eq 'all') { }"}],[5455,{"text":"if (is_router($obj)) { }"}],[5359,{"text":"if ($type eq 'Network') { }"}],[5359,{"text":"elsif ($type eq 'Interface') { }"}],[5359,{"text":"elsif ($type eq 'Area') { }"}],[5359,{"text":"elsif ($type eq 'Autointerface') { }"}],[5487,{"text":"if $managed"}],[5488,{"text":"if ($selector eq 'all') { }"}],[5484,{"text":"if (my $router = $routers{$name}) { }"}],[5349,{"text":"if (ref $name) { }"}],[5349,{"text":"elsif (ref $ext) { }"}],[5349,{"text":"elsif (my $interface = $interfaces{\"$name.$ext\"}) { }"}],[5514,{"text":"$clean_autogrp ? :"}],[5527,{"text":"if ($type eq 'Area') { }"}],[5527,{"text":"elsif ($type eq 'Network' and $$object{'is_aggregate'}) { }"}],[5548,{"text":"if (not $$object{'is_aggregate'}) { }"}],[5566,{"text":"$$_{'is_aggregate'} ? :"}],[5544,{"text":"if ($type eq 'Host' or $type eq 'Interface') { }"}],[5544,{"text":"elsif ($type eq 'Network') { }"}],[5544,{"text":"elsif (my $aggregates = &$get_aggregates($object, 0, 0)) { }"}],[5584,{"text":"if ($$object{'is_managed_host'}) { }"}],[5595,{"text":"if (my $managed_hosts = $$network{'managed_hosts'})"}],[5580,{"text":"if ($type eq 'Host') { }"}],[5580,{"text":"elsif ($type eq 'Interface') { }"}],[5580,{"text":"elsif (my $networks = &$get_networks($object)) { }"}],[5605,{"text":"if ($managed)"}],[5611,{"text":"if $ext"}],[5630,{"text":"if (@$interfaces > 1)"}],[5626,{"text":"if ($$intf{'router'}{'managed'}) { }"}],[5623,{"text":"if ($$_{'loopback'}) { }"}],[5643,{"text":"$clean_autogrp ? :"}],[5614,{"text":"if (my $networks = &$get_networks($object)) { }"}],[5658,{"text":"$ext ? :"}],[5661,{"text":"if (my $aggregates = &$get_aggregates($object, $ip, $mask)) { }"}],[5661,{"text":"elsif (my $networks = &$get_networks($object)) { }"}],[5575,{"text":"if ($type eq 'host') { }"}],[5575,{"text":"elsif ($type eq 'network') { }"}],[5575,{"text":"elsif ($type eq 'any') { }"}],[5689,{"text":"if $ext"}],[5697,{"text":"$clean_autogrp ? :"}],[5729,{"text":"unless $private1 eq $private2"}],[5728,{"text":"if (my $private2 = $$element{'private'})"}],[5741,{"text":"if ($unique{$obj}++)"}],[5746,{"text":"if (@duplicate)"}],[5703,{"text":"if ($$object{'recursive'}) { }"}],[5703,{"text":"elsif (not $elements) { }"}],[5694,{"text":"if (is_group($object)) { }"}],[5694,{"text":"elsif ($$object{'is_aggregate'} and $$object{'zone'}{'zone_cluster'}) { }"}],[5288,{"text":"if ($type eq '&') { }"}],[5288,{"text":"elsif ($type eq '!') { }"}],[5288,{"text":"elsif ($type eq 'user') { }"}],[5288,{"text":"elsif ($type eq 'interface') { }"}],[5288,{"text":"elsif (ref $name) { }"}],[5288,{"text":"elsif (my $object = $name2object{$type}{$name}) { }"}],[5785,{"text":"if ($seen{$obj}++)"}],[5790,{"text":"if (@duplicate)"}],[5807,{"text":"if ($$object{'disabled'})"}],[5812,{"text":"if $changed"}],[5834,{"text":"if ($$object{'is_tunnel'}) { }"}],[5834,{"text":"elsif ($$object{'has_id_hosts'}) { }"}],[5827,{"text":"if ($$object{'ip'} eq 'unnumbered') { }"}],[5827,{"text":"elsif ($$object{'crosslink'}) { }"}],[5827,{"text":"elsif ($$object{'is_aggregate'}) { }"}],[5843,{"text":"if ($$object{'ip'} =~ /^(short|unnumbered)$/)"}],[5826,{"text":"if (is_network($object)) { }"}],[5826,{"text":"elsif (is_interface($object)) { }"}],[5826,{"text":"elsif (is_area($object)) { }"}],[5850,{"text":"if ($ignore)"}],[5856,{"text":"if $changed"}],[5876,{"text":"unless ($$network{'has_id_hosts'} or $subnet_warning_seen{$subnet}++)"}],[5874,{"text":"if ($$subnet{'mask'} == $$subnet{'network'}{'mask'}) { }"}],[5874,{"text":"elsif (my $host = $subnet2host{$subnet}) { }"}],[5865,{"text":"if (is_host($obj)) { }"}],[5903,{"text":"$convert_hosts eq 'no_combine' ? :"}],[5858,{"text":"if ($convert_hosts) { }"}],[5915,{"text":"$print_type eq 'warn' ? :"}],[5918,{"text":"if $$value{'is_used'}"}],[5922,{"text":"if (my $conf = $$Netspoc::Compiler::Pass1::config{'check_unused_groups'})"}],[5927,{"text":"if (my $conf = $$Netspoc::Compiler::Pass1::config{'check_unused_protocols'})"}],[5950,{"text":"if (ref $pair eq 'HASH')"}],[5957,{"text":"if (my $prt = $protocols{$name}) { }"}],[5971,{"text":"if ($elements eq 'recursive') { }"}],[5971,{"text":"elsif (not $$prtgroup{'is_used'}) { }"}],[5969,{"text":"if (my $prtgroup = $protocolgroups{$name}) { }"}],[5956,{"text":"if ($type eq 'protocol') { }"}],[5956,{"text":"elsif ($type eq 'protocolgroup') { }"}],[6010,{"text":"unless ($proto eq 'tcp' or $proto eq 'udp')"}],[6026,{"text":"unless ($aref_list)"}],[6024,{"text":"if ($src_range or $$prt{'flags'} or $$dst_range{'name'} ne $$prt{'name'}) { }"}],[6076,{"text":"if ($old_rule)"}],[6099,{"text":"if ($type eq 'Autointerface')"}],[6111,{"text":"if ($$obj{'router'}{'managed'}) { }"}],[6121,{"text":"if ($$obj{'managed'}) { }"}],[6104,{"text":"if ($type eq 'Network') { }"}],[6104,{"text":"elsif ($type eq 'Subnet') { }"}],[6104,{"text":"elsif ($type eq 'Interface') { }"}],[6104,{"text":"elsif ($type eq 'Router') { }"}],[6104,{"text":"elsif ($type eq 'Host') { }"}],[6144,{"text":"if ($$interface{'ip'} eq 'short') { }"}],[6144,{"text":"elsif ($$interface{'ip'} eq 'unnumbered') { }"}],[6142,{"text":"if (is_autointerface($src)) { }"}],[6170,{"text":"if ($$obj{'id'}) { }"}],[6179,{"text":"if ($$obj{'router'}{'managed'} or $$obj{'loopback'}) { }"}],[6166,{"text":"if ($type eq 'Network') { }"}],[6166,{"text":"elsif ($type eq 'Subnet' or $type eq 'Host') { }"}],[6166,{"text":"elsif ($type eq 'Interface') { }"}],[6190,{"text":"if $$network{'ip'} ne 'unnumbered'"}],[6160,{"text":"if ($$flags{'net'})"}],[6201,{"text":"if ($type eq 'Network') { }"}],[6201,{"text":"elsif ($type eq 'Subnet' or $type eq 'Interface' or $type eq 'Host') { }"}],[6196,{"text":"if ($$flags{'any'})"}],[6223,{"text":"unless my $managed_hosts = $$object{'managed_hosts'}"}],[6226,{"text":"if (@extra)"}],[6244,{"text":"if ($$zone{'has_unenforceable'})"}],[6255,{"text":"if $src eq $dst"}],[6261,{"text":"if is_autointerface($src) or is_autointerface($dst)"}],[6271,{"text":"$$src{'ip'} > $$dst{'ip'} ? :"}],[6272,{"text":"if ($$a{'ip'} + complement_32bit($$a{'mask'}) + 1 == $$b{'ip'})"}],[6270,{"text":"if ($$src{'network'} eq $$dst{'network'})"}],[6283,{"text":"if zone_eq($$src{'zone'}, $$dst{'zone'}) and $$src{'ip'} == $$dst{'ip'} and $$src{'mask'} == $$dst{'mask'}"}],[6291,{"text":"if zone_eq($$src{'zone'}, get_zone($dst))"}],[6294,{"text":"if zone_eq($$dst{'zone'}, get_zone($src))"}],[6257,{"text":"if (is_router($zone)) { }"}],[6257,{"text":"elsif (is_subnet($src) and is_subnet($dst)) { }"}],[6257,{"text":"elsif ($$src{'is_aggregate'} and $$dst{'is_aggregate'}) { }"}],[6257,{"text":"elsif ($$src{'is_aggregate'} and $$src{'mask'} == 0) { }"}],[6257,{"text":"elsif ($$dst{'is_aggregate'} and $$dst{'mask'} == 0) { }"}],[6257,{"text":"elsif ($$dst{'managed_hosts'}) { }"}],[6310,{"text":"if ($$service{'has_unenforceable'} and not $$service{'seen_unenforceable'} && $$service{'seen_enforceable'})"}],[6315,{"text":"unless $$Netspoc::Compiler::Pass1::config{'check_unenforceable'}"}],[6316,{"text":"if $$service{'disabled'}"}],[6318,{"text":"$$Netspoc::Compiler::Pass1::config{'check_unenforceable'} eq 'warn' ? :"}],[6325,{"text":"if ($$service{'seen_unenforceable'} or $$service{'silent_unenforceable'})"}],[6322,{"text":"unless (delete $$service{'seen_enforceable'})"}],[6331,{"text":"if $$service{'has_unenforceable'}"}],[6333,{"text":"if (my $hash = delete $$service{'seen_unenforceable'})"}],[6349,{"text":"unless $$zone{'has_unenforceable'}"}],[6350,{"text":"if $$zone{'seen_unenforceable'}"}],[6352,{"text":"$agg00 ? :"}],[6359,{"text":"unless @deleted_rules"}],[6367,{"text":"if $$prt1{'flags'}{'overlaps'} and $$prt2{'flags'}{'overlaps'}"}],[6373,{"text":"if ($oservice eq $overlap)"}],[6371,{"text":"if (my $overlaps = $$service{'overlaps'})"}],[6381,{"text":"if ($service eq $overlap)"}],[6379,{"text":"if (my $overlaps = $$oservice{'overlaps'})"}],[6396,{"text":"$action eq 'warn' ? :"}],[6395,{"text":"if (my $action = $$Netspoc::Compiler::Pass1::config{'check_duplicate_rules'})"}],[6417,{"text":"unless $$rule{'rule'}"}],[6418,{"text":"unless $$other{'rule'}"}],[6422,{"text":"if $$prt1{'flags'}{'overlaps'} and $$prt2{'flags'}{'overlaps'}"}],[6429,{"text":"if ($$router{'managed'} or $$router{'routing_only'})"}],[6427,{"text":"if (is_interface($src))"}],[6436,{"text":"unless ($oservice)"}],[6442,{"text":"if ($oservice eq $overlap)"}],[6440,{"text":"if (my $overlaps = $$service{'overlaps'})"}],[6453,{"text":"unless @deleted_rules"}],[6469,{"text":"$action eq 'warn' ? :"}],[6468,{"text":"if (my $action = $$Netspoc::Compiler::Pass1::config{'check_redundant_rules'})"}],[6496,{"text":"if $$service{'disabled'}"}],[6500,{"text":"if $$overlap{'disabled'}"}],[6501,{"text":"unless $$used{$overlap}"}],[6497,{"text":"if (my $overlaps = $$service{'overlaps'})"}],[6515,{"text":"unless my $log = $$router{'log'}"}],[6526,{"text":"if $known_log{$tag}"}],[6559,{"text":"$deny ? :"}],[6563,{"text":"if (@$log) { }"}],[6561,{"text":"if ($log)"}],[6573,{"text":"$foreach ? :"}],[6593,{"text":"if (ref $prt eq 'ARRAY') { }"}],[6593,{"text":"elsif (my $main_prt = $$prt{'main'}) { }"}],[6601,{"text":"$orig_prt ? :"}],[6603,{"text":"$$flags{'reversed'} ? :"}],[6612,{"text":"if ($src_zone eq $dst_zone or $src_zone_cluster and $dst_zone_cluster and $src_zone_cluster eq $dst_zone_cluster)"}],[6627,{"text":"unless my(@src) = expand_special($src, $dst, $$flags{'src'}, $context)"}],[6637,{"text":"unless $src_p and $src_p eq $private or $dst_p and $dst_p eq $private"}],[6645,{"text":"if $$src{'private'}"}],[6650,{"text":"if $$dst{'private'}"}],[6634,{"text":"if ($private) { }"}],[6656,{"text":"if $disabled"}],[6664,{"text":"if $stateless"}],[6665,{"text":"if $deny"}],[6666,{"text":"if $src_range"}],[6667,{"text":"if $log"}],[6668,{"text":"if $orig_prt"}],[6669,{"text":"if $$flags{'oneway'}"}],[6670,{"text":"if $$flags{'no_check_supernet_rules'}"}],[6672,{"text":"if $$flags{'stateless_icmp'}"}],[6700,{"text":"if $convert_hosts"}],[6715,{"text":"if (!$type eq 'service') { }"}],[6715,{"text":"elsif (my $other = $services{$oname}) { }"}],[6711,{"text":"if (my $overlaps = $$service{'overlaps'})"}],[6736,{"text":"unless (grep {/^$prefix/;} keys %owners)"}],[6735,{"text":"if ($prefix)"}],[6734,{"text":"if (my($prefix) = $visible =~ /^ (\\S*) [*] $/x)"}],[6733,{"text":"if (my $visible = $$service{'visible'})"}],[6772,{"text":"unless $p1 <= 22 and 22 <= $p2"}],[6783,{"text":"if ($pdp_src = $host2pdp_src{$host})"}],[6795,{"text":"unless my $pdp = $$router{'policy_distribution_point'}"}],[6796,{"text":"if $$router{'orig_router'}"}],[6805,{"text":"unless my $sub_rule_tree = $rule_tree{$stateless}{$deny}{$src_range}{$src}"}],[6813,{"text":"if $$interface{'vip'}"}],[6816,{"text":"unless $$sub_rule_tree{$interface}{$prt}"}],[6835,{"text":"if ($found_interfaces{$front})"}],[6842,{"text":"unless (@result)"}],[6849,{"text":"unless @result"}],[6824,{"text":"if (keys %found_interfaces == 1) { }"}],[6861,{"text":"if $seen{$router}"}],[6862,{"text":"unless $$router{'policy_distribution_point'}"}],[6863,{"text":"if $$router{'orig_router'}"}],[6866,{"text":"unless ($$member{'admin_ip'})"}],[6874,{"text":"unless !$$a{'admin_ip'} <=> !$$b{'admin_ip'}"}],[6883,{"text":"unless $$router{'admin_ip'}"}],[6864,{"text":"if (my $vrf_members = $$router{'vrf_members'}) { }"}],[6889,{"text":"if (@unreachable > 4)"}],[6888,{"text":"if (@unreachable)"}],[6911,{"text":"if (my $cluster = $$zone{'zone_cluster'})"}],[6917,{"text":"if $$zone{'owner'}"}],[6924,{"text":"if $$network{'ip'} eq 'tunnel'"}],[6926,{"text":"unless $net_owner"}],[6928,{"text":"if $net_owner ne $owner"}],[6927,{"text":"if ($owner) { }"}],[6934,{"text":"if ($owner)"}],[6946,{"text":"unless my(@implicit_owner_zones) = grep({$zone_got_net_owners{$_};} @$cluster)"}],[6948,{"text":"unless (@implicit_owner_zones == @$cluster and equal(map({$$_{'owner'};} @implicit_owner_zones)))"}],[6966,{"text":"unless my(@areas) = values %{$$zone{'areas'};}"}],[6989,{"text":"if (my $super = $$area{'subset_of'})"}],[6997,{"text":"if ($zone2area{$zone} eq $area)"}],[7011,{"text":"unless ($$router{'managed'} or $$router{'routing_only'})"}],[7022,{"text":"unless my $subnets = $$network{'networks'}"}],[7059,{"text":"unless ($zone_got_net_owners{$upper_node})"}],[7068,{"text":"if ($$upper_owner{'extend'})"}],[7058,{"text":"if ($owner eq $upper_owner) { }"}],[7057,{"text":"if ($upper_owner)"}],[7074,{"text":"if $extend"}],[7075,{"text":"if $extend_only"}],[7052,{"text":"if (not $owner) { }"}],[7079,{"text":"if (my $upper_extend = $$extend_only[0])"}],[7078,{"text":"unless ($owner and $$owner{'extend_only'})"}],[7084,{"text":"if ($owner and $$owner{'extend_only'}) { }"}],[7084,{"text":"elsif ($owner) { }"}],[7093,{"text":"unless my $childs = $tree{$node}"}],[7112,{"text":"if $zone_got_net_owners{$node}"}],[7116,{"text":"$owner_list eq $ext ? :"}],[7121,{"text":"if $$e_owner{'extend_unbounded'}"}],[7122,{"text":"if grep {$e_owner eq $_;} @$other"}],[7114,{"text":"if ($node1) { }"}],[7138,{"text":"if ($combined and @$combined)"}],[7145,{"text":"if ($node_owner ne $owner)"}],[7149,{"text":"if (@invalid)"}],[7141,{"text":"if ($$owner{'show_all'})"}],[7164,{"text":"unless my $attributes = $$area{'router_attributes'}"}],[7165,{"text":"unless my $owner = $$attributes{'owner'}"}],[7169,{"text":"if ($r_owner eq $owner)"}],[7168,{"text":"if (my $r_owner = $$router{'owner'}) { }"}],[7183,{"text":"unless my $owner = $$router{'owner'}"}],[7198,{"text":"unless $$interface{'loopback'}"}],[7199,{"text":"unless my $owner = $$interface{'owner'}"}],[7202,{"text":"if $managed"}],[7213,{"text":"if $$aggregate{'owner'}"}],[7216,{"text":"unless $$up{'is_aggregate'}"}],[7218,{"text":"$up ? :"}],[7228,{"text":"unless is_autointerface($src)"}],[7248,{"text":"$$Netspoc::Compiler::Pass1::config{'check_service_unknown_owner'} eq 'warn' ? :"}],[7256,{"text":"if ($unknown2services{$up} and $unknown2services{$obj} eq $unknown2services{$up})"}],[7287,{"text":"if ($has_user eq 'both')"}],[7292,{"text":"if $what eq $has_user"}],[7307,{"text":"if (@objects) { }"}],[7306,{"text":"if ($is_coupling) { }"}],[7325,{"text":"if ($owner) { }"}],[7340,{"text":"if keys %$service_owners == 1 and $$service_owners{$sub_owner}"}],[7338,{"text":"if (my $sub_owner = $$service{'sub_owner'})"}],[7345,{"text":"$is_coupling ? :"}],[7359,{"text":"$$Netspoc::Compiler::Pass1::config{'check_service_multi_owner'} eq 'warn' ? :"}],[7359,{"text":"$$Netspoc::Compiler::Pass1::config{'check_service_multi_owner'} ? :"}],[7350,{"text":"if ($$service{'multi_owner'}) { }"}],[7349,{"text":"if ($multi_count > 1 xor $$service{'multi_owner'})"}],[7375,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_service_unknown_owner'})"}],[7371,{"text":"if ($$service{'unknown_owner'}) { }"}],[7368,{"text":"if ($unknown_owners and keys %$unknown_owners xor $$service{'unknown_owner'})"}],[7388,{"text":"unless delete $$owner{'is_used'}"}],[7408,{"text":"if $$network{'nat_domain'}"}],[7420,{"text":"if $interface eq $in_interface"}],[7421,{"text":"if $$interface{'main_interface'}"}],[7432,{"text":"if aref_eq($nat_tags, $entry_nat_tags)"}],[7435,{"text":"if $$router{'nat_err_seen'}{\"$names1 $names2\"}++"}],[7431,{"text":"if (my $entry_nat_tags = $$router{'active_path'})"}],[7450,{"text":"if $out_interface eq $interface"}],[7451,{"text":"if $$out_interface{'main_interface'}"}],[7456,{"text":"if (aref_eq($out_nat_tags, $nat_tags)) { }"}],[7456,{"text":"elsif (not $$router{'nat_tags'}{$domain}) { }"}],[7484,{"text":"if ($$domain{'active_path'})"}],[7493,{"text":"if $$nat_set{$nat_tag}"}],[7500,{"text":"if ($$nat_set{$nat_tag2})"}],[7497,{"text":"if (my $aref = $$nat_tags2multi{$nat_tag})"}],[7517,{"text":"unless my $nat = $$network{'nat'}"}],[7518,{"text":"unless $$nat{$nat_tag}"}],[7536,{"text":"if $router eq $in_router"}],[7541,{"text":"if grep {$_ eq $nat_tag;} @$in_nat_tags"}],[7546,{"text":"if $out_domain eq $domain"}],[7553,{"text":"if ($$router{'active_path'})"}],[7550,{"text":"if (grep {$_ eq $nat_tag;} @$out_nat_tags)"}],[7567,{"text":"if $out_domain eq $domain"}],[7575,{"text":"if $nat_tag2 eq $nat_tag"}],[7576,{"text":"unless $$href{$nat_tag2}"}],[7597,{"text":"unless ($$next_info{'dynamic'})"}],[7588,{"text":"if ($$nat_info{'hidden'}) { }"}],[7588,{"text":"elsif ($$nat_info{'dynamic'}) { }"}],[7572,{"text":"if (my $aref = $$nat_tags2multi{$nat_tag})"}],[7612,{"text":"if (my $err_path = distribute_nat1($out_domain, $nat_tag, $nat_tags2multi, $router))"}],[7628,{"text":"if (my $err_path = distribute_nat1($domain, $nat_tag, $nat_tags2multi, $in_router))"}],[7646,{"text":"unless my $href = $$network{'nat'}"}],[7649,{"text":"unless ($$nat_network{'hidden'})"}],[7682,{"text":"unless my $href = $$network{'nat'}"}],[7690,{"text":"if $err_shown"}],[7717,{"text":"unless keys_eq($href, $href2)"}],[7715,{"text":"if ($has_non_hidden{$nat_tag})"}],[7725,{"text":"if keys_eq($href, $href2)"}],[7733,{"text":"if $nat_tag2 eq $nat_tag"}],[7737,{"text":"if $all_hidden{$href2}"}],[7741,{"text":"if ($$href2{$nat_tag2})"}],[7749,{"text":"unless ($$href2{$nat_tag2})"}],[7740,{"text":"if ($has_non_hidden{$nat_tag2}) { }"}],[7729,{"text":"if (grep {$has_non_hidden{$_};} %$href) { }"}],[7769,{"text":"if ($common_size eq keys %$href) { }"}],[7769,{"text":"elsif ($common_size eq keys %$href2) { }"}],[7711,{"text":"if (my $aref = $nat_tags2multi{$nat_tag})"}],[7793,{"text":"if @$aref > 1"}],[7795,{"text":"if keys %$href > 1"}],[7801,{"text":"if $$network{'is_aggregate'}"}],[7802,{"text":"if $$network{'nat_domain'}"}],[7828,{"text":"unless my $aref = $nat_tags2multi{$nat_tag}"}],[7830,{"text":"if $$href{$_}"}],[7831,{"text":"unless @tags >= 2"}],[7825,{"text":"if (@$nat_tags >= 2)"}],[7848,{"text":"if ($nat_definitions{$nat_tag}) { }"}],[7876,{"text":"unless (match_ip($obj_ip, $ip, $mask))"}],[7871,{"text":"if ($nat_network = $$network{'nat'}{$nat_tag} and $$nat_network{'dynamic'}) { }"}],[7868,{"text":"if ($$obj{'nat'})"}],[7892,{"text":"unless $nat_definitions{$name} eq 'used'"}],[7899,{"text":"unless my $nat = $$network{'nat'}"}],[7902,{"text":"unless $$nat_info{'dynamic'}"}],[7907,{"text":"if $intf_nat and $$intf_nat{$nat_tag}"}],[7910,{"text":"unless $$router{'need_protect'}"}],[7912,{"text":"unless my $bind = $$bind_intf{'bind_nat'}"}],[7913,{"text":"unless grep {$_ eq $nat_tag;} @$bind"}],[7937,{"text":"if $partitions{$domain}"}],[7943,{"text":"if $out_domain eq $domain"}],[7959,{"text":"unless my $href = $$network{'nat'}"}],[7989,{"text":"unless $$router{'managed'} or $$router{'semi_managed'}"}],[7993,{"text":"if $$router{'managed'} or $$router{'routing_only'}"}],[8009,{"text":"if $$tunnel{'disabled'}"}],[8012,{"text":"if $seen{$real_intf}++"}],[8013,{"text":"unless $$real_intf{'router'}{'managed'}"}],[8015,{"text":"unless keys %$tunnel_set"}],[8021,{"text":"if ref $hardware"}],[8037,{"text":"if $$no_nat_set{$tag}"}],[8035,{"text":"if (my $href = $$network{'nat'} and $no_nat_set)"}],[8053,{"text":"if $$network{'is_aggregate'} or $$subnet{'is_aggregate'}"}],[8068,{"text":"if (grep {$_ eq $nat_tag2;} @$nat_tags and $$object{'ip'} == $$subnet{'ip'} and $$subnet{'mask'} == 4294967295)"}],[8065,{"text":"if (my $nat_tags = $$object{'bind_nat'} and my($nat_tag2) = $$subnet{'name'} =~ /^nat:(.*)\\(/)"}],[8057,{"text":"if (match_ip($ip1, $sub_ip, $sub_mask) or $ip2 and match_ip($ip2, $sub_ip, $sub_mask) || $ip1 <= $sub_ip && $sub_ip <= $ip2)"}],[8081,{"text":"if $ip =~ /^(?:unnumbered|negotiated|tunnel|short|bridged)$/"}],[8085,{"text":"if (my $ip = $$host{'ip'}) { }"}],[8085,{"text":"elsif (my $range = $$host{'range'}) { }"}],[8114,{"text":"if (grep {$_ eq $nat_tag1;} @$nat_tags)"}],[8113,{"text":"if (my $nat_tags = $$all_intf{'bind_nat'})"}],[8153,{"text":"if $seen{$no_nat_set}++"}],[8162,{"text":"if $$network{'ip'} =~ /^(?:unnumbered|tunnel)$/"}],[8167,{"text":"if $$no_nat_set{$tag}"}],[8165,{"text":"if (my $href = $$network{'nat'})"}],[8175,{"text":"unless my $other = $$network{'up'}"}],[8176,{"text":"if get_nat_network($other, $no_nat_set)->{'hidden'}"}],[8174,{"text":"if ($$nat_network{'hidden'})"}],[8190,{"text":"if (my $other_net = $mask_ip_hash{$mask}{$ip}) { }"}],[8209,{"text":"unless @mask_list"}],[8222,{"text":"unless my $bignet = $mask_ip_hash{$m}{$i}"}],[8231,{"text":"unless $$subnet{'networks'}"}],[8233,{"text":"$$subnet{'is_aggregate'} ? :"}],[8244,{"text":"if ($other ne $bignet)"}],[8243,{"text":"if (my $other = $$subnet{'up'}) { }"}],[8225,{"text":"if ($interface eq $first_intf) { }"}],[8272,{"text":"if (my $other = $$subnet{'up'})"}],[8271,{"text":"if ($interface ne $first_intf)"}],[8295,{"text":"unless $network"}],[8296,{"text":"if (my $max_net = $max_up_net{$network})"}],[8300,{"text":"unless ($$network{'is_aggregate'})"}],[8299,{"text":"if (my $max_net = &$set_max_net($$network{'up'}))"}],[8307,{"text":"if ($$network{'is_aggregate'})"}],[8319,{"text":"unless my $max = $max_up_net{$network}"}],[8330,{"text":"if (my $aref = $net2zone_nat_tags{$network})"}],[8346,{"text":"unless keys %$nat == keys %$up_nat"}],[8348,{"text":"unless my $up_nat_info = $$up_nat{$tag}"}],[8351,{"text":"unless $$up_nat_info{'hidden'}"}],[8357,{"text":"if $$up_nat_info{'hidden'}"}],[8359,{"text":"unless match_ip($$up_nat_info{'ip'}, $ip, $mask)"}],[8360,{"text":"unless $$up_nat_info{'mask'} >= $mask"}],[8350,{"text":"if ($$nat_info{'hidden'}) { }"}],[8363,{"text":"unless ($$up{'is_aggregate'})"}],[8368,{"text":"if ($max_routing)"}],[8410,{"text":"if $$network{'ip'} =~ /^(?:unnumbered|tunnel)$/"}],[8412,{"text":"if $$nat_network{'hidden'}"}],[8421,{"text":"if ($$old_net{'zone'} eq $$network{'zone'}) { }"}],[8439,{"text":"unless nat_to_loopback_ok($old_net, $nat_network)"}],[8442,{"text":"unless nat_to_loopback_ok($network, $nat_old_net)"}],[8420,{"text":"if ($$old_net{'is_aggregate'} or $$network{'is_aggregate'}) { }"}],[8420,{"text":"elsif ($$nat_old_net{'dynamic'} and $$nat_network{'dynamic'}) { }"}],[8420,{"text":"elsif ($$old_net{'loopback'} and $$nat_network{'dynamic'}) { }"}],[8420,{"text":"elsif ($$nat_old_net{'dynamic'} and $$network{'loopback'}) { }"}],[8420,{"text":"elsif (($$network{'bridged'} || 0) eq ($$old_net{'bridged'} || 1)) { }"}],[8452,{"text":"if ($error) { }"}],[8417,{"text":"if (my $old_net = $mask_ip_hash{$mask}{$ip}) { }"}],[8487,{"text":"unless @mask_list"}],[8502,{"text":"unless my $bignet = $mask_ip_hash{$m}{$i}"}],[8514,{"text":"if ($$subnet{'has_other_subnet'})"}],[8513,{"text":"if ($$bignet{'zone'} eq $$subnet{'zone'}) { }"}],[8526,{"text":"if ($seen{$nat_bignet}{$nat_subnet})"}],[8557,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_subnets'} eq 'warn') { }"}],[8536,{"text":"unless ($$bignet{'is_aggregate'} or $$subnet{'is_aggregate'} or $$bignet{'has_subnets'} or $$nat_subnet{'subnet_of'} and $$nat_subnet{'subnet_of'} eq $bignet or $$nat_subnet{'is_layer3'})"}],[8531,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_subnets'})"}],[8581,{"text":"unless my $max = $$network{'max_routing_net'}"}],[8582,{"text":"unless ($$max{'has_other_subnet'})"}],[8593,{"text":"unless ($$up{'is_aggregate'})"}],[8589,{"text":"if ($$up{'has_other_subnet'}) { }"}],[8599,{"text":"if $max_secondary"}],[8635,{"text":"unless $$network{'crosslink'}"}],[8636,{"text":"if $$network{'disabled'}"}],[8638,{"text":"if $out_intf eq $in_intf"}],[8640,{"text":"if $cluster{$router2}"}],[8648,{"text":"if $seen{$router}"}],[8681,{"text":"unless $$network{'crosslink'}"}],[8682,{"text":"if $$network{'disabled'}"}],[8691,{"text":"if $$interface{'main_interface'}"}],[8696,{"text":"unless ($$router{'managed'})"}],[8703,{"text":"unless 1 == grep({not $$_{'main_interface'};} @{$$hardware{'interfaces'};})"}],[8710,{"text":"unless my $strength = $crosslink_strength{$managed}"}],[8714,{"text":"if ($$router{'need_protect'})"}],[8718,{"text":"if ($$hardware{'need_out_acl'})"}],[8733,{"text":"if ($weakest == $crosslink_strength{'local'} and $strength2intf{$crosslink_strength{'secondary'}})"}],[8727,{"text":"if (my($weakest) = (sort numerically keys %strength2intf))"}],[8745,{"text":"unless not $out_acl_count or $out_acl_count == @{$$network{'interfaces'};}"}],[8748,{"text":"unless equal(map({$$_{'zone'};} @no_in_acl_intf))"}],[8783,{"text":"unless $$router0{'managed'} =~ /^local/"}],[8784,{"text":"if $$router0{'local_mark'}"}],[8800,{"text":"if ($mask >= $m)"}],[8798,{"text":"unless ($$bignet{'is_aggregate'})"}],[8824,{"text":"unless $k eq $k0"}],[8815,{"text":"if ($filter_only ne $$router{'filter_only'})"}],[8840,{"text":"$zone_cluster ? :"}],[8841,{"text":"if $$zone{'disabled'}"}],[8842,{"text":"if $$zone{'local_mark'}"}],[8857,{"text":"if ($mask > $m)"}],[8853,{"text":"if ($mask >= $m and match_ip($ip, $i, $m))"}],[8870,{"text":"if $out_intf eq $in_intf"}],[8872,{"text":"unless my $managed = $$router2{'managed'}"}],[8873,{"text":"unless $managed =~ /^local/"}],[8874,{"text":"if $$router2{'local_mark'}"}],[8887,{"text":"if $matched{\"$i/$m\"}"}],[8912,{"text":"if (my $subnetworks = $$network{'networks'})"}],[8917,{"text":"if $$nat_network{'hidden'}"}],[8918,{"text":"if $$nat_network{'ip'} eq 'unnumbered'"}],[8922,{"text":"unless $mask > $m and match_ip($ip, $i, $m)"}],[8930,{"text":"if $$obj{'filter_at'}{$mark}"}],[8958,{"text":"unless my $group = $$interface{'reroute_permit'}"}],[8965,{"text":"if (not zone_eq($net_zone, $zone)) { }"}],[8963,{"text":"if (is_network($obj)) { }"}],[8998,{"text":"unless my $managed_hosts = $$network{'managed_hosts'}"}],[9010,{"text":"if $$network{'mask'} > $mask"}],[9011,{"text":"unless my $managed_hosts = $$network{'managed_hosts'}"}],[8996,{"text":"if (@$networks) { }"}],[9048,{"text":"if $$zone{'is_tunnel'}"}],[9049,{"text":"if $$zone{'has_id_hosts'}"}],[9051,{"text":"if ($$zone{'disabled'}) { }"}],[9080,{"text":"unless my $subnets = $$network{'networks'}"}],[9094,{"text":"unless match_ip($i, $ip, $mask)"}],[9098,{"text":"if $$up{'mask'} >= $mask"}],[9097,{"text":"if (my $up = $$obj{'up'})"}],[9105,{"text":"$$obj{'is_aggregate'} ? :"}],[9114,{"text":"unless match_ip($ip, $i, $m)"}],[9125,{"text":"if $owner = $$up{'owner'}"}],[9129,{"text":"if $owner"}],[9155,{"text":"if ($type ne 'network')"}],[9163,{"text":"unless ($network)"}],[9169,{"text":"if ($$network{'disabled'})"}],[9182,{"text":"unless $private1 eq $private2"}],[9190,{"text":"$cluster ? :"}],[9191,{"text":"if (my $other = $$zone2{'ipmask2aggregate'}{$key})"}],[9198,{"text":"if ($cluster)"}],[9211,{"text":"$cluster ? :"}],[9210,{"text":"if (my $v = delete $$aggregate{$attr})"}],[9208,{"text":"if ($mask == 0)"}],[9247,{"text":"if $$zone{'ipmask2aggregate'}{$key}"}],[9261,{"text":"if ($implicit) { }"}],[9287,{"text":"if $$_{'mask'} == $mask"}],[9286,{"text":"$cluster ? :"}],[9291,{"text":"if @networks > 1"}],[9299,{"text":"if $cluster"}],[9307,{"text":"if $prefix != 0"}],[9315,{"text":"if (my $private = $$zone{'private'})"}],[9319,{"text":"if $cluster"}],[9286,{"text":"if (my(@networks) = grep({$$_{'ip'} == $ip if $$_{'mask'} == $mask;} map({@{$$_{'networks'};};} $cluster ? @$cluster : $zone))) { }"}],[9280,{"text":"unless ($$zone{'ipmask2aggregate'}{$key})"}],[9322,{"text":"if ($cluster) { }"}],[9336,{"text":"unless $$_{'ipmask2aggregate'}{$key}"}],[9349,{"text":"if ($$network{'zone'})"}],[9355,{"text":"unless ($$network{'ip'} =~ /^(?:unnumbered|tunnel)$/)"}],[9362,{"text":"if $$network{'ip'} eq 'tunnel'"}],[9363,{"text":"if $$network{'has_id_hosts'}"}],[9369,{"text":"if ($private1 ne $private2)"}],[9367,{"text":"if ($$zone{'private'})"}],[9386,{"text":"if $interface eq $in_interface"}],[9397,{"text":"if $$router{'zone'}"}],[9403,{"text":"if $out_interface eq $interface"}],[9404,{"text":"if $$out_interface{'disabled'}"}],[9390,{"text":"if ($$router{'managed'} or $$router{'semi_managed'}) { }"}],[9422,{"text":"unless $$zone{'is_tunnel'}"}],[9429,{"text":"if $interface eq $in_interface"}],[9430,{"text":"if $$interface{'main_interface'}"}],[9432,{"text":"if $$router{'managed'}"}],[9433,{"text":"if $$router{'active_path'}"}],[9438,{"text":"if $out_interface eq $interface"}],[9440,{"text":"if $$next{'zone_cluster'}"}],[9441,{"text":"if $$out_interface{'main_interface'}"}],[9445,{"text":"unless $private1 eq $private2"}],[9480,{"text":"if $$obj{'areas'}{$area}"}],[9488,{"text":"unless ($$obj{'is_tunnel'})"}],[9487,{"text":"if ($is_zone) { }"}],[9487,{"text":"elsif ($$obj{'managed'} or $$obj{'routing_only'}) { }"}],[9502,{"text":"if $interface eq $in_interface"}],[9505,{"text":"if $$interface{'main_interface'}"}],[9512,{"text":"if ($$is_inclusive{$area} xor not $is_zone)"}],[9524,{"text":"$is_zone ? :"}],[9523,{"text":"if ($$interface{'is_border'})"}],[9508,{"text":"if ($$lookup{$interface}) { }"}],[9508,{"text":"elsif ($auto_border) { }"}],[9533,{"text":"$is_zone ? :"}],[9534,{"text":"if (my $err_path = set_area1($next, $area, $interface))"}],[9549,{"text":"unless my $attributes = $$area{'router_attributes'}"}],[9550,{"text":"if $$attributes{'owner'} and keys %$attributes == 1"}],[9556,{"text":"if $key eq 'owner'"}],[9561,{"text":"if ($r_val eq $val or ref $r_val eq 'ARRAY' and ref $val eq 'ARRAY' and aref_eq($r_val, $val))"}],[9560,{"text":"if (my $r_val = $$router{$key}) { }"}],[9591,{"text":"if defined $$nat1{$attr} xor defined $$nat2{$attr}"}],[9592,{"text":"unless defined $$nat1{$attr}"}],[9593,{"text":"if $$nat1{$attr} ne $$nat2{$attr}"}],[9606,{"text":"if (nat_equal($nat1, $nat2))"}],[9612,{"text":"if ($$nat2{'identity'})"}],[9623,{"text":"unless my $hash = $$area{'nat'}"}],[9633,{"text":"if (my $z_nat = $$zone{'nat'}{$nat_tag})"}],[9671,{"text":"is_network($net_or_zone) ? :"}],[9684,{"text":"unless $mask2 > $mask1"}],[9685,{"text":"unless match_ip($ip2, $ip1, $mask1)"}],[9715,{"text":"unless ($$nat{'dynamic'})"}],[9688,{"text":"if (my $n_nat = $$network{'nat'}{$nat_tag}) { }"}],[9688,{"text":"elsif ($$network{'ip'} eq 'bridged' and not $$nat{'identity'}) { }"}],[9739,{"text":"$$zone{'nat'} ? :"}],[9758,{"text":"unless my $href = $$network{'nat'}"}],[9759,{"text":"if ($$network{'is_aggregate'})"}],[9765,{"text":"unless $$nat_network{'identity'}"}],[9767,{"text":"unless $$nat_network{'is_used'}"}],[9787,{"text":"if $$network{'zone'}"}],[9799,{"text":"if $$network{'loopback'} and @{$$zone{'networks'};} == 1"}],[9802,{"text":"if (@{$$zone{'networks'};})"}],[9807,{"text":"if (my $unmanaged = $$zone{'unmanaged_routers'})"}],[9812,{"text":"if ($$zone{'private'} and $$zone{'private'} eq 'public')"}],[9829,{"text":"if $$zone{'zone_cluster'}"}],[9836,{"text":"if 1 >= @$cluster"}],[9854,{"text":"unless my $border = $$area{$attribute}"}],[9859,{"text":"if ($attribute eq 'inclusive_border')"}],[9881,{"text":"if $in_interface"}],[9884,{"text":"$$is_inclusive{$area} ? :"}],[9885,{"text":"$$err_obj{'areas'}{$area} ? :"}],[9878,{"text":"if (my $err_path = set_area1($obj, $area, $in_interface))"}],[9917,{"text":"unless my $borders = $$area{$attr}"}],[9919,{"text":"if $start"}],[9923,{"text":"$attr eq 'border' ? :"}],[9931,{"text":"if $err"}],[9935,{"text":"unless my $borders = $$area{$attr}"}],[9936,{"text":"unless my(@bad_intf) = grep({$$lookup{$_} ne 'found';} @$borders)"}],[9904,{"text":"if (my $network = $$area{'anchor'}) { }"}],[9948,{"text":"unless @{$$area{'zones'};}"}],[9964,{"text":"unless $$zone{'areas'}"}],[9968,{"text":"unless @{$$a{'zones'};} <=> @{$$b{'zones'};}"}],[9970,{"text":"unless my(@areas) = (sort {$$a{'name'} cmp $$b{'name'} unless @{$$a{'zones'};} <=> @{$$b{'zones'};};} values %{$$zone{'areas'};})"}],[9978,{"text":"if $seen{$small}{$next}"}],[9983,{"text":"unless ($$zone{'areas'}{$next})"}],[9992,{"text":"if (@{$$small{'zones'};} == @{$$next{'zones'};}) { }"}],[9991,{"text":"if ($ok)"}],[10030,{"text":"unless @{$$a{'zones'};} <=> @{$$b{'zones'};}"}],[10043,{"text":"if $next eq $big"}],[10054,{"text":"unless my $big = $$area{'subset_of'}"}],[10058,{"text":"if $$router{'areas'}{$big}"}],[10109,{"text":"unless my $related = $$interface{'redundancy_interfaces'}"}],[10113,{"text":"unless $$router{'managed'} or $$router{'semi_managed'}"}],[10115,{"text":"if $seen{$related}"}],[10121,{"text":"unless ($$v{'router'}{'loop'})"}],[10127,{"text":"if $err"}],[10133,{"text":"unless equal(map({$$_{'loop'};} @$related))"}],[10154,{"text":"unless @$elements"}],[10161,{"text":"if $$interface{'disabled'}"}],[10169,{"text":"unless ($loop)"}],[10181,{"text":"unless ($cluster eq $prev_cluster)"}],[10180,{"text":"if ($prev_cluster) { }"}],[10199,{"text":"if (1 == @$elements)"}],[10197,{"text":"if ($deleted)"}],[10205,{"text":"if ($invalid)"}],[10212,{"text":"unless $$_{'router'}{'managed'}"}],[10212,{"text":"if grep {$$_{'router'}{'routing_only'} unless $$_{'router'}{'managed'};} @$elements"}],[10217,{"text":"unless $$_{'zone_cluster'}"}],[10217,{"text":"unless equal(map({$_ unless $$_{'zone_cluster'};} map({$$_{'zone'};} @$elements)))"}],[10234,{"text":"if $zone2 eq $zone"}],[10236,{"text":"if $cluster2 eq $zone_cluster"}],[10235,{"text":"if (my $cluster2 = $$zone2{'zone_cluster'})"}],[10239,{"text":"if ($loop eq $loop2)"}],[10238,{"text":"if (my $loop2 = $$zone2{'loop'})"}],[10284,{"text":"if $$obj{'reachable_part'}{$mark}"}],[10285,{"text":"if $$obj{'active_path'}"}],[10299,{"text":"if $interface eq $in_interface"}],[10300,{"text":"if $$interface{'main_interface'}"}],[10304,{"text":"$is_zone ? :"}],[10310,{"text":"unless $$interface{'loop'}"}],[10311,{"text":"$is_zone ? :"}],[10303,{"text":"if (my $reached = $$lookup{$interface}) { }"}],[10352,{"text":"if $mark eq 'none'"}],[10342,{"text":"if ($$reached{'zone'} eq $$reached{'router'} and $$reached{'zone'} ne 'none') { }"}],[10366,{"text":"unless aref_delete($$interface{'path_restrict'}, $restrict)"}],[10371,{"text":"unless (@{$$interface{'path_restrict'};})"}],[10362,{"text":"if (not $has_interior) { }"}],[10408,{"text":"if $$reached{$direction}"}],[10412,{"text":"unless ($$obj{'loop'})"}],[10427,{"text":"if ($mark > $start_mark + 1)"}],[10460,{"text":"if ($$obj{'active_path'})"}],[10480,{"text":"if $interface eq $to_zone1"}],[10481,{"text":"if $$interface{'loop'}"}],[10484,{"text":"is_router($obj) ? :"}],[10489,{"text":"if $max > $max_distance"}],[10511,{"text":"if ($$loop{'distance'} < $$loop2{'distance'}) { }"}],[10508,{"text":"if ($loop ne $loop2)"}],[10497,{"text":"if ($obj eq $loop_obj) { }"}],[10497,{"text":"elsif (my $loop2 = $$obj{'loop'}) { }"}],[10492,{"text":"if ($loop) { }"}],[10534,{"text":"if ($$obj{'loop'} and $$obj{'loop'}{'exit'} ne $obj) { }"}],[10564,{"text":"if ($$exit{'loop'} eq $loop) { }"}],[10555,{"text":"if (my $marker = $$loop{'cluster_exit'}) { }"}],[10585,{"text":"unless @zones"}],[10586,{"text":"unless $$_{'managed'}"}],[10591,{"text":"if $$obj{'to_zone1'} or $$obj{'loop'}"}],[10612,{"text":"unless $$_{'managed'}"}],[10614,{"text":"unless my $loop = $$obj{'loop'}"}],[10634,{"text":"if (my $loop = $$interface{'loop'})"}],[10695,{"text":"if ($$main{'path_restrict'} or $$main{'reachable_at'}) { }"}],[10686,{"text":"if ($$router{'managed'} or $$router{'semi_managed'}) { }"}],[10709,{"text":"if ($$obj{'managed'} or $$obj{'semi_managed'}) { }"}],[10678,{"text":"if ($type eq 'Network') { }"}],[10678,{"text":"elsif ($type eq 'Subnet') { }"}],[10678,{"text":"elsif ($type eq 'Interface') { }"}],[10678,{"text":"elsif ($type eq 'Router') { }"}],[10678,{"text":"elsif ($type eq 'Zone') { }"}],[10678,{"text":"elsif ($type eq 'Host') { }"}],[10764,{"text":"if ($$restrict{'active_path'})"}],[10762,{"text":"if ($pathrestriction)"}],[10786,{"text":"unless ($$has_mark{$mark})"}],[10804,{"text":"if (intersect($reachable, $reachable2))"}],[10801,{"text":"if (my $reachable2 = $$reachable_at2{$$end_intf{'router'}})"}],[10800,{"text":"if (my $reachable_at2 = $$end_intf{'reachable_at'})"}],[10783,{"text":"if ($$other{'loop'}) { }"}],[10779,{"text":"if (my $reachable = $$reachable_at{$obj})"}],[10777,{"text":"if ($reachable_at and $end_intf and $end_intf ne $in_intf)"}],[10816,{"text":"if ($$obj{'active_path'})"}],[10823,{"text":"if ($obj eq $end)"}],[10836,{"text":"$end_intf ? :"}],[10839,{"text":"unless ($$has_mark{$mark})"}],[10835,{"text":"if (my $reachable = $$reachable_at{$obj})"}],[10834,{"text":"if ($reachable_at)"}],[10854,{"text":"if ($pathrestriction)"}],[10862,{"text":"is_router($obj) ? :"}],[10869,{"text":"unless my $allowed = $$navi{$$obj{'loop'}}"}],[10874,{"text":"if $interface eq $in_intf"}],[10875,{"text":"if $$interface{'main_interface'}"}],[10876,{"text":"unless my $loop = $$interface{'loop'}"}],[10877,{"text":"unless $$allowed{$loop}"}],[10883,{"text":"if (cluster_path_mark1($next, $interface, $end, $end_intf, $path_tuples, $loop_leave, $navi))"}],[10901,{"text":"if ($pathrestriction)"}],[10930,{"text":"if ($navi = $$from{'navi'}{$to} and scalar keys %$navi)"}],[10945,{"text":"if $from eq $to"}],[10944,{"text":"if ($from_loop eq $to_loop) { }"}],[10944,{"text":"elsif ($$from_loop{'distance'} >= $$to_loop{'distance'}) { }"}],[11005,{"text":"if $$from_in{'path'}{$to_store}"}],[11017,{"text":"if (is_interface($from_store) and $$from_store{'router'} eq $from || $$from_store{'zone'} eq $from) { }"}],[11017,{"text":"elsif ($from_in and $$from_in{'path_restrict'} || $$from_in{'reachable_at'}) { }"}],[11032,{"text":"if (is_interface($to_store) and $$to_store{'router'} eq $to || $$to_store{'zone'} eq $to) { }"}],[11032,{"text":"elsif ($to_out and $$to_out{'path_restrict'} || $$to_out{'reachable_at'}) { }"}],[11051,{"text":"if ($from_in and not $$from_in{'loop'} and my $restrictions = $$from_in{'path_restrict'} and not $start_intf)"}],[11070,{"text":"if ($$restrict{'active_path'})"}],[11062,{"text":"if ($to_out and not $$to_out{'loop'} and my $restrictions = $$to_out{'path_restrict'} and not $end_intf)"}],[11082,{"text":"$end_intf ? :"}],[11086,{"text":"if ($start_intf and $$start_intf{'zone'} eq $end_node)"}],[11093,{"text":"unless my $reachable_at = $$intf{'reachable_at'}"}],[11100,{"text":"$start_intf ? :"}],[11101,{"text":"unless my $reachable = $$reachable_at{$start_node}"}],[11109,{"text":"if ($start_intf) { }"}],[11106,{"text":"unless ($$has_mark{$mark})"}],[11122,{"text":"if ($success and $start_intf)"}],[11132,{"text":"unless $intf"}],[11135,{"text":"if $interface eq $intf"}],[11133,{"text":"if (my $interfaces = $$intf{'redundancy_interfaces'})"}],[11153,{"text":"unless $intf"}],[11157,{"text":"unless $router eq $from or $router eq $to"}],[11160,{"text":"unless my $removed = delete $$intf{'path_restrict'}"}],[11165,{"text":"if $interface eq $intf"}],[11175,{"text":"if (intersect($orig, $removed)) { }"}],[11170,{"text":"if ($orig) { }"}],[11194,{"text":"unless $success"}],[11207,{"text":"if ($$start_store{'loop_enter'}{$end_store})"}],[11218,{"text":"unless my $navi = cluster_navigation($from, $to)"}],[11223,{"text":"is_router($from) ? :"}],[11224,{"text":"unless my $allowed = $$navi{$$from{'loop'}}"}],[11230,{"text":"if $$interface{'main_interface'}"}],[11232,{"text":"unless $loop"}],[11235,{"text":"unless ($$allowed{$loop})"}],[11239,{"text":"if $$interface{'loopback'} and $get_next eq 'zone'"}],[11247,{"text":"if (cluster_path_mark1($next, $interface, $to, $end_intf, $path_tuples, $loop_leave, $navi))"}],[11262,{"text":"unless $success"}],[11267,{"text":"unless my $in_intf = $key2obj{$in_intf_ref}"}],[11271,{"text":"unless my $out_intf = $key2obj{$out_intf_ref}"}],[11297,{"text":"unless $intf"}],[11298,{"text":"unless $$intf{'saved_path_restrict'}"}],[11301,{"text":"if (my $orig = delete $$interface{'saved_path_restrict'}) { }"}],[11312,{"text":"if (my $orig = delete $$start_intf{'saved_reachable_at_zone'})"}],[11311,{"text":"if ($start_intf)"}],[11320,{"text":"unless $intf"}],[11323,{"text":"if $interface eq $intf"}],[11321,{"text":"if (my $interfaces = $$intf{'redundancy_interfaces'})"}],[11331,{"text":"if ($intf and not $$intf{'loop'} and my $restrictions = $$intf{'path_restrict'})"}],[11343,{"text":"if ($success)"}],[11378,{"text":"$$from_store{'loop'} ? :"}],[11386,{"text":"if ($from eq $to)"}],[11394,{"text":"if ($from_loop and $to_loop and $$from_loop{'cluster_exit'} eq $$to_loop{'cluster_exit'})"}],[11406,{"text":"if $$from_in{'path'}{$to_store}"}],[11415,{"text":"unless $from_loop"}],[11422,{"text":"unless $from_out"}],[11425,{"text":"unless cluster_path_mark($from, $exit, $from_in, $from_out, $from_store, $to_store)"}],[11412,{"text":"unless ($from_out)"}],[11449,{"text":"unless $to_loop"}],[11456,{"text":"unless $to_in"}],[11459,{"text":"unless cluster_path_mark($entry, $to, $to_in, $to_out, $from_store, $to_store)"}],[11446,{"text":"unless ($to_in)"}],[11403,{"text":"if ($$from{'distance'} >= $$to{'distance'}) { }"}],[11500,{"text":"if (is_router($loop_entry) or is_interface($loop_entry) and $$loop_entry{'router'} eq $$loop_entry{'loop_enter'}{$loop_exit}[0]{'router'} xor $call_at_zone)"}],[11529,{"text":"if $at_router xor $call_at_zone"}],[11538,{"text":"if ($exit_at_router xor $call_at_zone)"}],[11569,{"text":"$$from_store{'loop'} ? :"}],[11583,{"text":"unless $from and $to"}],[11584,{"text":"if $from eq $to"}],[11588,{"text":"unless (path_mark($from, $to, $from_store, $to_store))"}],[11587,{"text":"unless (exists $$path_store{'path'}{$to_store})"}],[11624,{"text":"unless ($loop_out)"}],[11613,{"text":"if ($$from{'loop'} and $$from_store{'loop_exit'} and my $loop_exit = $$from_store{'loop_exit'}{$to_store}) { }"}],[11654,{"text":"unless ($loop_out)"}],[11668,{"text":"if ($call_it)"}],[11673,{"text":"unless ($out)"}],[11642,{"text":"if ($in and $$in{'loop_entry'} and my $loop_entry = $$in{'loop_entry'}{$to_store}) { }"}],[11709,{"text":"if $interface eq $in_intf"}],[11710,{"text":"if $$interface{'zone'}"}],[11711,{"text":"if $$interface{'orig_main'}"}],[11713,{"text":"if $active_path{$router}"}],[11720,{"text":"if $out_intf eq $interface"}],[11721,{"text":"if $$out_intf{'orig_main'}"}],[11746,{"text":"is_autointerface($src) ? :"}],[11748,{"text":"is_autointerface($dst) ? :"}],[11755,{"text":"if $from eq $to"}],[11757,{"text":"unless (path_mark($from, $to, $from_store, $to_store))"}],[11756,{"text":"unless ($$from_store{'path'}{$to_store})"}],[11770,{"text":"if ($$from_store{'loop_exit'} and my $exit = $$from_store{'loop_exit'}{$to_store}) { }"}],[11786,{"text":"unless ($border2obj2auto{$border})"}],[11783,{"text":"unless (is_router($from))"}],[11803,{"text":"if (my $orig = $$interface{'orig_main'}) { }"}],[11803,{"text":"elsif (my $layer3_intf = $$interface{'layer3_interface'}) { }"}],[11814,{"text":"if ($bridged_count > 1)"}],[11819,{"text":"$managed ? :"}],[11832,{"text":"unless my $isakmp = $isakmp{$name}"}],[11831,{"text":"if ($type eq 'isakmp') { }"}],[11852,{"text":"unless my $ipsec = $ipsec{$name2}"}],[11851,{"text":"if ($type eq 'ipsec') { }"}],[11873,{"text":"if $use_ah"}],[11875,{"text":"if $use_esp"}],[11872,{"text":"if (not $nat_traversal or $nat_traversal ne 'on')"}],[11884,{"text":"if ($nat_traversal)"}],[11911,{"text":"unless $real_hubs and @$real_hubs"}],[11914,{"text":"unless $real_spokes and @$real_spokes"}],[11923,{"text":"if $crypto_name eq $name"}],[11931,{"text":"unless $$router{'managed'}"}],[11935,{"text":"if $$router{'model'}{'do_auth'} and not $need_id"}],[11941,{"text":"if (my $orig_router = $$router{'orig_router'})"}],[11944,{"text":"unless $hub_seen{$router}++"}],[11965,{"text":"if (my $orig_router = $$router{'orig_router'})"}],[11984,{"text":"if $$real_hub{'bind_nat'}"}],[11994,{"text":"if (my $aref = $$router{'orig_interfaces'})"}],[12000,{"text":"unless ($$model{'do_auth'} or $$model{'can_dyn_crypto'})"}],[11998,{"text":"if ($$real_spoke{'ip'} =~ /^(?:negotiated|short|unnumbered)$/)"}],[12009,{"text":"unless $s_p and $s_p eq $private or $h_p and $h_p eq $private"}],[12018,{"text":"if $$real_spoke{'private'}"}],[12022,{"text":"if $$real_hub{'private'}"}],[12006,{"text":"if ($private) { }"}],[12034,{"text":"if ($$network{'has_id_hosts'}) { }"}],[12034,{"text":"elsif ($$interface{'ip'} ne 'tunnel') { }"}],[12041,{"text":"if ($has_id_hosts and @other)"}],[12048,{"text":"if ($$router{'managed'} and $$crypto{'detailed_crypto_acl'})"}],[12057,{"text":"if (@hubs > 1)"}],[12083,{"text":"unless 1 == @{$$zone{'interfaces'};}"}],[12091,{"text":"unless 1 == @{$$network{'interfaces'};}"}],[12081,{"text":"if ($managed) { }"}],[12125,{"text":"unless my $attributes = $$obj{'radius_attributes'}"}],[12128,{"text":"unless $spec"}],[12131,{"text":"unless $value =~ /^(?:tunnelall|tunnelspecified)$/"}],[12140,{"text":"unless $$obj{'range'}"}],[12145,{"text":"if grep {$$_{'ip'};} @{$$obj{'hosts'};}"}],[12139,{"text":"if (is_host($obj)) { }"}],[12139,{"text":"elsif (is_network($obj)) { }"}],[12129,{"text":"if ($key eq 'split-tunnel-policy') { }"}],[12129,{"text":"elsif ($key eq 'trust-point') { }"}],[12158,{"text":"if $id =~ /@/"}],[12164,{"text":"if &$has_attr($host)"}],[12165,{"text":"if &$has_attr($$host{'network'})"}],[12168,{"text":"if &$has_attr($$peer{'router'})"}],[12171,{"text":"if ($missing)"}],[12182,{"text":"unless $$isakmp{'trust_point'}"}],[12181,{"text":"if ($$isakmp{'authentication'} eq 'rsasig')"}],[12204,{"text":"if $$tunnel{'disabled'}"}],[12206,{"text":"if $$tunnel_intf{'is_hub'}"}],[12216,{"text":"if $interface eq $tunnel_intf"}],[12218,{"text":"if ($managed and $$router{'model'}{'crypto'} eq 'EZVPN')"}],[12217,{"text":"if ($$interface{'ip'} eq 'tunnel')"}],[12226,{"text":"if (my $intf2 = $id2interface{$id})"}],[12225,{"text":"if (my $id = $$interface{'id'})"}],[12224,{"text":"if ($$interface{'spoke'})"}],[12238,{"text":"if $managed"}],[12245,{"text":"if @all_networks > 1"}],[12258,{"text":"if (my $other = $$peer{'id_rules'}{$id})"}],[12236,{"text":"if ($$network{'has_id_hosts'}) { }"}],[12291,{"text":"if $has_id_hosts and $has_other_network"}],[12298,{"text":"unless $has_id_hosts or $has_other_network"}],[12309,{"text":"unless $need_id"}],[12318,{"text":"unless $do_auth"}],[12308,{"text":"if ($$tunnel_intf{'id'}) { }"}],[12308,{"text":"elsif ($encrypted[0]{'has_id_hosts'}) { }"}],[12308,{"text":"elsif ($do_auth) { }"}],[12308,{"text":"elsif ($need_id) { }"}],[12348,{"text":"if (is_host($obj))"}],[12342,{"text":"if (grep {$$_{'router'}{'model'}{'crypto'} eq 'ASA_VPN';} @$peers)"}],[12354,{"text":"if ($managed and $$router{'model'}{'crypto'} eq 'ASA')"}],[12376,{"text":"if $$intf1{'ip'} eq 'negotiated'"}],[12362,{"text":"if ($real_spoke and not $$real_spoke{'ip'} =~ /^(?:short|unnumbered)$/)"}],[12394,{"text":"unless my $crypto = $$model{'crypto'}"}],[12395,{"text":"unless $crypto eq 'ASA_VPN'"}],[12398,{"text":"unless @id_rules_interfaces >= 2"}],[12404,{"text":"if (my $src2 = $id2src{$id}) { }"}],[12425,{"text":"unless my $trust_point = delete $$router{'radius_attributes'}{'trust-point'}"}],[12433,{"text":"unless my $crypto = $$interface{'crypto'}"}],[12421,{"text":"if ($crypto_type eq 'ASA_VPN') { }"}],[12421,{"text":"elsif ($crypto_type eq 'ASA') { }"}],[12505,{"text":"unless $in_intf"}],[12509,{"text":"unless $$router{'managed'}"}],[12513,{"text":"if $$out_intf{'zone'} ne $zone"}],[12519,{"text":"if $$dst{'hidden'}"}],[12516,{"text":"unless ($$dst{'is_aggregate'})"}],[12536,{"text":"if $$net1{'mask'} < $$net2{'mask'}"}],[12539,{"text":"unless $net1 = $$net1{'up'}"}],[12541,{"text":"if $net1 eq $net2"}],[12542,{"text":"unless $net2 = $$net2{'up'}"}],[12562,{"text":"if $$nat_other{'hidden'}"}],[12565,{"text":"if (my $aggregate = $$zone{'ipmask2aggregate'}{$key})"}],[12568,{"text":"if (my $result = $$zone{'ipmask2net'}{$key})"}],[12577,{"text":"if $$nat_network{'hidden'}"}],[12579,{"text":"if $i =~ /^(?:unnumbered|tunnel)$/"}],[12586,{"text":"unless ($result)"}],[12592,{"text":"if (my $super = find_supernet($result, $network)) { }"}],[12581,{"text":"if ($m >= $mask and match_ip($i, $ip, $mask) or $m < $mask and match_ip($ip, $i, $m))"}],[12617,{"text":"unless ($net_or_count)"}],[12623,{"text":"unless (ref $net_or_count)"}],[12659,{"text":"$where eq 'src' ? :"}],[12669,{"text":"if $$dst{'hidden'}"}],[12666,{"text":"unless ($$dst{'is_aggregate'})"}],[12673,{"text":"if $supernet_rule_tree{$stateless}{$src}{$src_range}{$prt}{$interface}{$ipmask}{$zone}"}],[12663,{"text":"if ($where eq 'dst')"}],[12678,{"text":"unless $networks"}],[12689,{"text":"$where eq 'src' ? :"}],[12690,{"text":"if ($rule_tree{$stateless}{$deny}{$src_range}{$src}{$dst}{$prt})"}],[12680,{"text":"if (not ref $networks) { }"}],[12700,{"text":"if $missing_supernet{$interface}{$service}"}],[12704,{"text":"$reversed ? :"}],[12705,{"text":"$$Netspoc::Compiler::Pass1::config{'check_supernet_rules'} eq 'warn' ? :"}],[12741,{"text":"unless $out_intf"}],[12745,{"text":"unless my $managed = $$router{'managed'}"}],[12751,{"text":"if ($$dst{'has_other_subnet'} and $out_zone eq $dst_zone)"}],[12765,{"text":"unless my $src_filter_at = $$src_net{'filter_at'}"}],[12766,{"text":"unless my $dst_filter_at = $$dst_net{'filter_at'}"}],[12767,{"text":"unless $$src_filter_at{$mark} and $$dst_filter_at{$mark}"}],[12762,{"text":"if (my $mark = $$router{'local_mark'})"}],[12778,{"text":"if ($no_acl_zone eq $dst_zone) { }"}],[12778,{"text":"elsif ($in_zone eq $no_acl_zone) { }"}],[12778,{"text":"elsif ($$no_acl_intf{'main_interface'}) { }"}],[12774,{"text":"if ($no_acl_intf = $$router{'no_in_acl'})"}],[12814,{"text":"$managed =~ /^(?:secondary|local.*)$/ ? :"}],[12812,{"text":"unless ($m2)"}],[12828,{"text":"if ($no_acl_zone eq $dst_zone) { }"}],[12828,{"text":"elsif ($no_acl_zone eq $src_zone) { }"}],[12828,{"text":"elsif ($$no_acl_intf{'main_interface'}) { }"}],[12851,{"text":"if $intf eq $in_intf"}],[12852,{"text":"if $$intf{'loopback'} and not $$intf{'vip'}"}],[12857,{"text":"if $zone eq $src_zone"}],[12858,{"text":"if $zone eq $dst_zone"}],[12859,{"text":"if $$intf{'main_interface'}"}],[12824,{"text":"if (my $no_acl_intf = $$router{'no_in_acl'}) { }"}],[12819,{"text":"if ($proto eq 'tcp' || $proto eq 'udp' || $proto eq 'ip' and $m1 == $m2)"}],[12796,{"text":"if ($$router{'model'}{'stateless'} and not $$rule{'oneway'})"}],[12868,{"text":"if $src_zone eq $in_zone"}],[12895,{"text":"unless $in_intf"}],[12899,{"text":"unless $$router{'managed'}"}],[12909,{"text":"unless my $src_filter_at = $$src_net{'filter_at'}"}],[12910,{"text":"unless my $dst_filter_at = $$dst_net{'filter_at'}"}],[12911,{"text":"unless $$src_filter_at{$mark} and $$dst_filter_at{$mark}"}],[12906,{"text":"if (my $mark = $$router{'local_mark'})"}],[12922,{"text":"if ($no_acl_zone eq $src_zone) { }"}],[12922,{"text":"elsif ($no_acl_zone eq $dst_zone) { }"}],[12922,{"text":"elsif ($$no_acl_intf{'main_interface'}) { }"}],[12918,{"text":"if (my $no_acl_intf = $$router{'no_in_acl'})"}],[12943,{"text":"$$router{'model'}{'has_io_acl'} ? :"}],[12951,{"text":"if $intf eq $in_intf"}],[12952,{"text":"if $$intf{'loopback'} and not $$intf{'vip'}"}],[12956,{"text":"if $zone eq $src_zone"}],[12957,{"text":"if $zone eq $dst_zone"}],[12958,{"text":"if $$intf{'main_interface'}"}],[12968,{"text":"unless keys %supernet_rule_tree"}],[13008,{"text":"if ($prt1 eq $prt2)"}],[13011,{"text":"if (defined(my $prt = $smaller_prt{$prt1}{$prt2}))"}],[13017,{"text":"if ($prt eq $prt2)"}],[13025,{"text":"if ($prt eq $prt1)"}],[13065,{"text":"if $$rule{'deleted'}"}],[13066,{"text":"if $$rule{'deny'}"}],[13067,{"text":"if $$rule{'no_check_supernet_rules'}"}],[13069,{"text":"unless $$dst{'has_other_subnet'}"}],[13072,{"text":"if $$dst{'mask'} != 0"}],[13076,{"text":"if @{$$dst{'zone'}{'interfaces'};} <= 1"}],[13087,{"text":"unless my $hash = $rule_tree{$stateless2}"}],[13088,{"text":"unless $hash = $$hash{$deny}"}],[13091,{"text":"unless my $smaller_src_range = find_smaller_prt($src_range1, $src_range2)"}],[13095,{"text":"unless $hash = $$hash{$src2}"}],[13099,{"text":"if $src1 eq $dst2_str"}],[13105,{"text":"if ($obj2zone{$src1} || get_zone($src1)) eq ($obj2zone{$dst2} || get_zone($dst2))"}],[13110,{"text":"if $$rule2{'no_check_supernet_rules'}"}],[13120,{"text":"unless $smaller_prt"}],[13149,{"text":"if (my $other_rule = $$hash{$prt})"}],[13161,{"text":"unless $prt = $$prt{'up'}"}],[13145,{"text":"if (my $hash = $$hash{$dst})"}],[13165,{"text":"unless $dst = $$dst{'up'}"}],[13139,{"text":"if (my $hash = $$hash{$src})"}],[13169,{"text":"unless $src = $$src{'up'}"}],[13135,{"text":"if (my $hash = $$hash{$src_range})"}],[13172,{"text":"unless $src_range = $$src_range{'up'}"}],[13132,{"text":"if (my $hash = $$hash{$deny})"}],[13176,{"text":"if $deny"}],[13129,{"text":"if (my $hash = $rule_tree{$stateless})"}],[13180,{"text":"unless $stateless"}],[13190,{"text":"if ($smaller_src_range ne $prt_ip)"}],[13202,{"text":"if $new"}],[13231,{"text":"$$Netspoc::Compiler::Pass1::config{'check_transient_supernet_rules'} eq 'warn' ? :"}],[13212,{"text":"if ($missing_count)"}],[13295,{"text":"unless $$router{'model'}{'stateless'} or $$router{'managed'} =~ /^(?:secondary|local.*)$/"}],[13293,{"text":"if ($$router{'managed'})"}],[13298,{"text":"if $$router{'active_path'}"}],[13301,{"text":"if $out_interface eq $in_interface"}],[13303,{"text":"if $$next_zone{'stateful_mark'}"}],[13315,{"text":"if not $$_{'deleted'}"}],[13312,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_supernet_rules'} or $$Netspoc::Compiler::Pass1::config{'check_transient_supernet_rules'})"}],[13325,{"text":"unless ($$zone{'stateful_mark'})"}],[13330,{"text":"if $$rule{'deleted'}"}],[13331,{"text":"if $$rule{'no_check_supernet_rules'}"}],[13332,{"text":"if ($$rule{'src'}{'has_other_subnet'})"}],[13335,{"text":"if ($$rule{'dst'}{'has_other_subnet'})"}],[13320,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_supernet_rules'})"}],[13342,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_transient_supernet_rules'})"}],[13365,{"text":"if $$rule{'oneway'}"}],[13372,{"text":"unless $proto eq 'tcp' or $proto eq 'udp' or $proto eq 'ip'"}],[13379,{"text":"if $proto eq 'tcp' and $deny"}],[13382,{"text":"unless @new_prt_group"}],[13400,{"text":"unless $out_intf"}],[13405,{"text":"unless $$router{'managed'}"}],[13419,{"text":"if $use_nonlocal_exit"}],[13408,{"text":"if ($$model{'stateless'} or not $in_intf and $$model{'stateless_self'})"}],[13388,{"text":"unless (defined $has_stateless_router)"}],[13427,{"text":"unless $has_stateless_router"}],[13443,{"text":"if $tcp_seen"}],[13451,{"text":"if ($$new_src_range{'range'} eq $aref_tcp_any)"}],[13455,{"text":"unless ($new_prt)"}],[13440,{"text":"if ($proto eq 'tcp') { }"}],[13440,{"text":"elsif ($proto eq 'udp') { }"}],[13440,{"text":"elsif ($proto eq 'ip') { }"}],[13483,{"text":"if $src_range ne $prt_ip"}],[13484,{"text":"if $deny"}],[13529,{"text":"if ($type eq 'Network') { }"}],[13529,{"text":"elsif ($type eq 'Subnet') { }"}],[13529,{"text":"elsif ($type eq 'Interface') { }"}],[13551,{"text":"if $$in_interface{'main_interface'}"}],[13554,{"text":"unless $managed =~ /^(?:secondary|local.*)$/"}],[13553,{"text":"if (my $managed = $$router{'managed'})"}],[13556,{"text":"if $$router{'secondary_mark'}"}],[13559,{"text":"if $out_interface eq $in_interface"}],[13560,{"text":"if $$out_interface{'main_interface'}"}],[13562,{"text":"if $$next_zone{'secondary_mark'}"}],[13579,{"text":"if $$in_interface{'main_interface'}"}],[13582,{"text":"if $managed eq 'primary'"}],[13581,{"text":"if (my $managed = $$router{'managed'})"}],[13584,{"text":"if $$router{'primary_mark'}"}],[13587,{"text":"if $out_interface eq $in_interface"}],[13588,{"text":"if $$out_interface{'main_interface'}"}],[13590,{"text":"if $$next_zone{'primary_mark'}"}],[13607,{"text":"if $$in_interface{'main_interface'}"}],[13610,{"text":"if $managed ne 'local_secondary'"}],[13609,{"text":"if (my $managed = $$router{'managed'})"}],[13612,{"text":"if $$router{'local_secondary_mark'}"}],[13615,{"text":"if $out_interface eq $in_interface"}],[13616,{"text":"if $$out_interface{'main_interface'}"}],[13618,{"text":"if $$next_zone{'local_secondary_mark'}"}],[13628,{"text":"if ($type eq 'Zone') { }"}],[13628,{"text":"elsif ($type eq 'Interface') { }"}],[13641,{"text":"if (1 == @$src_zones and 1 == @$dst_zones)"}],[13651,{"text":"unless $$_{$mark}"}],[13652,{"text":"unless $$_{$mark}"}],[13663,{"text":"unless ($$zone{'secondary_mark'})"}],[13666,{"text":"unless ($$zone{'primary_mark'})"}],[13669,{"text":"unless ($$zone{'local_secondary_mark'})"}],[13686,{"text":"if (have_different_marks($src_zones, $dst_zones, 'secondary_mark')) { }"}],[13686,{"text":"elsif (have_set_and_equal_marks($src_zones, $dst_zones, 'local_mark') and have_different_marks($src_zones, $dst_zones, 'local_secondary_mark')) { }"}],[13695,{"text":"if (have_different_marks($src_zones, $dst_zones, 'primary_mark'))"}],[13721,{"text":"unless my $href = $$network{'nat'}"}],[13724,{"text":"unless $$nat_network{'dynamic'}"}],[13725,{"text":"if $$nat_network{'hidden'}"}],[13727,{"text":"if $$obj{'nat'} and $$obj{'nat'}{$nat_tag}"}],[13736,{"text":"unless my $dynamic_nets = $zone2dynamic{$zone}"}],[13740,{"text":"if $managed eq 'primary' or $managed eq 'full'"}],[13760,{"text":"unless my $href = $$network{'nat'}"}],[13763,{"text":"if $$nat_network{'dynamic'}"}],[13771,{"text":"unless my $nat_domain = $$network{'nat_domain'}"}],[13782,{"text":"if $$result{$key}"}],[13792,{"text":"$in_intf ? :"}],[13793,{"text":"$out_intf ? :"}],[13797,{"text":"unless $$no_nat_set1{$nat_tag}"}],[13795,{"text":"if ($no_nat_set1)"}],[13801,{"text":"unless $$no_nat_set2{$nat_tag}"}],[13799,{"text":"if ($no_nat_set2)"}],[13814,{"text":"if $$rule{'deleted'}"}],[13818,{"text":"unless my $nat_hash = $$network{'nat'}"}],[13819,{"text":"$where eq 'src' ? :"}],[13827,{"text":"$nat_domain ? :"}],[13831,{"text":"$$network{'has_dynamic_host'} ? :"}],[13832,{"text":"if $seen{$cache_obj}{$no_nat_set}++"}],[13838,{"text":"if $$no_nat_set{$nat_tag}"}],[13844,{"text":"unless $hidden_seen++"}],[13843,{"text":"if ($$nat_network{'hidden'})"}],[13849,{"text":"unless ($$nat_network{'dynamic'})"}],[13862,{"text":"if $obj eq $network"}],[13865,{"text":"if $$obj{'nat'}{$nat_tag}"}],[13877,{"text":"unless $nat_tag"}],[13878,{"text":"if $$obj{'nat'}{$nat_tag}"}],[13879,{"text":"$where eq 'src' ? :"}],[13885,{"text":"$reversed ? :"}],[13883,{"text":"if (not $intf or zone_eq($$network{'zone'}, $$intf{'zone'}))"}],[13902,{"text":"if ($proto eq 'udp' or $proto eq 'ip')"}],[13894,{"text":"if ($$router{'model'}{'stateless'})"}],[13909,{"text":"unless $nat_seen"}],[13911,{"text":"if $hidden_seen"}],[13923,{"text":"unless $$nat_network{'dynamic'}"}],[13926,{"text":"unless $dyn_nat_hash"}],[13933,{"text":"unless ($active_nat_at)"}],[13941,{"text":"unless my $interfaces = $$active_nat_at{$nat_tag}"}],[13943,{"text":"unless $is_hidden or $static_seen"}],[13946,{"text":"$is_hidden ? :"}],[13947,{"text":"$where eq 'dst' ? :"}],[14039,{"text":"if ($cmp_rule ne $chg_rule and $cmp_log eq $chg_log)"}],[14025,{"text":"if (my $cmp_rule = $$cmp_hash{$prt})"}],[14065,{"text":"unless $prt = $$prt{'up'}"}],[14001,{"text":"if (my $cmp_hash = $$cmp_hash{$dst})"}],[14072,{"text":"unless $dst = $$dst{'up'}"}],[13991,{"text":"if (my $cmp_hash = $$cmp_hash{$src})"}],[14077,{"text":"unless $src = $$src{'up'}"}],[13984,{"text":"if (my $cmp_hash = $$cmp_hash{$src_range})"}],[14081,{"text":"unless $src_range = $$src_range{'up'}"}],[13978,{"text":"if (my $cmp_hash = $$cmp_hash{$deny})"}],[14085,{"text":"if $deny"}],[13975,{"text":"if (my $cmp_hash = $$cmp_hash{$stateless})"}],[14090,{"text":"unless $stateless"}],[14165,{"text":"unless $$href{$key}"}],[14174,{"text":"if ($is_new)"}],[14200,{"text":"unless @$rules"}],[14211,{"text":"if $$rule{'deleted'}"}],[14243,{"text":"if (grep {$path0 ne ($obj2path{$_} || get_path($_));} @$group) { }"}],[14286,{"text":"unless $out_intf"}],[14289,{"text":"unless $in_intf"}],[14292,{"text":"unless $$router{'managed'}"}],[14294,{"text":"unless $$model{'has_interface_level'}"}],[14320,{"text":"if ($$in_hw{'level'} > $$out_hw{'level'})"}],[14328,{"text":"unless my $nat_info = $$dst{'nat'}"}],[14329,{"text":"unless grep {$$nat_info{$_};} @$nat_tags"}],[14314,{"text":"if ($identity_nat) { }"}],[14314,{"text":"elsif (my $nat_tags = $$in_hw{'bind_nat'}) { }"}],[14339,{"text":"unless my $nat_tags = $$out_hw{'bind_nat'}"}],[14341,{"text":"unless my $nat_info = $$src{'nat'}"}],[14346,{"text":"unless $$nat_info{$_}"}],[14346,{"text":"unless my($nat_net) = map({() unless $$nat_info{$_};} @$nat_tags)"}],[14357,{"text":"if ($$nat_net{'dynamic'} and $$in_hw{'level'} < $$out_hw{'level'})"}],[14351,{"text":"if ($identity_nat)"}],[14371,{"text":"if ($$obj{'is_aggregate'}) { }"}],[14370,{"text":"if ($type eq 'Network') { }"}],[14370,{"text":"elsif ($type eq 'Subnet' or $type eq 'Interface') { }"}],[14391,{"text":"if fast_mode()"}],[14400,{"text":"unless ($info)"}],[14407,{"text":"if ($$info{'nat_path'})"}],[14417,{"text":"unless my $nat_path = $$info{'nat_path'}"}],[14449,{"text":"if ($$obj{'is_aggregate'}) { }"}],[14449,{"text":"elsif (my $max = $$obj{'max_routing_net'}) { }"}],[14461,{"text":"if (my $max = $$net{'max_routing_net'}) { }"}],[14448,{"text":"if ($type eq 'Network') { }"}],[14448,{"text":"elsif ($type eq 'Subnet' or $type eq 'Interface') { }"}],[14495,{"text":"if $$in_interface{'main_interface'}"}],[14497,{"text":"if $border_networks{$network}"}],[14502,{"text":"if $$out_interface{'zone'}"}],[14503,{"text":"if $$out_interface{'main_interface'}"}],[14507,{"text":"unless keys %hop_interfaces"}],[14516,{"text":"if $$router{'active_path'}"}],[14521,{"text":"if $$interface{'main_interface'}"}],[14524,{"text":"if ($hop_interfaces{$interface})"}],[14530,{"text":"if $interface eq $in_intf"}],[14534,{"text":"if $$cluster{$network}"}],[14539,{"text":"if $out_intf eq $interface"}],[14540,{"text":"if $$out_intf{'main_interface'}"}],[14548,{"text":"if $hop2cluster{$interface}"}],[14561,{"text":"if $hop2networks{$hop}"}],[14570,{"text":"if $border eq $in_border"}],[14575,{"text":"unless $hop_interfaces{$out_hop}"}],[14576,{"text":"if $hop2cluster{$out_hop} eq $cluster"}],[14597,{"text":"if $$interface{'main_interface'}"}],[14598,{"text":"if ($$interface{'zone'}) { }"}],[14607,{"text":"if (1 == @hop_intf or is_redundany_group(\\@hop_intf))"}],[14628,{"text":"if $network eq $border"}],[14650,{"text":"if $$in_intf{'routing'}"}],[14657,{"text":"if ($in_net eq $out_net) { }"}],[14687,{"text":"if $$interface{'routing'}"}],[14693,{"text":"if $network eq $intf_net"}],[14694,{"text":"unless my $hops = $$route_in_zone{'default'} || $$route_in_zone{$network}"}],[14728,{"text":"if ($in_intf and $out_intf) { }"}],[14728,{"text":"elsif (not $in_intf) { }"}],[14764,{"text":"$what eq 'src' ? :"}],[14759,{"text":"if ($src_zone eq $dst_zone and $is_intf)"}],[14784,{"text":"$is_intf eq 'dst' ? :"}],[14784,{"text":"$is_intf eq 'src' ? :"}],[14776,{"text":"if ($pseudo_rule = $$routing_tree{$src_zone}{$dst_zone}) { }"}],[14776,{"text":"elsif ($pseudo_rule = $$routing_tree{$dst_zone}{$src_zone}) { }"}],[14814,{"text":"$what eq 'src' ? :"}],[14818,{"text":"unless $$router{'managed'} or $$router{'routing_only'}"}],[14821,{"text":"$what eq 'src' ? :"}],[14812,{"text":"if ($is_intf)"}],[14851,{"text":"if (is_zone($dst_path)) { }"}],[14848,{"text":"if (is_zone($src_path)) { }"}],[14848,{"text":"elsif (is_zone($dst_path)) { }"}],[14928,{"text":"if $$src_intf{'router'} eq $$entry{'router'}"}],[14930,{"text":"if (grep {$$_{'router'} eq $$entry{'router'};} @$redun_intf)"}],[14929,{"text":"if (my $redun_intf = $$src_intf{'redundancy_interfaces'})"}],[14953,{"text":"if $$dst_intf{'router'} eq $$exit{'router'}"}],[14955,{"text":"if (grep {$$_{'router'} eq $$exit{'router'};} @$redun_intf)"}],[14954,{"text":"if (my $redun_intf = $$dst_intf{'redundancy_interfaces'})"}],[15012,{"text":"if $interface eq $hop"}],[15017,{"text":"if ($$hop2{'ip'} eq 'bridge') { }"}],[15016,{"text":"if ($network eq $network2)"}],[15037,{"text":"unless $$interface{'network'}{'bridged'}"}],[15039,{"text":"if $$hop{'ip'} ne 'bridged'"}],[15057,{"text":"unless $$interface{'ip'} eq 'tunnel'"}],[15061,{"text":"if $$real_intf{'routing'}"}],[15072,{"text":"if (not $$real_peer{'ip'} =~ /^(?:short|negotiated)$/) { }"}],[15090,{"text":"unless my $hops = $$route_in_zone{'default'} || $$route_in_zone{$peer_net}"}],[15108,{"text":"unless $in_intf"}],[15109,{"text":"unless $in_intf eq $real_intf"}],[15110,{"text":"unless $out_intf"}],[15111,{"text":"unless $$out_intf{'network'}"}],[15123,{"text":"unless my $hops = $$route_in_zone{'default'} || $$route_in_zone{$hop_net}"}],[15119,{"text":"if ($hop_net eq $real_net) { }"}],[15071,{"text":"if ($real_net eq $peer_net) { }"}],[15071,{"text":"elsif ($$real_net{'zone'} eq $$peer_net{'zone'}) { }"}],[15135,{"text":"unless $$_{'redundancy_interfaces'}"}],[15135,{"text":"if (@hops > 1 and equal(map({$_ unless $$_{'redundancy_interfaces'};} @hops)) or @hops == 1) { }"}],[15171,{"text":"if ($peer_net ne $real_net)"}],[15191,{"text":"if $$interface{'loop'} and $$interface{'routing'}"}],[15192,{"text":"if $$interface{'ip'} eq 'bridged'"}],[15203,{"text":"unless ($$interface{'routing'} or $$interface2{'routing'})"}],[15198,{"text":"if ($interface2 ne $interface)"}],[15197,{"text":"if (my $interface2 = $net2intf{$network}) { }"}],[15219,{"text":"if ($group)"}],[15228,{"text":"if ($group and $group2 and $group eq $group2) { }"}],[15222,{"text":"if (my $hop2 = $net2hop{$network}) { }"}],[15217,{"text":"unless ($$interface{'routing'})"}],[15252,{"text":"if @$hops == @{$$hop1{'redundancy_interfaces'};}"}],[15258,{"text":"if (@$hops == 1 and my $phys_hop = $$hop1{'orig_main'}) { }"}],[15293,{"text":"$$router{'vrf_members'} ? :"}],[15312,{"text":"if $$interface{'ip'} eq 'bridged'"}],[15313,{"text":"if ($$interface{'routing'})"}],[15321,{"text":"if ($$interface{'hub'} and $crypto_type eq 'ASA')"}],[15334,{"text":"if $$nat_network{'hidden'}"}],[15336,{"text":"if ($ip == 0 and $mask == 0)"}],[15346,{"text":"unless @interfaces"}],[15369,{"text":"unless my $ip2net = $mask2ip2net{$m}"}],[15370,{"text":"unless my $big = $mask2ip2net{$m}{$i}"}],[15374,{"text":"if ($net2hop_info{$big} eq $hop_info)"}],[15358,{"text":"unless ($$interface{'hub'} and $crypto_type eq 'ASA')"}],[15407,{"text":"unless $intf2hop2nets{$interface}{$hop}"}],[15409,{"text":"if ($count > $max)"}],[15416,{"text":"if ($max_intf and $max_hop)"}],[15396,{"text":"if ($do_auto_default_route)"}],[15431,{"text":"$vrf ? :"}],[15431,{"text":"if $type eq 'IOS'"}],[15439,{"text":"$$interface{'ip'} =~ /^(?:unnumbered|negotiated|tunnel)$/ ? :"}],[15450,{"text":"if ($vrf and not $nxos_prefix)"}],[15445,{"text":"if ($type eq 'IOS') { }"}],[15445,{"text":"elsif ($type eq 'NX-OS') { }"}],[15445,{"text":"elsif ($type eq 'PIX') { }"}],[15445,{"text":"elsif ($type eq 'iproute') { }"}],[15445,{"text":"elsif ($type eq 'none') { }"}],[15494,{"text":"unless my $src_nat = $$in_hw{'src_nat'}"}],[15499,{"text":"unless my $net_hash = $$src_nat{$out_hw}"}],[15504,{"text":"unless $$a{'ip'} <=> $$b{'ip'} or $$a{'mask'} <=> $$b{'mask'}"}],[15527,{"text":"if $in_hidden or $out_hidden"}],[15531,{"text":"if ($out_dynamic and $in_dynamic and $out_dynamic eq $in_dynamic)"}],[15545,{"text":"if (my $out_host_ip = $$host{'nat'}{$out_dynamic})"}],[15539,{"text":"if ($out_dynamic) { }"}],[15593,{"text":"if $global_index and $nat_index"}],[15611,{"text":"$out_ip == $max ? :"}],[15602,{"text":"if ($out_ip == $out_intf_ip and $out_mask == 4294967295) { }"}],[15596,{"text":"unless ($global_index)"}],[15625,{"text":"if $$in_hw{'level'} < $$out_hw{'level'}"}],[15620,{"text":"if (not $nat_index)"}],[15640,{"text":"if ($$in_hw{'level'} > $$out_hw{'level'} or $$in_hw{'need_identity_nat'} or $in_ip != $out_ip)"}],[15657,{"text":"unless $$in_hw{'need_nat_0'}"}],[15667,{"text":"unless my $src_nat = $$in_hw{'src_nat'}"}],[15672,{"text":"unless my $net_hash = $$src_nat{$out_hw}"}],[15679,{"text":"unless my $identical = $$network{'is_identical'}"}],[15682,{"text":"if ($in and $out and $in eq $out)"}],[15699,{"text":"if ($$net_hash{$net} and $net2 = $$network{'is_in'}{$in_nat} and $$net_hash{$net2}) { }"}],[15721,{"text":"unless $$model{'has_interface_level'}"}],[15740,{"text":"unless $in_intf"}],[15742,{"text":"unless my $managed = $$router{'managed'}"}],[15751,{"text":"unless ($$model{'stateless'} or not $out_intf and $$model{'stateless_self'})"}],[15750,{"text":"if ($$rule{'stateless'})"}],[15762,{"text":"if $$rule{'stateless_icmp'} and not $$model{'stateless_icmp'}"}],[15765,{"text":"if $$in_intf{'loopback'}"}],[15776,{"text":"unless my $filter_at = $$net{'filter_at'}"}],[15781,{"text":"unless my(@matching_src) = grep({&$match($_);} @$src_list)"}],[15782,{"text":"unless my(@matching_dst) = grep({&$match($_);} @$dst_list)"}],[15788,{"text":"if (@$src_list != @matching_src)"}],[15791,{"text":"if (@$dst_list != @matching_dst)"}],[15771,{"text":"if (my $mark = $$router{'local_mark'})"}],[15802,{"text":"if $$model{'filter'} eq 'PIX'"}],[15808,{"text":"unless ($$in_intf{'hardware'}{'no_in_acl'})"}],[15799,{"text":"if (not $out_intf) { }"}],[15799,{"text":"elsif ($$out_intf{'hardware'}{'need_out_acl'}) { }"}],[15827,{"text":"unless my $id = $$src{'id'}"}],[15832,{"text":"unless $$src{'has_id_hosts'}"}],[15826,{"text":"if (is_subnet($src)) { }"}],[15826,{"text":"elsif (is_network($src)) { }"}],[15849,{"text":"if (@$src_list != @$id_src_list)"}],[15822,{"text":"if (my $id2rules = $$in_intf{'id_rules'})"}],[15856,{"text":"if ($$router{'no_crypto_filter'})"}],[15861,{"text":"unless ($$in_intf{'id_rules'})"}],[15816,{"text":"if ($$in_intf{'ip'} eq 'tunnel') { }"}],[15816,{"text":"elsif ($key eq 'out_rules') { }"}],[15816,{"text":"elsif ($key eq 'rules' and $$model{'has_io_acl'}) { }"}],[15904,{"text":"if ($$hardware{'need_out_acl'})"}],[15897,{"text":"if ($has_io_acl) { }"}],[15890,{"text":"if ($$hardware{'crosslink'})"}],[15925,{"text":"if ($has_io_acl) { }"}],[15916,{"text":"if ($$interface{'reroute_permit'})"}],[15940,{"text":"if (my $dst_range = $$prt{'dst_range'})"}],[15938,{"text":"unless ($$routing{'name'} =~ /^(?:manual|dynamic)$/)"}],[15937,{"text":"if (my $routing = $$interface{'routing'})"}],[15974,{"text":"if (my $dst_range = $$prt{'dst_range'})"}],[15970,{"text":"if (my $type = $$interface{'redundancy_type'})"}],[15986,{"text":"if ($$interface{'dhcp_server'})"}],[16002,{"text":"$$_{'main_prt'} ? :"}],[16002,{"text":"ref $_ eq 'ARRAY' ? :"}],[16017,{"text":"unless my $general_permit = $$router{'general_permit'}"}],[16021,{"text":"if $$in_intf{'main_interface'}"}],[16027,{"text":"$id_rules ? :"}],[16036,{"text":"if $out_intf eq $in_intf"}],[16037,{"text":"if $$out_intf{'ip'} eq 'tunnel'"}],[16047,{"text":"if $out_intf eq $in_intf"}],[16059,{"text":"if ($$out_hw{'need_out_acl'})"}],[16052,{"text":"if ($need_protect)"}],[16064,{"text":"if $$out_intf{'main_interface'}"}],[16071,{"text":"if $$in_intf{'ip'} eq 'bridged'"}],[16025,{"text":"if ($$in_intf{'is_hub'}) { }"}],[16080,{"text":"if fast_mode()"}],[16115,{"text":"if ($$obj{'ip'} eq 'unnumbered') { }"}],[16125,{"text":"if (my $ip = $$obj{'nat'}{$nat_tag}) { }"}],[16124,{"text":"if (my $nat_tag = $$network{'dynamic'}) { }"}],[16144,{"text":"if ($$obj{'ip'} =~ /^(unnumbered|short)$/)"}],[16155,{"text":"if (my $ip = $$obj{'nat'}{$nat_tag}) { }"}],[16150,{"text":"if ($$obj{'ip'} eq 'negotiated') { }"}],[16150,{"text":"elsif (my $nat_tag = $$network{'dynamic'}) { }"}],[16112,{"text":"if ($type eq 'Network') { }"}],[16112,{"text":"elsif ($type eq 'Subnet') { }"}],[16112,{"text":"elsif ($type eq 'Interface') { }"}],[16112,{"text":"elsif ($type eq 'Objectgroup') { }"}],[16197,{"text":"$prefix_code == 32 ? :"}],[16225,{"text":"if $$rule{'deny'}"}],[16232,{"text":"if $$dst_network{'mask'} == 0"}],[16236,{"text":"unless $$a{'ip'} <=> $$b{'ip'}"}],[16293,{"text":"if $asa_vpn_attr_need_value{$key}"}],[16292,{"text":"if (defined $value)"}],[16304,{"text":"unless $$interface{'ip'} eq 'tunnel'"}],[16340,{"text":"if ($$split_tunnel_nets[$i] ne $$cached_nets[$i])"}],[16335,{"text":"if (my $href = $split_t_cache{@$split_tunnel_nets})"}],[16353,{"text":"if (@$split_tunnel_nets) { }"}],[16350,{"text":"unless ($acl_name)"}],[16322,{"text":"if (not defined $split_tunnel_policy) { }"}],[16322,{"text":"elsif ($split_tunnel_policy eq 'tunnelall') { }"}],[16322,{"text":"elsif ($split_tunnel_policy eq 'tunnelspecified') { }"}],[16407,{"text":"if (%$attributes)"}],[16416,{"text":"if $group_policy_name"}],[16427,{"text":"if ($id =~ /^@/)"}],[16445,{"text":"defined $value ? :"}],[16443,{"text":"if ($spec and $$spec{'tg_general'})"}],[16399,{"text":"if ($$src{'mask'} == 4294967295) { }"}],[16513,{"text":"unless my $id = $$interface{'peers'}[0]{'id'}"}],[16518,{"text":"if (keys %$attributes)"}],[16526,{"text":"if $group_policy_name"}],[16307,{"text":"if (my $hash = $$interface{'id_rules'}) { }"}],[16533,{"text":"if (keys %cert_group_map or keys %single_cert_map)"}],[16554,{"text":"if $$model{'filter'} ne 'iptables'"}],[16587,{"text":"if $$model{'filter'} ne 'iptables'"}],[16602,{"text":"if $$hardware{'loopback'}"}],[16652,{"text":"if $$hardware{'loopback'}"}],[16655,{"text":"if $$hardware{'name'} eq 'device' and $$model{'class'} eq 'ASA'"}],[16665,{"text":"if $suffix eq 'out' and not $$hardware{'need_out_acl'}"}],[16672,{"text":"unless @$rules != 1"}],[16669,{"text":"unless (grep {my $rules = $$hardware{$_} || [];\n$$rules[0] ne $permit_any_rule unless @$rules != 1;} 'rules', 'intf_rules')"}],[16668,{"text":"unless ($$model{'need_acl'})"}],[16695,{"text":"if ($$router{'need_protect'})"}],[16698,{"text":"if ($$hardware{'no_in_acl'}) { }"}],[16714,{"text":"if $$zone{'zone_cluster'}"}],[16727,{"text":"unless @redundant == @interfaces and equal(@redundant)"}],[16720,{"text":"if (@interfaces > 1)"}],[16732,{"text":"if ($intf_ok == @{$$hardware{'interfaces'};})"}],[16705,{"text":"if ($managed_local)"}],[16689,{"text":"if ($suffix eq 'in') { }"}],[16749,{"text":"if ($filter eq 'IOS' or $filter eq 'NX-OS') { }"}],[16749,{"text":"elsif ($filter eq 'ACE') { }"}],[16749,{"text":"elsif ($filter eq 'PIX') { }"}],[16779,{"text":"if ($filter eq 'iptables') { }"}],[16798,{"text":"unless @tunnel_intf == 1"}],[16803,{"text":"if $_ ne $wan_intf"}],[16844,{"text":"if $$tunnel_intf{'crypto'}{'detailed_crypto_acl'}"}],[16887,{"text":"$is_hub ? :"}],[16889,{"text":"$detailed ? :"}],[16891,{"text":"unless $is_hub"}],[16913,{"text":"if $$router{'no_crypto_filter'}"}],[16941,{"text":"if ($crypto_filter_name)"}],[16947,{"text":"if ($$isakmp{'ike_version'} == 2) { }"}],[16946,{"text":"if ($crypto_type eq 'ASA') { }"}],[16958,{"text":"if (my $pfs_group = $$ipsec{'pfs_group'})"}],[16965,{"text":"unless ($lifetime == 3600 and $crypto_type eq 'IOS')"}],[16962,{"text":"if (my $lifetime = $$ipsec{'lifetime'})"}],[16984,{"text":"if ($$isakmp{'ike_version'} == 2) { }"}],[16982,{"text":"if ($authentication eq 'rsasig') { }"}],[17045,{"text":"if ($crypto_type eq 'IOS') { }"}],[17045,{"text":"elsif ($crypto_type eq 'ASA') { }"}],[17054,{"text":"if ($crypto_type eq 'IOS') { }"}],[17054,{"text":"elsif ($crypto_type eq 'ASA') { }"}],[17081,{"text":"if (my $id = $$peer{'id'})"}],[17073,{"text":"if ($crypto_type eq 'ASA')"}],[17094,{"text":"unless $crypto_type eq 'ASA'"}],[17153,{"text":"unless @ipsec"}],[17161,{"text":"if ($crypto_type eq 'EZVPN')"}],[17169,{"text":"if ($crypto_type =~ /^ASA/)"}],[17174,{"text":"if ($crypto_type eq 'ASA_VPN')"}],[17181,{"text":"if ($crypto_type eq 'ASA_EZVPN')"}],[17185,{"text":"unless $crypto_type =~ /^(:?IOS|ASA)$/"}],[17192,{"text":"unless $crypto_type eq 'IOS'"}],[17202,{"text":"unless ($authentication eq 'rsa-sig')"}],[17208,{"text":"$crypto_type eq 'ASA' ? :"}],[17207,{"text":"if ($encryption =~ /^aes(\\d+)$/)"}],[17220,{"text":"unless ($lifetime == 86400)"}],[17237,{"text":"if (my $ah = $$ipsec{'ah'})"}],[17241,{"text":"if (not my $esp = $$ipsec{'esp_encryption'}) { }"}],[17241,{"text":"elsif ($esp =~ /^(aes|des|3des)$/) { }"}],[17241,{"text":"elsif ($esp =~ /^aes(192|256)$/) { }"}],[17251,{"text":"if (my $esp_ah = $$ipsec{'esp_authentication'})"}],[17260,{"text":"if (my $ah = $$ipsec{'ah'})"}],[17270,{"text":"$crypto_type eq 'ASA' ? :"}],[17263,{"text":"if (not my $esp = $$ipsec{'esp_encryption'}) { }"}],[17263,{"text":"elsif ($esp =~ /^(aes|des|3des)$/) { }"}],[17263,{"text":"elsif ($esp =~ /^aes(192|256)$/) { }"}],[17273,{"text":"if (my $esp_ah = $$ipsec{'esp_authentication'})"}],[17276,{"text":"$crypto_type eq 'ASA' ? :"}],[17235,{"text":"if ($crypto_type eq 'ASA' and $$isakmp{'ike_version'} == 2) { }"}],[17288,{"text":"unless $$interface{'ip'} eq 'tunnel'"}],[17290,{"text":"if ($ip =~ /^(?:negotiated|short|unnumbered)$/) { }"}],[17306,{"text":"if (my $interfaces = $hardware2crypto{$hardware})"}],[17311,{"text":"if (my $interfaces = $hardware2dyn_crypto{$hardware})"}],[17318,{"text":"unless $have_crypto_map"}],[17319,{"text":"if ($crypto_type eq 'IOS') { }"}],[17319,{"text":"elsif ($crypto_type eq 'ASA') { }"}],[17332,{"text":"unless $$model{'print_interface'}"}],[17337,{"text":"if $name eq 'VIP' and $$model{'has_vip'}"}],[17356,{"text":"if $secondary"}],[17362,{"text":"if $secondary"}],[17343,{"text":"if ($ip eq 'tunnel') { }"}],[17343,{"text":"elsif ($ip eq 'unnumbered') { }"}],[17343,{"text":"elsif ($ip eq 'negotiated') { }"}],[17343,{"text":"elsif ($$model{'use_prefix'}) { }"}],[17368,{"text":"if ($class eq 'NX-OS') { }"}],[17367,{"text":"if (my $vrf = $$router{'vrf'})"}],[17379,{"text":"if ($class eq 'IOS' and $stateful and not $$hardware{'loopback'})"}],[17382,{"text":"if (my $other = $$hardware{'subcmd'})"}],[17387,{"text":"if $class eq 'ACE'"}],[17408,{"text":"if (my $result = $prt2code{$prt})"}],[17416,{"text":"if $$prt{'established'}"}],[17419,{"text":"if (defined(my $type = $$prt{'type'}))"}],[17422,{"text":"if (defined(my $code = $$prt{'code'}))"}],[17414,{"text":"if ($proto eq 'tcp' or $proto eq 'udp') { }"}],[17414,{"text":"elsif ($proto eq 'icmp') { }"}],[17463,{"text":"if ($$model{'has_vip'})"}],[17458,{"text":"unless ($need_protect)"}],[17445,{"text":"if ($$router{'need_protect'} or $$router{'crosslink_interfaces'})"}],[17469,{"text":"unless my $aref = delete $$router{'acl_list'}"}],[17483,{"text":"if ($need_protect and delete $$acl{'protect_self'})"}],[17493,{"text":"unless my $rules = $$acl{$what}"}],[17498,{"text":"if $deny"}],[17509,{"text":"if ($normalized eq ':subst') { }"}],[17506,{"text":"if (my $modifier = $$active_log{$tag}) { }"}],[17505,{"text":"if (exists $$active_log{$tag})"}],[17503,{"text":"if ($active_log and my $log = $$rule{'log'})"}],[17525,{"text":"if ($log_code) { }"}],[17525,{"text":"elsif ($$router{'log_deny'} and $deny) { }"}],[17551,{"text":"if $$obj{'id'}"}],[17550,{"text":"if ($type eq 'Subnet')"}],[17556,{"text":"if ($$obj{'has_id_hosts'})"}],[17546,{"text":"if ($do_auth)"}],[17565,{"text":"if $$net{'has_other_subnet'}"}],[17569,{"text":"if ($$no_opt{$net})"}],[17566,{"text":"if (my $no_opt = $$router{'no_secondary_opt'})"}],[17575,{"text":"if (my $max = $$subst{'max_secondary_net'})"}],[17580,{"text":"if $$subst{'mask'} == 4294967295"}],[17590,{"text":"if ($$obj{'has_other_subnet'})"}],[17595,{"text":"unless my $max = $$obj{'max_secondary_net'}"}],[17563,{"text":"if ($type eq 'Subnet' or $type eq 'Interface') { }"}],[17532,{"text":"if ($secondary_filter and $$rule{'some_non_secondary'} or $standard_filter and $$rule{'some_primary'})"}],[17609,{"text":"if (my $src_range = $$rule{'src_range'})"}],[17628,{"text":"if (values %opt_addr)"}],[17634,{"text":"if (values %no_opt_addrs)"}],[17648,{"text":"if (my $filter_only = $$router{'filter_only'})"}],[17654,{"text":"unless ($$router{'no_group_code'})"}],[17653,{"text":"if ($$model{'can_objectgroup'})"}],[17659,{"text":"if ($$router{'log_deny'})"}],[17671,{"text":"unless mkdir $dir"}],[17675,{"text":"unless -d $dir"}],[17686,{"text":"unless mkdir $prev"}],[17688,{"text":"unless system('mv', @old_files, $prev) == 0"}],[17680,{"text":"if (my $count = @old_files)"}],[17678,{"text":"unless (-d $prev)"}],[17670,{"text":"if (not -e $dir) { }"}],[17708,{"text":"if $seen{$router}"}],[17711,{"text":"if $$router{'orig_router'}"}],[17724,{"text":"unless open my $code_fd, '>', $config_file"}],[17732,{"text":"if (my $orig_interfaces = $$router{'orig_interfaces'})"}],[17739,{"text":"if (my $members = $$router{'vrf_members'}) { }"}],[17752,{"text":"$ips ? :"}],[17754,{"text":"if (@ips)"}],[17749,{"text":"if ($$router{'policy_distribution_point'})"}],[17764,{"text":"if ($$router{'managed'}) { }"}],[17779,{"text":"unless close $code_fd"}],[17785,{"text":"unless open my $acl_fd, '>', $acl_file"}],[17788,{"text":"unless close $acl_fd"}],[17796,{"text":"unless defined $in_path and -d $in_path"}],[17797,{"text":"unless defined $out_dir"}],[17807,{"text":"unless -d $raw_dir"}],[17817,{"text":"unless opendir my $dh, $raw_dir"}],[17819,{"text":"if $file =~ /^\\./"}],[17820,{"text":"if $file =~ /$$Netspoc::Compiler::Pass1::config{'ignore_files'}/o"}],[17825,{"text":"unless (-f $raw_path)"}],[17829,{"text":"unless ($device_names{$file})"}],[17834,{"text":"unless system(\"cp -f $raw_path $copy\") == 0"}],[18056,{"text":"if ($out_dir)"}]],"subroutine":[[29,"BEGIN"],[30,"BEGIN"],[31,"BEGIN"],[32,"BEGIN"],[33,"BEGIN"],[34,"BEGIN"],[35,"BEGIN"],[42,"BEGIN"],[3866,"BEGIN"],[13418,"BEGIN"],[145,"store_description"],[157,"fast_mode"],[307,"equal"],[315,"unique"],[320,"find_duplicates"],[326,"intersect"],[332,"max"],[342,"aref_delete"],[356,"aref_eq"],[365,"keys_eq"],[374,"warn_msg"],[396,"context"],[409,"at_line"],[416,"check_abort"],[426,"abort_on_error"],[431,"set_abort_immediately"],[436,"error_atline"],[443,"err_msg"],[450,"syntax_err"],[455,"internal_err"],[479,"skip_space_and_comment"],[493,"check"],[501,"skip"],[507,"check_int"],[517,"read_int"],[524,"check_ip"],[537,"read_ip"],[545,"read_ip_prefix"],[557,"read_ip_prefix_pair"],[562,"gen_ip"],[569,"print_ip"],[574,"read_identifier"],[585,"read_owner_pattern"],[596,"read_name"],[607,"read_string"],[621,"read_union"],[650,"check_typed_name"],[677,"read_typed_name"],[706,"read_extended_name"],[775,"read_user_id"],[786,"check_hostname"],[802,"read_complement"],[811,"read_intersection"],[833,"read_time_val"],[840,"add_description"],[856,"check_permit_deny"],[866,"check_nat_name"],[876,"split_typed_name"],[883,"check_flag"],[894,"check_assign"],[912,"read_list"],[928,"read_list_or_null"],[934,"read_assign_list"],[941,"check_assign_list"],[950,"check_assign_pair"],[971,"new"],[977,"add_attribute"],[986,"check_radius_attributes"],[1001,"check_routing"],[1008,"check_managed"],[1038,"check_model"],[1069,"host_as_interface"],[1110,"read_host"],[1221,"read_nat"],[1278,"read_network"],[1495,"read_interface"],[1797,"set_pix_interface_level"],[1841,"check_no_in_acl"],[1897,"read_router"],[2447,"move_locked_interfaces"],[2497,"read_aggregate"],[2547,"check_router_attributes"],[2582,"read_area"],[2646,"read_group"],[2659,"read_protocolgroup"],[2666,"read_port_range"],[2696,"read_port_ranges"],[2711,"read_icmp_type_code"],[2739,"read_proto_nr"],[2767,"gen_protocol_name"],[2775,"__ANON__"],[2813,"cache_anonymous_protocol"],[2827,"read_simple_protocol"],[2864,"check_protocol_flags"],[2883,"read_typed_name_or_simple_protocol"],[2887,"read_protocol"],[2898,"assign_union_allow_user"],[2908,"read_service"],[2992,"read_pathrestriction"],[3003,"read_attributed_object"],[3081,"read_isakmp"],[3119,"read_ipsec"],[3126,"read_crypto"],[3153,"read_owner"],[3218,"read_netspoc"],[3239,"read_file"],[3268,"read_file_or_dir"],[3280,"__ANON__"],[3298,"__ANON__"],[3334,"show_read_statistics"],[3349,"is_network"],[3350,"is_router"],[3351,"is_interface"],[3352,"is_host"],[3353,"is_subnet"],[3354,"is_area"],[3355,"is_zone"],[3356,"is_group"],[3357,"is_protocolgroup"],[3358,"is_objectgroup"],[3359,"is_chain"],[3360,"is_autointerface"],[3365,"print_rule"],[3398,"prepare_prt_ordering"],[3460,"order_icmp"],[3486,"order_proto"],[3503,"order_ranges"],[3520,"__ANON__"],[3652,"expand_splitted_protocol"],[3707,"order_protocols"],[3756,"link_to_owner"],[3772,"link_to_real_owner"],[3791,"expand_watchers"],[3835,"link_owners"],[3927,"link_policy_distribution_point"],[3952,"link_general_permit"],[3998,"link_areas"],[4058,"link_interfaces"],[4113,"check_interface_ip"],[4175,"link_routers"],[4184,"link_subnet"],[4187,"__ANON__"],[4238,"link_subnets"],[4253,"add_pathrestriction"],[4267,"link_pathrestrictions"],[4366,"link_virtual_interfaces"],[4485,"is_redundany_group"],[4493,"check_ip_addresses"],[4593,"link_topology"],[4622,"disable_behind"],[4675,"check_bridged_networks"],[4738,"mark_disabled"],[4884,"split_ip_range"],[4900,"convert_hosts"],[5110,"combine_subnets"],[5163,"get_intf"],[5178,"get_auto_intf"],[5218,"check_auto_intf"],[5283,"expand_group1"],[5524,"__ANON__"],[5541,"__ANON__"],[5781,"remove_duplicates"],[5800,"expand_group"],[5819,"expand_group_in_rule"],[5914,"__ANON__"],[5921,"check_unused_groups"],[5945,"expand_protocols"],[6006,"split_protocols"],[6064,"add_rules"],[6094,"get_zone"],[6140,"expand_special"],[6220,"add_managed_hosts"],[6242,"collect_unenforceable"],[6307,"show_unenforceable"],[6348,"warn_useless_unenforceable"],[6359,"show_deleted_rules1"],[6414,"collect_redundant_rules"],[6453,"show_deleted_rules2"],[6494,"warn_unused_overlaps"],[6514,"collect_log"],[6524,"check_log"],[6538,"normalize_log"],[6549,"expand_rules"],[6690,"print_rulecount"],[6699,"expand_services"],[6767,"set_policy_distribution_ip"],[6781,"__ANON__"],[6907,"propagate_owners"],[6980,"__ANON__"],[7005,"__ANON__"],[7020,"__ANON__"],[7050,"__ANON__"],[7225,"expand_auto_intf"],[7245,"show_unknown_owners"],[7269,"set_service_owner"],[7359,"__ANON__"],[7405,"set_natdomain"],[7411,"__ANON__"],[7481,"distribute_nat1"],[7627,"distribute_nat"],[7639,"distribute_nat_info"],[7689,"__ANON__"],[7933,"invert_nat_set"],[7936,"__ANON__"],[8006,"adjust_crypto_nat"],[8034,"get_nat_network"],[8052,"check_subnets"],[8056,"__ANON__"],[8098,"nat_to_loopback_ok"],[8125,"by_name"],[8132,"find_subnets_in_zone"],[8294,"__ANON__"],[8324,"__ANON__"],[8399,"find_subnets_in_nat_domain"],[8623,"cluster_crosslink_routers"],[8630,"__ANON__"],[8677,"check_crosslink"],[8780,"get_managed_local_clusters"],[8795,"__ANON__"],[8813,"__ANON__"],[8902,"mark_managed_local"],[8909,"__ANON__"],[8956,"link_reroute_permit"],[8992,"add_managed_hosts_to_aggregate"],[9037,"link_aggregate_to_zone"],[9070,"link_implicit_aggregate_to_zone"],[9079,"__ANON__"],[9146,"link_aggregates"],[9240,"duplicate_aggregate_to_cluster"],[9277,"get_any"],[9333,"get_cluster_aggregates"],[9346,"set_zone1"],[9419,"set_zone_cluster"],[9464,"zone_eq"],[9478,"set_area1"],[9546,"inherit_router_attributes"],[9587,"nat_equal"],[9605,"check_useless_nat"],[9622,"inherit_area_nat"],[9655,"inherit_attributes_from_area"],[9668,"inherit_nat_to_subnets_in_zone"],[9730,"inherit_nat_in_zone"],[9757,"cleanup_after_inheritance"],[9775,"inherit_attributes"],[9786,"set_zones"],[9828,"cluster_zones"],[9849,"prepare_area_borders"],[9877,"set_area"],[9902,"set_areas"],[9960,"find_area_subset_relations"],[10022,"check_routers_in_nested_areas"],[10073,"clean_areas"],[10086,"set_zone"],[10107,"check_virtual_interfaces"],[10152,"check_pathrestrictions"],[10281,"traverse_loop_part"],[10324,"apply_pathrestriction_optimization"],[10388,"optimize_pathrestrictions"],[10455,"setpath_obj"],[10552,"set_loop_cluster"],[10585,"find_dists_and_loops"],[10612,"process_loops"],[10650,"setpath"],[10673,"get_path"],[10752,"cluster_path_mark1"],[10925,"cluster_navigation"],[11002,"cluster_path_mark"],[11363,"path_mark"],[11491,"loop_path_walk"],[11557,"path_walk"],[11688,"single_path_walk"],[11699,"set_auto_intf_from_border"],[11703,"__ANON__"],[11742,"path_auto_interfaces"],[11827,"link_ipsec"],[11845,"link_crypto"],[11866,"gen_tunnel_rules"],[11899,"link_tunnels"],[12080,"crypto_behind"],[12124,"verify_asa_vpn_attributes"],[12156,"verify_subject_name"],[12160,"__ANON__"],[12179,"verify_asa_trustpoint"],[12192,"expand_crypto"],[12448,"setup_ref2obj"],[12502,"collect_supernet_dst_rules"],[12533,"find_supernet"],[12559,"find_zone_network"],[12612,"find_matching_supernet"],[12653,"check_supernet_in_zone"],[12737,"check_supernet_src_rule"],[12892,"check_supernet_dst_rule"],[12968,"check_supernet_dst_collections"],[13006,"find_smaller_prt"],[13060,"check_for_transient_supernet_rule"],[13289,"mark_stateful"],[13311,"check_supernet_rules"],[13361,"gen_reverse_rules1"],[13395,"__ANON__"],[13495,"gen_reverse_rules"],[13527,"get_zone2"],[13546,"mark_secondary"],[13576,"mark_primary"],[13602,"mark_local_secondary"],[13626,"get_zones"],[13640,"have_different_marks"],[13650,"have_set_and_equal_marks"],[13657,"mark_secondary_rules"],[13703,"get_zone_cluster_borders"],[13718,"mark_dynamic_host_nets"],[13753,"check_dynamic_nat_rules"],[13791,"__ANON__"],[13868,"__ANON__"],[13972,"optimize_rules"],[14098,"optimize_and_warn_deleted"],[14116,"group_rules"],[14196,"group_path_rules"],[14283,"collect_nat_path"],[14302,"distribute_nat_to_device"],[14367,"add_networks"],[14391,"prepare_nat_commands"],[14444,"get_route_networks"],[14487,"set_routes_in_zone"],[14515,"__ANON__"],[14560,"__ANON__"],[14649,"add_path_routes"],[14686,"add_end_routes"],[14718,"get_route_path"],[14750,"generate_routing_tree1"],[14839,"generate_routing_tree"],[14898,"generate_routing_info"],[14979,"find_active_routes"],[15008,"fix_bridged_hops"],[15032,"check_and_convert_routes"],[15107,"__ANON__"],[15291,"print_header"],[15299,"print_routes"],[15487,"print_nat1"],[15569,"print_pix_static"],[15582,"__ANON__"],[15630,"__ANON__"],[15639,"__ANON__"],[15664,"optimize_nat_networks"],[15717,"print_nat"],[15733,"distribute_rule"],[15774,"__ANON__"],[15884,"add_router_acls"],[16001,"create_general_permit_rules"],[16016,"distribute_general_permit"],[16080,"rules_distribution"],[16110,"address"],[16183,"ios_route_code"],[16193,"prefix_code"],[16201,"full_prefix_code"],[16211,"print_acl_placeholder"],[16221,"get_split_tunnel_nets"],[16246,"print_asavpn"],[16286,"__ANON__"],[16552,"print_acl_prefix"],[16585,"print_acl_suffix"],[16598,"print_iptables_acls"],[16644,"print_cisco_acls"],[16774,"generate_acls"],[16789,"gen_crypto_rules"],[16794,"print_ezvpn"],[16880,"print_crypto_acl"],[16910,"print_crypto_filter_acl"],[16933,"print_crypto_map_attributes"],[16976,"print_tunnel_group"],[17002,"print_ca_and_tunnel_group_map"],[17013,"print_static_crypto_map"],[17091,"print_dynamic_crypto_map"],[17141,"print_crypto"],[17330,"print_interface"],[17400,"print_address"],[17407,"print_prt"],[17430,"print_acls"],[17669,"check_output_dir"],[17698,"print_code"],[17759,"__ANON__"],[17795,"copy_raw"],[17841,"show_version"],[17849,"init_protocols"],[17968,"init_global_vars"],[18000,"compile"]],"start":{"3119":{"read_ipsec":[{"statement":1286,"pod":90,"time":null,"branch":451,"condition":61,"subroutine":101}]},"3003":{"read_attributed_object":[{"time":null,"branch":442,"statement":1254,"pod":88,"subroutine":99,"condition":61}]},"16211":{"print_acl_placeholder":[{"condition":420,"subroutine":354,"pod":307,"statement":7031,"time":null,"branch":2052}]},"17430":{"print_acls":[{"branch":2169,"time":null,"statement":7655,"pod":328,"subroutine":376,"condition":438}]},"15299":{"print_routes":[{"time":null,"branch":1944,"pod":293,"statement":6600,"subroutine":336,"condition":394}]},"7936":{"__ANON__":[{"statement":3554,"pod":177,"time":null,"branch":1092,"condition":180,"subroutine":203}]},"2696":{"read_port_ranges":[{"statement":1100,"pod":76,"branch":390,"time":null,"condition":52,"subroutine":86}]},"14560":{"__ANON__":[{"time":null,"branch":1886,"statement":6333,"pod":283,"subroutine":324,"condition":376}]},"17013":{"print_static_crypto_map":[{"condition":431,"subroutine":370,"statement":7431,"pod":322,"branch":2112,"time":null}]},"8677":{"check_crosslink":[{"statement":3838,"pod":185,"branch":1171,"time":null,"condition":202,"subroutine":216}]},"10552":{"set_loop_cluster":[{"subroutine":259,"condition":236,"branch":1383,"time":null,"pod":224,"statement":4632}]},"1069":{"host_as_interface":[{"time":null,"branch":90,"pod":61,"statement":363,"subroutine":71,"condition":14}]},"3520":{"__ANON__":[{"statement":1518,"pod":114,"branch":521,"time":null,"condition":69,"subroutine":127}]},"7933":{"invert_nat_set":[{"condition":177,"subroutine":202,"pod":176,"statement":3512,"time":null,"branch":1087}]},"479":{"skip_space_and_comment":[{"condition":null,"subroutine":30,"statement":109,"pod":20,"time":null,"branch":15}]},"16183":{"ios_route_code":[{"statement":7016,"pod":304,"branch":2051,"time":null,"condition":420,"subroutine":351}]},"6064":{"add_rules":[{"subroutine":168,"condition":118,"branch":831,"time":null,"pod":150,"statement":2619}]},"9668":{"inherit_nat_to_subnets_in_zone":[{"branch":1290,"time":null,"pod":205,"statement":4281,"subroutine":240,"condition":226}]},"7359":{"__ANON__":[{"subroutine":195,"condition":171,"branch":1022,"time":null,"statement":3292,"pod":172}]},"15008":{"fix_bridged_hops":[{"branch":1912,"time":null,"pod":290,"statement":6469,"subroutine":332,"condition":384}]},"3866":{"BEGIN":[{"condition":null,"subroutine":8,"pod":null,"statement":24,"time":null,"branch":null}]},"15717":{"print_nat":[{"time":null,"branch":1987,"statement":6809,"pod":297,"subroutine":343,"condition":415}]},"4593":{"link_topology":[{"condition":85,"subroutine":148,"pod":133,"statement":1942,"time":null,"branch":632}]},"12559":{"find_zone_network":[{"subroutine":287,"condition":310,"branch":1611,"time":null,"statement":5394,"pod":250}]},"12080":{"crypto_behind":[{"condition":302,"subroutine":278,"statement":5198,"pod":242,"time":null,"branch":1550}]},"501":{"skip":[{"subroutine":32,"condition":1,"time":null,"branch":15,"pod":22,"statement":117}]},"16910":{"print_crypto_filter_acl":[{"subroutine":366,"condition":430,"time":null,"branch":2103,"pod":318,"statement":7384}]},"569":{"print_ip":[{"pod":30,"statement":146,"time":null,"branch":22,"condition":5,"subroutine":40}]},"14487":{"set_routes_in_zone":[{"branch":1865,"time":null,"statement":6252,"pod":282,"subroutine":322,"condition":375}]},"16880":{"print_crypto_acl":[{"condition":430,"subroutine":365,"statement":7368,"pod":317,"time":null,"branch":2100}]},"12156":{"verify_subject_name":[{"time":null,"branch":1562,"pod":244,"statement":5223,"subroutine":280,"condition":302}]},"17141":{"print_crypto":[{"subroutine":372,"condition":431,"time":null,"branch":2119,"pod":324,"statement":7493}]},"4253":{"add_pathrestriction":[{"condition":73,"subroutine":143,"statement":1774,"pod":128,"time":null,"branch":586}]},"17330":{"print_interface":[{"subroutine":373,"condition":433,"branch":2150,"time":null,"pod":325,"statement":7597}]},"971":{"new":[{"subroutine":65,"condition":13,"branch":75,"time":null,"statement":316,"pod":55}]},"16976":{"print_tunnel_group":[{"condition":431,"subroutine":368,"pod":320,"statement":7411,"time":null,"branch":2110}]},"928":{"read_list_or_null":[{"pod":51,"statement":295,"branch":72,"time":null,"condition":13,"subroutine":61}]},"2646":{"read_group":[{"subroutine":83,"condition":51,"time":null,"branch":380,"pod":73,"statement":1074}]},"3756":{"link_to_owner":[{"condition":69,"subroutine":130,"statement":1538,"pod":116,"time":null,"branch":524}]},"8132":{"find_subnets_in_zone":[{"condition":188,"subroutine":210,"statement":3620,"pod":182,"branch":1108,"time":null}]},"16201":{"full_prefix_code":[{"statement":7026,"pod":306,"branch":2052,"time":null,"condition":420,"subroutine":353}]},"8795":{"__ANON__":[{"condition":208,"subroutine":218,"pod":187,"statement":3949,"time":null,"branch":1199}]},"32":{"BEGIN":[{"subroutine":3,"condition":null,"branch":null,"time":null,"statement":9,"pod":null}]},"9828":{"cluster_zones":[{"branch":1306,"time":null,"pod":210,"statement":4343,"subroutine":245,"condition":229}]},"866":{"check_nat_name":[{"statement":264,"pod":46,"branch":65,"time":null,"condition":13,"subroutine":56}]},"3153":{"read_owner":[{"subroutine":103,"condition":61,"time":null,"branch":457,"statement":1303,"pod":92}]},"16794":{"print_ezvpn":[{"subroutine":364,"condition":430,"time":null,"branch":2097,"pod":316,"statement":7321}]},"7269":{"set_service_owner":[{"branch":1006,"time":null,"statement":3236,"pod":171,"subroutine":194,"condition":167}]},"2497":{"read_aggregate":[{"statement":999,"pod":70,"branch":346,"time":null,"condition":46,"subroutine":80}]},"6006":{"split_protocols":[{"branch":828,"time":null,"pod":149,"statement":2599,"subroutine":167,"condition":115}]},"16221":{"get_split_tunnel_nets":[{"branch":2052,"time":null,"statement":7033,"pod":308,"subroutine":355,"condition":420}]},"7225":{"expand_auto_intf":[{"time":null,"branch":1003,"statement":3216,"pod":169,"subroutine":192,"condition":166}]},"507":{"check_int":[{"condition":2,"subroutine":33,"pod":23,"statement":119,"branch":15,"time":null}]},"16286":{"__ANON__":[{"subroutine":357,"condition":424,"branch":2076,"time":null,"pod":310,"statement":7197}]},"6907":{"propagate_owners":[{"condition":157,"subroutine":187,"statement":3041,"pod":168,"branch":957,"time":null}]},"9079":{"__ANON__":[{"statement":4065,"pod":192,"branch":1222,"time":null,"condition":211,"subroutine":226}]},"7245":{"show_unknown_owners":[{"condition":166,"subroutine":193,"statement":3225,"pod":170,"branch":1004,"time":null}]},"2711":{"read_icmp_type_code":[{"condition":52,"subroutine":87,"pod":77,"statement":1108,"time":null,"branch":392}]},"493":{"check":[{"branch":15,"time":null,"pod":21,"statement":113,"subroutine":31,"condition":null}]},"7639":{"distribute_nat_info":[{"branch":1052,"time":null,"pod":175,"statement":3387,"subroutine":200,"condition":175}]},"17400":{"print_address":[{"statement":7639,"pod":326,"time":null,"branch":2163,"condition":436,"subroutine":374}]},"374":{"warn_msg":[{"condition":null,"subroutine":20,"statement":74,"pod":10,"time":null,"branch":9}]},"11899":{"link_tunnels":[{"condition":293,"subroutine":277,"pod":241,"statement":5107,"branch":1529,"time":null}]},"14839":{"generate_routing_tree":[{"condition":384,"subroutine":329,"statement":6401,"pod":287,"branch":1903,"time":null}]},"4187":{"__ANON__":[{"subroutine":141,"condition":73,"time":null,"branch":585,"pod":127,"statement":1766}]},"11491":{"loop_path_walk":[{"branch":1489,"time":null,"statement":4943,"pod":233,"subroutine":268,"condition":267}]},"15582":{"__ANON__":[{"pod":296,"statement":6780,"branch":1982,"time":null,"condition":411,"subroutine":339}]},"13418":{"BEGIN":[{"time":null,"branch":null,"pod":null,"statement":27,"subroutine":9,"condition":null}]},"8813":{"__ANON__":[{"subroutine":219,"condition":208,"branch":1199,"time":null,"statement":3949,"pod":187}]},"3081":{"read_isakmp":[{"condition":61,"subroutine":100,"pod":89,"statement":1284,"time":null,"branch":451}]},"6980":{"__ANON__":[{"pod":169,"statement":3216,"time":null,"branch":1003,"condition":166,"subroutine":188}]},"7020":{"__ANON__":[{"subroutine":190,"condition":166,"branch":1003,"time":null,"pod":169,"statement":3216}]},"15630":{"__ANON__":[{"subroutine":340,"condition":411,"branch":1982,"time":null,"pod":296,"statement":6780}]},"409":{"at_line":[{"time":null,"branch":10,"statement":82,"pod":12,"subroutine":22,"condition":null}]},"3772":{"link_to_real_owner":[{"branch":526,"time":null,"statement":1546,"pod":117,"subroutine":131,"condition":70}]},"8006":{"adjust_crypto_nat":[{"time":null,"branch":1092,"pod":177,"statement":3554,"subroutine":204,"condition":180}]},"9346":{"set_zone1":[{"condition":213,"subroutine":231,"statement":4149,"pod":196,"time":null,"branch":1245}]},"30":{"BEGIN":[{"time":null,"branch":null,"pod":null,"statement":3,"subroutine":1,"condition":null}]},"8399":{"find_subnets_in_nat_domain":[{"pod":183,"statement":3730,"time":null,"branch":1141,"condition":189,"subroutine":213}]},"8125":{"by_name":[{"subroutine":209,"condition":188,"branch":1108,"time":null,"pod":181,"statement":3619}]},"11363":{"path_mark":[{"time":null,"branch":1476,"statement":4907,"pod":232,"subroutine":267,"condition":265}]},"775":{"read_user_id":[{"pod":39,"statement":230,"branch":56,"time":null,"condition":13,"subroutine":49}]},"431":{"set_abort_immediately":[{"subroutine":25,"condition":null,"time":null,"branch":13,"statement":89,"pod":15}]},"3791":{"expand_watchers":[{"subroutine":132,"condition":70,"time":null,"branch":528,"statement":1552,"pod":118}]},"2547":{"check_router_attributes":[{"condition":46,"subroutine":81,"pod":71,"statement":1028,"time":null,"branch":358}]},"3356":{"is_group":[{"condition":64,"subroutine":117,"statement":1403,"pod":104,"branch":486,"time":null}]},"3835":{"link_owners":[{"condition":70,"subroutine":133,"pod":119,"statement":1579,"time":null,"branch":533}]},"3298":{"__ANON__":[{"branch":486,"time":null,"statement":1386,"pod":96,"subroutine":108,"condition":64}]},"9849":{"prepare_area_borders":[{"branch":1308,"time":null,"statement":4349,"pod":211,"subroutine":246,"condition":229}]},"11703":{"__ANON__":[{"condition":286,"subroutine":272,"statement":5037,"pod":237,"branch":1509,"time":null}]},"786":{"check_hostname":[{"condition":13,"subroutine":50,"statement":234,"pod":40,"time":null,"branch":57}]},"1897":{"read_router":[{"subroutine":78,"condition":27,"branch":253,"time":null,"pod":68,"statement":749}]},"13602":{"mark_local_secondary":[{"subroutine":303,"condition":342,"branch":1758,"time":null,"statement":5816,"pod":265}]},"436":{"error_atline":[{"time":null,"branch":13,"pod":16,"statement":91,"subroutine":26,"condition":null}]},"876":{"split_typed_name":[{"pod":47,"statement":268,"branch":66,"time":null,"condition":13,"subroutine":57}]},"13753":{"check_dynamic_nat_rules":[{"pod":272,"statement":5908,"branch":1782,"time":null,"condition":347,"subroutine":310}]},"15487":{"print_nat1":[{"subroutine":337,"condition":400,"branch":1967,"time":null,"statement":6696,"pod":294}]},"2864":{"check_protocol_flags":[{"condition":57,"subroutine":93,"statement":1184,"pod":82,"time":null,"branch":421}]},"7005":{"__ANON__":[{"branch":1003,"time":null,"pod":169,"statement":3216,"subroutine":189,"condition":166}]},"3218":{"read_netspoc":[{"condition":62,"subroutine":104,"pod":93,"statement":1326,"branch":470,"time":null}]},"15032":{"check_and_convert_routes":[{"statement":6485,"pod":291,"time":null,"branch":1915,"condition":384,"subroutine":333}]},"426":{"abort_on_error":[{"statement":87,"pod":14,"time":null,"branch":12,"condition":null,"subroutine":24}]},"6699":{"expand_services":[{"statement":2935,"pod":166,"branch":929,"time":null,"condition":153,"subroutine":184}]},"8909":{"__ANON__":[{"branch":1204,"time":null,"statement":3976,"pod":188,"subroutine":221,"condition":209}]},"3357":{"is_protocolgroup":[{"subroutine":118,"condition":64,"branch":486,"time":null,"statement":1404,"pod":105}]},"2898":{"assign_union_allow_user":[{"condition":58,"subroutine":96,"pod":85,"statement":1199,"branch":423,"time":null}]},"3280":{"__ANON__":[{"condition":64,"subroutine":107,"pod":96,"statement":1386,"branch":486,"time":null}]},"13361":{"gen_reverse_rules1":[{"condition":335,"subroutine":297,"pod":260,"statement":5707,"time":null,"branch":1723}]},"307":{"equal":[{"pod":2,"statement":38,"time":null,"branch":2,"condition":null,"subroutine":12}]},"14283":{"collect_nat_path":[{"condition":370,"subroutine":317,"statement":6156,"pod":277,"branch":1838,"time":null}]},"7050":{"__ANON__":[{"pod":169,"statement":3216,"branch":1003,"time":null,"condition":166,"subroutine":191}]},"2767":{"gen_protocol_name":[{"condition":54,"subroutine":89,"pod":79,"statement":1134,"time":null,"branch":404}]},"562":{"gen_ip":[{"branch":22,"time":null,"pod":29,"statement":144,"subroutine":39,"condition":5}]},"29":{"BEGIN":[{"branch":null,"time":null,"statement":null,"pod":null,"subroutine":null,"condition":null}]},"5781":{"remove_duplicates":[{"condition":114,"subroutine":161,"pod":144,"statement":2492,"time":null,"branch":796}]},"12502":{"collect_supernet_dst_rules":[{"branch":1602,"time":null,"pod":248,"statement":5367,"subroutine":285,"condition":308}]},"1001":{"check_routing":[{"branch":79,"time":null,"pod":58,"statement":334,"subroutine":68,"condition":13}]},"706":{"read_extended_name":[{"condition":8,"subroutine":48,"statement":195,"pod":38,"branch":37,"time":null}]},"1038":{"check_model":[{"branch":85,"time":null,"pod":60,"statement":348,"subroutine":70,"condition":13}]},"9146":{"link_aggregates":[{"time":null,"branch":1222,"pod":192,"statement":4065,"subroutine":227,"condition":211}]},"8902":{"mark_managed_local":[{"condition":208,"subroutine":220,"pod":187,"statement":3949,"time":null,"branch":1199}]},"35":{"BEGIN":[{"pod":null,"statement":18,"branch":null,"time":null,"condition":null,"subroutine":6}]},"5541":{"__ANON__":[{"subroutine":160,"condition":114,"branch":796,"time":null,"pod":144,"statement":2492}]},"3352":{"is_host":[{"branch":486,"time":null,"statement":1399,"pod":100,"subroutine":113,"condition":64}]},"517":{"read_int":[{"pod":24,"statement":123,"branch":16,"time":null,"condition":2,"subroutine":34}]},"524":{"check_ip":[{"condition":2,"subroutine":35,"pod":25,"statement":126,"time":null,"branch":17}]},"3354":{"is_area":[{"condition":64,"subroutine":115,"pod":102,"statement":1401,"branch":486,"time":null}]},"9070":{"link_implicit_aggregate_to_zone":[{"pod":191,"statement":4019,"branch":1214,"time":null,"condition":210,"subroutine":225}]},"9240":{"duplicate_aggregate_to_cluster":[{"statement":4107,"pod":193,"branch":1232,"time":null,"condition":213,"subroutine":228}]},"4622":{"disable_behind":[{"time":null,"branch":632,"statement":1954,"pod":134,"subroutine":149,"condition":85}]},"14898":{"generate_routing_info":[{"condition":384,"subroutine":330,"pod":288,"statement":6420,"time":null,"branch":1906}]},"2447":{"move_locked_interfaces":[{"subroutine":79,"condition":45,"branch":343,"time":null,"pod":69,"statement":977}]},"9587":{"nat_equal":[{"subroutine":236,"condition":225,"branch":1283,"time":null,"statement":4251,"pod":201}]},"12448":{"setup_ref2obj":[{"condition":308,"subroutine":284,"pod":247,"statement":5360,"time":null,"branch":1602}]},"16016":{"distribute_general_permit":[{"condition":420,"subroutine":348,"statement":6941,"pod":301,"time":null,"branch":2028}]},"17669":{"check_output_dir":[{"condition":447,"subroutine":377,"statement":7764,"pod":329,"time":null,"branch":2202}]},"8034":{"get_nat_network":[{"subroutine":205,"condition":180,"time":null,"branch":1097,"statement":3573,"pod":178}]},"3998":{"link_areas":[{"condition":73,"subroutine":136,"statement":1667,"pod":122,"time":null,"branch":554}]},"4485":{"is_redundany_group":[{"subroutine":146,"condition":79,"time":null,"branch":615,"statement":1892,"pod":131}]},"802":{"read_complement":[{"condition":13,"subroutine":51,"statement":240,"pod":41,"branch":59,"time":null}]},"5163":{"get_intf":[{"statement":2213,"pod":140,"time":null,"branch":706,"condition":103,"subroutine":155}]},"894":{"check_assign":[{"pod":49,"statement":275,"branch":67,"time":null,"condition":13,"subroutine":59}]},"5819":{"expand_group_in_rule":[{"time":null,"branch":800,"pod":146,"statement":2516,"subroutine":163,"condition":114}]},"14367":{"add_networks":[{"statement":6194,"pod":279,"time":null,"branch":1853,"condition":371,"subroutine":319}]},"4884":{"split_ip_range":[{"condition":89,"subroutine":152,"pod":137,"statement":2088,"branch":670,"time":null}]},"10585":{"find_dists_and_loops":[{"branch":1385,"time":null,"pod":225,"statement":4640,"subroutine":260,"condition":236}]},"4175":{"link_routers":[{"pod":125,"statement":1735,"branch":578,"time":null,"condition":73,"subroutine":139}]},"1008":{"check_managed":[{"condition":13,"subroutine":69,"pod":59,"statement":337,"time":null,"branch":81}]},"2992":{"read_pathrestriction":[{"pod":87,"statement":1246,"time":null,"branch":441,"condition":61,"subroutine":98}]},"11845":{"link_crypto":[{"pod":239,"statement":5085,"time":null,"branch":1523,"condition":291,"subroutine":275}]},"7689":{"__ANON__":[{"condition":177,"subroutine":201,"pod":176,"statement":3512,"time":null,"branch":1087}]},"356":{"aref_eq":[{"statement":64,"pod":8,"time":null,"branch":5,"condition":null,"subroutine":18}]},"9902":{"set_areas":[{"subroutine":248,"condition":229,"branch":1314,"time":null,"statement":4371,"pod":213}]},"11002":{"cluster_path_mark":[{"subroutine":266,"condition":244,"branch":1428,"time":null,"pod":231,"statement":4771}]},"6767":{"set_policy_distribution_ip":[{"time":null,"branch":937,"pod":167,"statement":2968,"subroutine":185,"condition":153}]},"6781":{"__ANON__":[{"condition":157,"subroutine":186,"statement":3041,"pod":168,"branch":957,"time":null}]},"934":{"read_assign_list":[{"branch":73,"time":null,"pod":52,"statement":298,"subroutine":62,"condition":13}]},"4238":{"link_subnets":[{"subroutine":142,"condition":73,"branch":585,"time":null,"pod":127,"statement":1766}]},"1495":{"read_interface":[{"subroutine":75,"condition":21,"time":null,"branch":168,"statement":557,"pod":65}]},"12192":{"expand_crypto":[{"condition":303,"subroutine":283,"statement":5244,"pod":246,"time":null,"branch":1569}]},"9775":{"inherit_attributes":[{"condition":227,"subroutine":243,"statement":4323,"pod":208,"branch":1301,"time":null}]},"16933":{"print_crypto_map_attributes":[{"condition":430,"subroutine":367,"statement":7395,"pod":319,"time":null,"branch":2104}]},"12179":{"verify_asa_trustpoint":[{"subroutine":282,"condition":303,"branch":1567,"time":null,"statement":5239,"pod":245}]},"15884":{"add_router_acls":[{"condition":420,"subroutine":346,"pod":299,"statement":6887,"time":null,"branch":2015}]},"16644":{"print_cisco_acls":[{"subroutine":361,"condition":424,"time":null,"branch":2079,"pod":313,"statement":7253}]},"13576":{"mark_primary":[{"statement":5798,"pod":264,"time":null,"branch":1751,"condition":342,"subroutine":302}]},"9478":{"set_area1":[{"condition":219,"subroutine":234,"pod":199,"statement":4207,"time":null,"branch":1265}]},"9960":{"find_area_subset_relations":[{"statement":4398,"pod":214,"branch":1322,"time":null,"condition":229,"subroutine":249}]},"13650":{"have_set_and_equal_marks":[{"condition":343,"subroutine":306,"pod":268,"statement":5849,"time":null,"branch":1768}]},"8623":{"cluster_crosslink_routers":[{"statement":3808,"pod":184,"branch":1166,"time":null,"condition":202,"subroutine":214}]},"6220":{"add_managed_hosts":[{"condition":126,"subroutine":171,"statement":2691,"pod":153,"time":null,"branch":853}]},"-1":{"__COVER__":[{"pod":336,"statement":7940,"time":null,"branch":2231,"condition":449,"subroutine":385}]},"455":{"internal_err":[{"condition":null,"subroutine":29,"statement":101,"pod":19,"branch":13,"time":null}]},"11827":{"link_ipsec":[{"subroutine":274,"condition":291,"branch":1521,"time":null,"statement":5077,"pod":238}]},"7627":{"distribute_nat":[{"pod":174,"statement":3381,"branch":1051,"time":null,"condition":175,"subroutine":199}]},"14098":{"optimize_and_warn_deleted":[{"subroutine":314,"condition":359,"time":null,"branch":1833,"pod":274,"statement":6053}]},"10455":{"setpath_obj":[{"condition":234,"subroutine":258,"pod":223,"statement":4600,"time":null,"branch":1372}]},"13791":{"__ANON__":[{"time":null,"branch":1820,"pod":273,"statement":6015,"subroutine":311,"condition":356}]},"16585":{"print_acl_suffix":[{"pod":311,"statement":7221,"time":null,"branch":2077,"condition":424,"subroutine":359}]},"16789":{"gen_crypto_rules":[{"condition":430,"subroutine":363,"pod":315,"statement":7319,"time":null,"branch":2097}]},"17849":{"init_protocols":[{"branch":2230,"time":null,"statement":7857,"pod":333,"subroutine":382,"condition":448}]},"443":{"err_msg":[{"statement":95,"pod":17,"time":null,"branch":13,"condition":null,"subroutine":27}]},"4267":{"link_pathrestrictions":[{"branch":587,"time":null,"pod":129,"statement":1783,"subroutine":144,"condition":73}]},"3460":{"order_icmp":[{"time":null,"branch":504,"pod":111,"statement":1445,"subroutine":124,"condition":67}]},"6242":{"collect_unenforceable":[{"condition":126,"subroutine":172,"pod":154,"statement":2700,"branch":855,"time":null}]},"14649":{"add_path_routes":[{"subroutine":325,"condition":376,"time":null,"branch":1886,"statement":6333,"pod":283}]},"31":{"BEGIN":[{"subroutine":2,"condition":null,"branch":null,"time":null,"pod":null,"statement":6}]},"3652":{"expand_splitted_protocol":[{"subroutine":128,"condition":69,"branch":521,"time":null,"pod":114,"statement":1518}]},"416":{"check_abort":[{"time":null,"branch":10,"pod":13,"statement":83,"subroutine":23,"condition":null}]},"332":{"max":[{"subroutine":16,"condition":null,"branch":3,"time":null,"pod":6,"statement":54}]},"10650":{"setpath":[{"subroutine":262,"condition":237,"time":null,"branch":1391,"statement":4667,"pod":227}]},"9037":{"link_aggregate_to_zone":[{"pod":190,"statement":4009,"branch":1211,"time":null,"condition":209,"subroutine":224}]},"2827":{"read_simple_protocol":[{"pod":81,"statement":1166,"time":null,"branch":415,"condition":57,"subroutine":92}]},"13703":{"get_zone_cluster_borders":[{"branch":1776,"time":null,"statement":5878,"pod":270,"subroutine":308,"condition":344}]},"1278":{"read_network":[{"subroutine":74,"condition":17,"branch":129,"time":null,"statement":467,"pod":64}]},"11866":{"gen_tunnel_rules":[{"branch":1525,"time":null,"statement":5094,"pod":240,"subroutine":276,"condition":291}]},"16598":{"print_iptables_acls":[{"statement":7231,"pod":312,"time":null,"branch":2078,"condition":424,"subroutine":360}]},"545":{"read_ip_prefix":[{"statement":135,"pod":27,"branch":20,"time":null,"condition":5,"subroutine":37}]},"13546":{"mark_secondary":[{"statement":5780,"pod":263,"branch":1744,"time":null,"condition":342,"subroutine":301}]},"17795":{"copy_raw":[{"time":null,"branch":2221,"statement":7830,"pod":331,"subroutine":380,"condition":447}]},"9605":{"check_useless_nat":[{"pod":202,"statement":4257,"time":null,"branch":1286,"condition":226,"subroutine":237}]},"13657":{"mark_secondary_rules":[{"condition":343,"subroutine":307,"pod":269,"statement":5855,"branch":1770,"time":null}]},"17759":{"__ANON__":[{"condition":447,"subroutine":379,"statement":7830,"pod":331,"time":null,"branch":2221}]},"811":{"read_intersection":[{"subroutine":52,"condition":13,"time":null,"branch":60,"statement":243,"pod":42}]},"10281":{"traverse_loop_part":[{"condition":233,"subroutine":255,"statement":4543,"pod":220,"branch":1356,"time":null}]},"12160":{"__ANON__":[{"pod":245,"statement":5239,"branch":1567,"time":null,"condition":303,"subroutine":281}]},"450":{"syntax_err":[{"subroutine":28,"condition":null,"time":null,"branch":13,"statement":99,"pod":18}]},"14718":{"get_route_path":[{"subroutine":327,"condition":378,"branch":1891,"time":null,"statement":6358,"pod":285}]},"9757":{"cleanup_after_inheritance":[{"branch":1297,"time":null,"pod":207,"statement":4312,"subroutine":242,"condition":227}]},"14750":{"generate_routing_tree1":[{"condition":379,"subroutine":328,"statement":6367,"pod":286,"time":null,"branch":1893}]},"9730":{"inherit_nat_in_zone":[{"condition":227,"subroutine":241,"statement":4302,"pod":206,"time":null,"branch":1296}]},"8056":{"__ANON__":[{"branch":1106,"time":null,"pod":180,"statement":3602,"subroutine":207,"condition":188}]},"2739":{"read_proto_nr":[{"time":null,"branch":398,"pod":78,"statement":1121,"subroutine":88,"condition":54}]},"16193":{"prefix_code":[{"time":null,"branch":2051,"statement":7021,"pod":305,"subroutine":352,"condition":420}]},"9419":{"set_zone_cluster":[{"condition":215,"subroutine":232,"statement":4183,"pod":197,"branch":1256,"time":null}]},"14444":{"get_route_networks":[{"subroutine":321,"condition":374,"branch":1860,"time":null,"pod":281,"statement":6236}]},"6359":{"show_deleted_rules1":[{"statement":2748,"pod":157,"time":null,"branch":881,"condition":137,"subroutine":175}]},"2908":{"read_service":[{"subroutine":97,"condition":58,"branch":423,"time":null,"statement":1206,"pod":86}]},"17698":{"print_code":[{"subroutine":378,"condition":447,"time":null,"branch":2209,"statement":7777,"pod":330}]},"1110":{"read_host":[{"condition":14,"subroutine":72,"pod":62,"statement":387,"time":null,"branch":94}]},"941":{"check_assign_list":[{"time":null,"branch":73,"pod":53,"statement":302,"subroutine":63,"condition":13}]},"8294":{"__ANON__":[{"pod":183,"statement":3730,"time":null,"branch":1141,"condition":189,"subroutine":211}]},"6307":{"show_unenforceable":[{"branch":870,"time":null,"pod":155,"statement":2720,"subroutine":173,"condition":134}]},"6538":{"normalize_log":[{"pod":163,"statement":2857,"time":null,"branch":906,"condition":144,"subroutine":181}]},"6514":{"collect_log":[{"condition":144,"subroutine":179,"pod":161,"statement":2846,"time":null,"branch":904}]},"3334":{"show_read_statistics":[{"condition":64,"subroutine":109,"pod":96,"statement":1386,"branch":486,"time":null}]},"3486":{"order_proto":[{"condition":68,"subroutine":125,"pod":112,"statement":1455,"time":null,"branch":507}]},"3353":{"is_subnet":[{"pod":101,"statement":1400,"time":null,"branch":486,"condition":64,"subroutine":114}]},"585":{"read_owner_pattern":[{"branch":23,"time":null,"pod":32,"statement":152,"subroutine":42,"condition":5}]},"3398":{"prepare_prt_ordering":[{"branch":493,"time":null,"statement":1422,"pod":110,"subroutine":123,"condition":66}]},"365":{"keys_eq":[{"time":null,"branch":7,"pod":9,"statement":69,"subroutine":19,"condition":null}]},"8780":{"get_managed_local_clusters":[{"branch":1183,"time":null,"statement":3878,"pod":186,"subroutine":217,"condition":204}]},"10324":{"apply_pathrestriction_optimization":[{"subroutine":256,"condition":233,"time":null,"branch":1364,"pod":221,"statement":4560}]},"5178":{"get_auto_intf":[{"subroutine":156,"condition":103,"branch":708,"time":null,"pod":141,"statement":2220}]},"13060":{"check_for_transient_supernet_rule":[{"subroutine":294,"condition":326,"branch":1679,"time":null,"statement":5579,"pod":257}]},"1221":{"read_nat":[{"condition":17,"subroutine":73,"pod":63,"statement":439,"branch":118,"time":null}]},"3952":{"link_general_permit":[{"subroutine":135,"condition":71,"time":null,"branch":546,"pod":121,"statement":1644}]},"12653":{"check_supernet_in_zone":[{"pod":252,"statement":5434,"branch":1621,"time":null,"condition":313,"subroutine":289}]},"342":{"aref_delete":[{"time":null,"branch":4,"statement":58,"pod":7,"subroutine":17,"condition":null}]},"4675":{"check_bridged_networks":[{"condition":86,"subroutine":150,"pod":135,"statement":1976,"branch":636,"time":null}]},"10152":{"check_pathrestrictions":[{"subroutine":254,"condition":231,"time":null,"branch":1339,"pod":219,"statement":4484}]},"3355":{"is_zone":[{"subroutine":116,"condition":64,"time":null,"branch":486,"pod":103,"statement":1402}]},"320":{"find_duplicates":[{"time":null,"branch":3,"statement":45,"pod":4,"subroutine":14,"condition":null}]},"10673":{"get_path":[{"subroutine":263,"condition":237,"branch":1391,"time":null,"pod":228,"statement":4674}]},"11699":{"set_auto_intf_from_border":[{"branch":1503,"time":null,"pod":236,"statement":5008,"subroutine":271,"condition":286}]},"17841":{"show_version":[{"subroutine":381,"condition":448,"time":null,"branch":2230,"pod":332,"statement":7855}]},"10752":{"cluster_path_mark1":[{"statement":4694,"pod":229,"time":null,"branch":1400,"condition":241,"subroutine":264}]},"3358":{"is_objectgroup":[{"pod":106,"statement":1405,"branch":486,"time":null,"condition":64,"subroutine":119}]},"13289":{"mark_stateful":[{"condition":332,"subroutine":295,"pod":258,"statement":5665,"time":null,"branch":1709}]},"15774":{"__ANON__":[{"condition":420,"subroutine":345,"pod":299,"statement":6887,"branch":2015,"time":null}]},"396":{"context":[{"condition":null,"subroutine":21,"pod":11,"statement":76,"branch":9,"time":null}]},"9786":{"set_zones":[{"condition":227,"subroutine":244,"pod":209,"statement":4327,"time":null,"branch":1301}]},"3927":{"link_policy_distribution_point":[{"subroutine":134,"condition":71,"time":null,"branch":543,"pod":120,"statement":1630}]},"977":{"add_attribute":[{"subroutine":66,"condition":13,"branch":75,"time":null,"statement":319,"pod":56}]},"9464":{"zone_eq":[{"pod":198,"statement":4205,"time":null,"branch":1265,"condition":217,"subroutine":233}]},"16110":{"address":[{"condition":420,"subroutine":350,"pod":303,"statement":6987,"time":null,"branch":2040}]},"4493":{"check_ip_addresses":[{"time":null,"branch":617,"statement":1897,"pod":132,"subroutine":147,"condition":79}]},"16080":{"rules_distribution":[{"condition":420,"subroutine":349,"statement":6974,"pod":302,"branch":2039,"time":null}]},"7405":{"set_natdomain":[{"time":null,"branch":1022,"pod":172,"statement":3292,"subroutine":196,"condition":171}]},"7481":{"distribute_nat1":[{"time":null,"branch":1032,"statement":3327,"pod":173,"subroutine":198,"condition":175}]},"574":{"read_identifier":[{"branch":22,"time":null,"statement":148,"pod":31,"subroutine":41,"condition":5}]},"3351":{"is_interface":[{"subroutine":112,"condition":64,"time":null,"branch":486,"statement":1398,"pod":99}]},"650":{"check_typed_name":[{"branch":30,"time":null,"statement":180,"pod":36,"subroutine":46,"condition":6}]},"3360":{"is_autointerface":[{"branch":486,"time":null,"pod":108,"statement":1407,"subroutine":121,"condition":64}]},"4366":{"link_virtual_interfaces":[{"statement":1831,"pod":130,"branch":602,"time":null,"condition":74,"subroutine":145}]},"11688":{"single_path_walk":[{"condition":284,"subroutine":270,"pod":235,"statement":5002,"branch":1503,"time":null}]},"9546":{"inherit_router_attributes":[{"condition":221,"subroutine":235,"statement":4238,"pod":200,"time":null,"branch":1278}]},"145":{"store_description":[{"condition":null,"subroutine":10,"statement":30,"pod":null,"branch":null,"time":null}]},"9655":{"inherit_attributes_from_area":[{"statement":4274,"pod":204,"time":null,"branch":1290,"condition":226,"subroutine":239}]},"3239":{"read_file":[{"condition":62,"subroutine":105,"pod":94,"statement":1335,"branch":473,"time":null}]},"6549":{"expand_rules":[{"condition":145,"subroutine":182,"pod":164,"statement":2861,"branch":906,"time":null}]},"15733":{"distribute_rule":[{"branch":1988,"time":null,"pod":298,"statement":6815,"subroutine":344,"condition":415}]},"12892":{"check_supernet_dst_rule":[{"subroutine":291,"condition":323,"branch":1658,"time":null,"statement":5515,"pod":254}]},"42":{"BEGIN":[{"condition":null,"subroutine":7,"statement":21,"pod":null,"branch":null,"time":null}]},"557":{"read_ip_prefix_pair":[{"condition":5,"subroutine":38,"pod":28,"statement":142,"time":null,"branch":22}]},"5283":{"expand_group1":[{"statement":2271,"pod":143,"branch":719,"time":null,"condition":106,"subroutine":158}]},"16774":{"generate_acls":[{"time":null,"branch":2096,"statement":7311,"pod":314,"subroutine":362,"condition":430}]},"9622":{"inherit_area_nat":[{"condition":226,"subroutine":238,"statement":4263,"pod":203,"branch":1288,"time":null}]},"5218":{"check_auto_intf":[{"subroutine":157,"condition":104,"branch":711,"time":null,"pod":142,"statement":2233}]},"10073":{"clean_areas":[{"condition":230,"subroutine":251,"pod":216,"statement":4447,"branch":1333,"time":null}]},"6348":{"warn_useless_unenforceable":[{"subroutine":174,"condition":137,"time":null,"branch":878,"pod":156,"statement":2741}]},"13527":{"get_zone2":[{"subroutine":300,"condition":342,"branch":1741,"time":null,"pod":262,"statement":5774}]},"5945":{"expand_protocols":[{"subroutine":166,"condition":115,"time":null,"branch":821,"pod":148,"statement":2572}]},"13311":{"check_supernet_rules":[{"time":null,"branch":1714,"pod":259,"statement":5681,"subroutine":296,"condition":333}]},"326":{"intersect":[{"subroutine":15,"condition":null,"branch":3,"time":null,"pod":5,"statement":49}]},"596":{"read_name":[{"condition":5,"subroutine":43,"pod":33,"statement":156,"branch":24,"time":null}]},"6453":{"show_deleted_rules2":[{"condition":144,"subroutine":177,"statement":2810,"pod":159,"time":null,"branch":897}]},"17002":{"print_ca_and_tunnel_group_map":[{"subroutine":369,"condition":431,"time":null,"branch":2112,"pod":321,"statement":7426}]},"4058":{"link_interfaces":[{"condition":73,"subroutine":137,"statement":1695,"pod":123,"branch":562,"time":null}]},"14302":{"distribute_nat_to_device":[{"condition":370,"subroutine":318,"statement":6166,"pod":278,"time":null,"branch":1842}]},"3707":{"order_protocols":[{"subroutine":129,"condition":69,"time":null,"branch":523,"pod":115,"statement":1524}]},"17091":{"print_dynamic_crypto_map":[{"subroutine":371,"condition":431,"time":null,"branch":2118,"pod":323,"statement":7469}]},"4113":{"check_interface_ip":[{"condition":73,"subroutine":138,"statement":1717,"pod":124,"branch":567,"time":null}]},"16001":{"create_general_permit_rules":[{"subroutine":347,"condition":420,"branch":2026,"time":null,"statement":6936,"pod":300}]},"12124":{"verify_asa_vpn_attributes":[{"statement":5209,"pod":243,"branch":1553,"time":null,"condition":302,"subroutine":279}]},"10388":{"optimize_pathrestrictions":[{"statement":4579,"pod":222,"branch":1369,"time":null,"condition":234,"subroutine":257}]},"17968":{"init_global_vars":[{"statement":7871,"pod":334,"time":null,"branch":2230,"condition":448,"subroutine":383}]},"2659":{"read_protocolgroup":[{"condition":51,"subroutine":84,"pod":74,"statement":1082,"time":null,"branch":381}]},"537":{"read_ip":[{"subroutine":36,"condition":5,"branch":19,"time":null,"statement":132,"pod":26}]},"856":{"check_permit_deny":[{"statement":260,"pod":45,"branch":64,"time":null,"condition":13,"subroutine":55}]},"15291":{"print_header":[{"condition":394,"subroutine":335,"statement":6595,"pod":292,"time":null,"branch":1943}]},"11557":{"path_walk":[{"condition":273,"subroutine":269,"statement":4958,"pod":234,"branch":1492,"time":null}]},"4900":{"convert_hosts":[{"pod":138,"statement":2097,"time":null,"branch":671,"condition":90,"subroutine":153}]},"1797":{"set_pix_interface_level":[{"statement":708,"pod":66,"time":null,"branch":239,"condition":25,"subroutine":76}]},"6140":{"expand_special":[{"statement":2652,"pod":152,"time":null,"branch":840,"condition":122,"subroutine":170}]},"6094":{"get_zone":[{"pod":151,"statement":2634,"time":null,"branch":832,"condition":122,"subroutine":169}]},"12968":{"check_supernet_dst_collections":[{"statement":5544,"pod":255,"branch":1674,"time":null,"condition":326,"subroutine":292}]},"621":{"read_union":[{"subroutine":45,"condition":5,"branch":26,"time":null,"pod":35,"statement":164}]},"3126":{"read_crypto":[{"pod":91,"statement":1288,"time":null,"branch":451,"condition":61,"subroutine":102}]},"13868":{"__ANON__":[{"condition":356,"subroutine":312,"pod":273,"statement":6015,"time":null,"branch":1820}]},"8324":{"__ANON__":[{"subroutine":212,"condition":189,"branch":1141,"time":null,"statement":3730,"pod":183}]},"16246":{"print_asavpn":[{"subroutine":356,"condition":421,"time":null,"branch":2055,"statement":7046,"pod":309}]},"912":{"read_list":[{"condition":13,"subroutine":60,"statement":286,"pod":50,"branch":69,"time":null}]},"8956":{"link_reroute_permit":[{"condition":209,"subroutine":222,"statement":3976,"pod":188,"branch":1204,"time":null}]},"13006":{"find_smaller_prt":[{"statement":5559,"pod":256,"branch":1675,"time":null,"condition":326,"subroutine":293}]},"10107":{"check_virtual_interfaces":[{"condition":230,"subroutine":253,"statement":4467,"pod":218,"branch":1333,"time":null}]},"16552":{"print_acl_prefix":[{"subroutine":358,"condition":424,"branch":2076,"time":null,"pod":310,"statement":7197}]},"10612":{"process_loops":[{"subroutine":261,"condition":237,"time":null,"branch":1388,"pod":226,"statement":4650}]},"14686":{"add_end_routes":[{"pod":284,"statement":6347,"branch":1888,"time":null,"condition":377,"subroutine":326}]},"2775":{"__ANON__":[{"condition":57,"subroutine":90,"statement":1158,"pod":80,"time":null,"branch":414}]},"9333":{"get_cluster_aggregates":[{"subroutine":230,"condition":213,"time":null,"branch":1244,"statement":4144,"pod":195}]},"8052":{"check_subnets":[{"pod":179,"statement":3579,"branch":1099,"time":null,"condition":181,"subroutine":206}]},"11742":{"path_auto_interfaces":[{"branch":1509,"time":null,"pod":237,"statement":5037,"subroutine":273,"condition":286}]},"6414":{"collect_redundant_rules":[{"subroutine":176,"condition":140,"time":null,"branch":889,"pod":158,"statement":2787}]},"3268":{"read_file_or_dir":[{"condition":62,"subroutine":106,"pod":95,"statement":1350,"branch":475,"time":null}]},"3365":{"print_rule":[{"time":null,"branch":486,"statement":1408,"pod":109,"subroutine":122,"condition":64}]},"2582":{"read_area":[{"subroutine":82,"condition":46,"time":null,"branch":363,"statement":1041,"pod":72}]},"10022":{"check_routers_in_nested_areas":[{"condition":229,"subroutine":250,"statement":4426,"pod":215,"branch":1329,"time":null}]},"5914":{"__ANON__":[{"statement":2557,"pod":147,"branch":817,"time":null,"condition":115,"subroutine":164}]},"13626":{"get_zones":[{"time":null,"branch":1765,"pod":266,"statement":5834,"subroutine":304,"condition":342}]},"607":{"read_string":[{"subroutine":44,"condition":5,"branch":25,"time":null,"statement":160,"pod":34}]},"950":{"check_assign_pair":[{"condition":13,"subroutine":64,"statement":307,"pod":54,"branch":74,"time":null}]},"15569":{"print_pix_static":[{"condition":406,"subroutine":338,"pod":295,"statement":6728,"time":null,"branch":1974}]},"7411":{"__ANON__":[{"condition":175,"subroutine":197,"pod":173,"statement":3327,"time":null,"branch":1032}]},"8098":{"nat_to_loopback_ok":[{"pod":180,"statement":3602,"time":null,"branch":1106,"condition":188,"subroutine":208}]},"10925":{"cluster_navigation":[{"time":null,"branch":1424,"statement":4748,"pod":230,"subroutine":265,"condition":243}]},"3350":{"is_router":[{"time":null,"branch":486,"statement":1397,"pod":98,"subroutine":111,"condition":64}]},"13718":{"mark_dynamic_host_nets":[{"pod":271,"statement":5884,"time":null,"branch":1776,"condition":345,"subroutine":309}]},"677":{"read_typed_name":[{"subroutine":47,"condition":7,"branch":37,"time":null,"pod":37,"statement":194}]},"14979":{"find_active_routes":[{"condition":384,"subroutine":331,"pod":289,"statement":6462,"branch":1912,"time":null}]},"6690":{"print_rulecount":[{"time":null,"branch":929,"statement":2928,"pod":165,"subroutine":183,"condition":153}]},"15107":{"__ANON__":[{"condition":394,"subroutine":334,"statement":6595,"pod":292,"branch":1943,"time":null}]},"5524":{"__ANON__":[{"condition":114,"subroutine":159,"statement":2492,"pod":144,"time":null,"branch":796}]},"17407":{"print_prt":[{"pod":327,"statement":7641,"branch":2163,"time":null,"condition":437,"subroutine":375}]},"5800":{"expand_group":[{"subroutine":162,"condition":114,"branch":798,"time":null,"pod":145,"statement":2505}]},"8992":{"add_managed_hosts_to_aggregate":[{"branch":1207,"time":null,"statement":3991,"pod":189,"subroutine":223,"condition":209}]},"840":{"add_description":[{"branch":62,"time":null,"pod":44,"statement":253,"subroutine":54,"condition":13}]},"14196":{"group_path_rules":[{"condition":361,"subroutine":316,"pod":276,"statement":6103,"time":null,"branch":1835}]},"18000":{"compile":[{"pod":335,"statement":7900,"time":null,"branch":2230,"condition":449,"subroutine":384}]},"3503":{"order_ranges":[{"condition":68,"subroutine":126,"statement":1460,"pod":113,"branch":507,"time":null}]},"10086":{"set_zone":[{"condition":230,"subroutine":252,"pod":217,"statement":4454,"time":null,"branch":1333}]},"2883":{"read_typed_name_or_simple_protocol":[{"statement":1192,"pod":83,"branch":423,"time":null,"condition":57,"subroutine":94}]},"1841":{"check_no_in_acl":[{"condition":27,"subroutine":77,"statement":725,"pod":67,"time":null,"branch":244}]},"2887":{"read_protocol":[{"condition":58,"subroutine":95,"statement":1193,"pod":84,"time":null,"branch":423}]},"15639":{"__ANON__":[{"pod":296,"statement":6780,"branch":1982,"time":null,"condition":411,"subroutine":341}]},"15664":{"optimize_nat_networks":[{"subroutine":342,"condition":411,"time":null,"branch":1982,"pod":296,"statement":6780}]},"8630":{"__ANON__":[{"subroutine":215,"condition":202,"branch":1171,"time":null,"statement":3838,"pod":185}]},"33":{"BEGIN":[{"condition":null,"subroutine":4,"pod":null,"statement":12,"time":null,"branch":null}]},"883":{"check_flag":[{"pod":48,"statement":270,"branch":66,"time":null,"condition":13,"subroutine":58}]},"3359":{"is_chain":[{"pod":107,"statement":1406,"time":null,"branch":486,"condition":64,"subroutine":120}]},"9877":{"set_area":[{"branch":1310,"time":null,"pod":212,"statement":4360,"subroutine":247,"condition":229}]},"2813":{"cache_anonymous_protocol":[{"condition":57,"subroutine":91,"statement":1158,"pod":80,"branch":414,"time":null}]},"13395":{"__ANON__":[{"subroutine":298,"condition":342,"time":null,"branch":1741,"statement":5770,"pod":261}]},"14116":{"group_rules":[{"time":null,"branch":1833,"pod":275,"statement":6060,"subroutine":315,"condition":359}]},"5921":{"check_unused_groups":[{"condition":115,"subroutine":165,"pod":147,"statement":2563,"branch":819,"time":null}]},"12533":{"find_supernet":[{"pod":249,"statement":5386,"time":null,"branch":1607,"condition":310,"subroutine":286}]},"13972":{"optimize_rules":[{"time":null,"branch":1820,"statement":6015,"pod":273,"subroutine":313,"condition":356}]},"5110":{"combine_subnets":[{"subroutine":154,"condition":102,"branch":702,"time":null,"pod":139,"statement":2193}]},"34":{"BEGIN":[{"branch":null,"time":null,"statement":15,"pod":null,"subroutine":5,"condition":null}]},"2666":{"read_port_range":[{"condition":51,"subroutine":85,"statement":1086,"pod":75,"branch":381,"time":null}]},"6524":{"check_log":[{"subroutine":180,"condition":144,"branch":905,"time":null,"statement":2851,"pod":162}]},"986":{"check_radius_attributes":[{"condition":13,"subroutine":67,"statement":323,"pod":57,"time":null,"branch":76}]},"6494":{"warn_unused_overlaps":[{"subroutine":178,"condition":144,"branch":900,"time":null,"statement":2837,"pod":160}]},"14391":{"prepare_nat_commands":[{"statement":6207,"pod":280,"branch":1856,"time":null,"condition":372,"subroutine":320}]},"4184":{"link_subnet":[{"branch":578,"time":null,"statement":1740,"pod":126,"subroutine":140,"condition":73}]},"14515":{"__ANON__":[{"condition":376,"subroutine":323,"pod":283,"statement":6333,"branch":1886,"time":null}]},"833":{"read_time_val":[{"subroutine":53,"condition":13,"time":null,"branch":61,"statement":249,"pod":43}]},"12612":{"find_matching_supernet":[{"subroutine":288,"condition":313,"time":null,"branch":1619,"pod":251,"statement":5422}]},"315":{"unique":[{"branch":3,"time":null,"pod":3,"statement":42,"subroutine":13,"condition":null}]},"13495":{"gen_reverse_rules":[{"time":null,"branch":1741,"pod":261,"statement":5770,"subroutine":299,"condition":342}]},"4738":{"mark_disabled":[{"pod":136,"statement":2017,"branch":650,"time":null,"condition":87,"subroutine":151}]},"13640":{"have_different_marks":[{"subroutine":305,"condition":342,"branch":1767,"time":null,"pod":267,"statement":5841}]},"9277":{"get_any":[{"condition":213,"subroutine":229,"statement":4119,"pod":194,"time":null,"branch":1234}]},"157":{"fast_mode":[{"subroutine":11,"condition":null,"time":null,"branch":1,"pod":1,"statement":34}]},"3349":{"is_network":[{"subroutine":110,"condition":64,"branch":486,"time":null,"statement":1396,"pod":97}]},"12737":{"check_supernet_src_rule":[{"pod":253,"statement":5468,"time":null,"branch":1633,"condition":316,"subroutine":290}]}}}
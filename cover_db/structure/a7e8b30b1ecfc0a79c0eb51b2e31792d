{"condition":[[495,{"type":"or_3","op":"||=","left":"$token2regex{$token}","right":"qr/\\G$token/"}],[502,{"right":"syntax_err(\"Expected '${token}'\")","op":"||","type":"or_2","left":"check($token)"}],[526,{"type":"or_3","op":"or","left":"$1 > 255","right":"$2 > 255"}],[526,{"left":"$1 > 255 or $2 > 255","op":"or","type":"or_3","right":"$3 > 255"}],[526,{"left":"$1 > 255 or $2 > 255 or $3 > 255","type":"or_3","op":"or","right":"$4 > 255"}],[637,{"left":"$user_ref_error","op":"||=","type":"or_3","right":"$has_user_ref != $$user_object{'refcount'} > $count"}],[663,{"type":"or_3","op":"or","left":"$type eq 'network'","right":"$type eq 'interface'"}],[677,{"op":"||","type":"or_3","left":"check_typed_name()","right":"syntax_err('Typed name expected')"}],[720,{"right":"$type eq 'host'","left":"$interface","type":"or_3","op":"||"}],[720,{"right":"check('managed')","left":"$interface || $type eq 'host'","type":"and_3","op":"and"}],[720,{"left":"$type eq 'any'","op":"and","type":"and_3","right":"check('ip')"}],[719,{"right":"$input =~ / \\G ( [\\w-]+ (?: \\@ [\\w-]+ ) ) /cgx","op":"and","type":"and_3","left":"$interface"}],[719,{"right":"$input =~ / \\G ( [\\w-]+ ) /cgx","op":"or","type":"or_3","left":"$interface and $input =~ / \\G ( [\\w-]+ (?: \\@ [\\w-]+ ) ) /cgx"}],[1047,{"left":"$$info{'extension'}","op":"||","type":"or_2","right":"{}"}],[1178,{"right":"$$host{'range'}","type":"xor_4","op":"xor","left":"$$host{'ip'}"}],[1198,{"left":"$$host{'ip'}","op":"||=","type":"or_2","right":"'short'"}],[1202,{"op":"||=","type":"or_2","left":"$$host{'radius_attributes'}","right":"{}"}],[1351,{"right":"$$network{'nat'}{$nat_tag}","type":"and_3","op":"and","left":"$$network{'nat'}"}],[1427,{"right":"match_ip($ip2, $ip, $mask)","type":"and_3","op":"and","left":"match_ip($ip1, $ip, $mask)"}],[1443,{"right":"$$network{'crosslink'}","left":"@{$$network{'hosts'};}","op":"and","type":"and_3"}],[1468,{"right":"{}","op":"||=","type":"or_2","left":"$$network{'radius_attributes'}"}],[1639,{"op":"and","type":"and_3","left":"$$virtual{'redundancy_id'}","right":"not $$virtual{'redundancy_type'}"}],[1678,{"right":"'bridged'","op":"||=","type":"or_2","left":"$$interface{'ip'}"}],[1704,{"right":"'short'","op":"||=","type":"or_2","left":"$$interface{'ip'}"}],[1718,{"left":"$$interface{'owner'}","type":"and_3","op":"and","right":"not $$interface{'vip'}"}],[1806,{"type":"and_3","op":"and","left":"@levels >= 2","right":"not equal(@levels)"}],[1801,{"right":"$level <= 100","left":"($level) = $hwname =~ /(\\d+)$/","type":"and_3","op":"and"}],[2009,{"right":"$$model{'has_vip'}","op":"&&","type":"and_3","left":"$model"}],[2009,{"right":"not $model && $$model{'has_vip'}","left":"$$interface{'vip'}","type":"and_3","op":"and"}],[2047,{"right":"not $$model{'can_vrf'}","left":"$$router{'vrf'}","op":"and","type":"and_3"}],[2083,{"left":"$$interface{'bind_nat'}","type":"or_3","op":"||","right":"$bind_nat0"}],[2083,{"right":"$bind_nat0","left":"$$hardware{'bind_nat'}","type":"or_3","op":"||"}],[2099,{"right":"$$model{'has_vip'}","type":"and_3","op":"and","left":"$hw_name eq 'VIP'"}],[2099,{"type":"and_3","op":"and","left":"$hw_name eq 'VIP' and $$model{'has_vip'}","right":"not $$interface{'vip'}"}],[2131,{"right":"$all_routing","op":"||=","type":"or_3","left":"$$interface{'routing'}"}],[2133,{"right":"$$interface{'ip'} eq 'unnumbered'","left":"my $routing = $$interface{'routing'}","type":"and_3","op":"and"}],[2153,{"op":"and","type":"and_3","left":"$$router{'log_deny'}","right":"not $$model{'can_log_deny'}"}],[2185,{"right":"not $$model{'need_protect'}","left":"$$router{'no_protect_self'}","op":"and","type":"and_3"}],[2195,{"type":"and_3","op":"and","left":"defined $$interface{'security_level'}","right":"not $$model{'has_interface_level'}"}],[2201,{"left":"$$interface{'hub'}","op":"or","type":"or_3","right":"$$interface{'spoke'}"}],[2206,{"right":"$$model{'do_auth'}","left":"$$interface{'hub'}","op":"&&","type":"and_3"}],[2206,{"right":"not $$interface{'hub'} && $$model{'do_auth'}","type":"and_3","op":"and","left":"$$interface{'no_check'}"}],[2304,{"left":"$$router{'radius_attributes'}","type":"or_2","op":"||=","right":"{}"}],[2430,{"right":"$$interface{'hub'}","left":"$$interface{'spoke'}","op":"||","type":"or_3"}],[2430,{"right":"not $$interface{'no_check'}","left":"$$interface{'spoke'} || $$interface{'hub'}","type":"and_3","op":"and"}],[2470,{"right":"[@$interfaces]","op":"||=","type":"or_2","left":"$$orig_router{'orig_interfaces'}"}],[2609,{"type":"or_3","op":"or","left":"$$pair[0] ne 'network'","right":"ref $$pair[1]"}],[2632,{"right":"$$area{'inclusive_border'}","left":"$$area{'border'}","op":"||","type":"or_3"}],[2632,{"type":"and_3","op":"and","left":"$$area{'border'} || $$area{'inclusive_border'}","right":"$$area{'anchor'}"}],[2637,{"op":"or","type":"or_3","left":"$$area{'anchor'}","right":"$$area{'border'}"}],[2637,{"right":"$$area{'inclusive_border'}","type":"or_3","op":"or","left":"$$area{'anchor'} or $$area{'border'}"}],[2675,{"left":"$port1 == 1","type":"and_3","op":"and","right":"$port2 == 65535"}],[2726,{"right":"$type == 3","type":"or_3","op":"or","left":"$type == 0"}],[2726,{"type":"or_3","op":"or","left":"$type == 0 or $type == 3","right":"$type == 11"}],[2771,{"left":"$proto eq 'tcp'","type":"or_3","op":"or","right":"$proto eq 'udp'"}],[2776,{"op":"and","type":"and_3","left":"$v1 == 1","right":"$v2 == 65535"}],[2787,{"right":"&$port_name(@$src_range)","left":"$src_range","op":"&&","type":"and_3"}],[2881,{"left":"check_typed_name()","type":"or_3","op":"||","right":"read_simple_protocol()"}],[2960,{"right":"$dst_user","left":"$src_user","type":"or_3","op":"or"}],[2962,{"right":"$dst_user","left":"$src_user","op":"&&","type":"and_3"}],[2962,{"left":"$$service{'foreach'}","type":"and_3","op":"and","right":"not $src_user && $dst_user"}],[3190,{"left":"$$owner{'extend_only'}","op":"and","type":"and_3","right":"$$owner{'watchers'}"}],[3267,{"type":"or_2","op":"||=","left":"$read_syntax","right":"\\&read_netspoc"}],[3270,{"op":"and","type":"and_3","left":"defined $path","right":"-d $path"}],[3364,{"right":"$$rule{'rule'}{'service'}","left":"$$rule{'rule'}","op":"&&","type":"and_3"}],[3390,{"right":"$prt","left":"$$map{$prt}","op":"||","type":"or_3"}],[3407,{"right":"$proto eq 'udp'","left":"$proto eq 'tcp'","op":"or","type":"or_3"}],[3479,{"left":"$$hash{$$prt{'type'}}","type":"or_3","op":"||","right":"$up"}],[3648,{"right":"$a2 == 65535","op":"and","type":"and_3","left":"$a1 == 1"}],[3763,{"right":"'owner'","left":"$key","type":"or_2","op":"||="}],[3848,{"right":"$name","type":"or_3","op":"||","left":"$$owner{'alias'}"}],[3990,{"type":"and_3","op":"and","left":"$range","right":"$range ne $aref_tcp_any"}],[3990,{"op":"or","type":"or_3","left":"$src_range","right":"$range and $range ne $aref_tcp_any"}],[4340,{"type":"or_3","op":"or","left":"$$interface{'spoke'}","right":"$$interface{'hub'}"}],[4381,{"right":"''","left":"$$virtual1{'redundancy_type'}","op":"||","type":"or_2"}],[4382,{"left":"$$virtual1{'redundancy_id'}","type":"or_2","op":"||","right":"''"}],[4385,{"right":"''","type":"or_2","op":"||","left":"$$virtual2{'redundancy_type'}"}],[4391,{"right":"''","left":"$$virtual2{'redundancy_id'}","type":"or_2","op":"||"}],[4474,{"right":"$$router{'routing_only'}","type":"or_3","op":"or","left":"$$router{'managed'}"}],[4500,{"right":"$$network{'interfaces'}","type":"and_3","op":"and","left":"$$network{'ip'} eq 'unnumbered'"}],[4500,{"op":"and","type":"and_3","left":"$$network{'ip'} eq 'unnumbered' and $$network{'interfaces'}","right":"@{$$network{'interfaces'};} > 2"}],[4530,{"op":"||","type":"or_3","left":"$$router{'managed'}","right":"$$router{'routing_only'}"}],[4530,{"left":"$$router{'managed'} || $$router{'routing_only'}","type":"and_3","op":"and","right":"not $$interface{'routing'}"}],[4536,{"right":"$$interface{'redundant'}","left":"$$old_intf{'redundant'}","type":"and_3","op":"and"}],[4548,{"left":"$short_intf","op":"and","type":"and_3","right":"$route_intf"}],[4633,{"left":"not $network","op":"or","type":"or_3","right":"$$network{'disabled'}"}],[4705,{"right":"$mask == $mask1","left":"$ip == $ip1","type":"and_3","op":"and"}],[4764,{"right":"$$router{'routing_only'}","op":"or","type":"or_3","left":"$$router{'managed'}"}],[4813,{"right":"$$_{'routing_only'}","left":"$$_{'managed'}","type":"or_3","op":"||"}],[4895,{"left":"($low & $mask) == 0","op":"and","type":"and_3","right":"$low + $mask <= $high"}],[4909,{"right":"$owner1 && $owner1 ne $owner2","left":"($owner1 xor $owner2)","op":"||","type":"or_3"}],[4917,{"right":"$nat2","left":"$nat","type":"xor_4","op":"xor"}],[4917,{"right":"$nat2","op":"and","type":"and_3","left":"$nat"}],[4927,{"left":"$$nat2{$name}","type":"and_3","op":"and","right":"$$nat{$name} eq $$nat2{$name}"}],[5044,{"right":"$network","op":"||=","type":"or_3","left":"$$subnet{'up'}"}],[5057,{"left":"$$subnet{'nat'}","type":"or_3","op":"||","right":"$$subnet{'id'}"}],[5057,{"type":"and_3","op":"and","left":"not $$subnet{'nat'} || $$subnet{'id'}","right":"$ip % $modulo == 0"}],[5081,{"right":"$up = $inv_prefix_aref[$up_inv_prefix]{$ip}","left":"$up_inv_prefix < @inv_prefix_aref","op":"and","type":"and_3"}],[5124,{"right":"$$router{'routing_only'}","op":"or","type":"or_3","left":"$$router{'managed'}"}],[5139,{"op":"and","type":"and_3","left":"$neighbor = $$subnet{'neighbor'}","right":"$hash{$neighbor}"}],[5202,{"op":"||=","type":"or_2","left":"$managed","right":"0"}],[5252,{"right":"$$info{'n'}{$router}{$network}","left":"$$info{'r'}{$router}","op":"||","type":"or_3"}],[5271,{"left":"not $other","type":"and_3","op":"and","right":"$other = $$info{'i'}{$router}"}],[5421,{"right":"$$router{'routing_only'}","op":"||","type":"or_3","left":"$$router{'managed'}"}],[5421,{"right":"not $$router{'managed'} || $$router{'routing_only'}","type":"and_3","op":"and","left":"$managed"}],[5480,{"left":"$$obj{'managed'}","type":"or_3","op":"||","right":"$$obj{'routing_only'}"}],[5480,{"left":"$managed","type":"and_3","op":"and","right":"not $$obj{'managed'} || $$obj{'routing_only'}"}],[5551,{"type":"and_3","op":"and","left":"$type eq 'Network'","right":"$$object{'is_aggregate'}"}],[5568,{"type":"or_3","op":"or","left":"$type eq 'Host'","right":"$type eq 'Interface'"}],[5750,{"right":"'public'","left":"$$object{'private'}","op":"||","type":"or_2"}],[5718,{"op":"and","type":"and_3","left":"$$object{'is_aggregate'}","right":"$$object{'zone'}{'zone_cluster'}"}],[5982,{"right":"$proto eq 'udp'","type":"or_3","op":"or","left":"$proto eq 'tcp'"}],[5996,{"left":"$src_range","type":"or_3","op":"or","right":"$$prt{'flags'}"}],[5996,{"right":"$$dst_range{'name'} ne $$prt{'name'}","op":"or","type":"or_3","left":"$src_range or $$prt{'flags'}"}],[6055,{"op":"||","type":"or_3","left":"$obj2path{$dst}","right":"get_path($dst)"}],[6158,{"op":"||","type":"or_2","left":"$$flags{'src_net'}","right":"''"}],[6159,{"left":"$$flags{'dst_net'}","type":"or_2","op":"||","right":"''"}],[6160,{"right":"$dst_net","left":"$src_net","op":"||","type":"or_3"}],[6161,{"right":"grep {$_ ne 'dst_net' if $_ ne 'src_net';} keys %$flags","op":"and","type":"and_3","left":"keys %$flags"}],[6161,{"right":"$src_range","left":"keys %$flags and grep {$_ ne 'dst_net' if $_ ne 'src_net';} keys %$flags","type":"or_3","op":"or"}],[6219,{"right":"@extra_src_dst","left":"@$src_list","type":"or_3","op":"or"}],[6223,{"right":"@$dst_list","left":"@$src_list","op":"and","type":"and_3"}],[6382,{"right":"equal(map({$$_{'owner'};} @implicit_owner_zones))","left":"@implicit_owner_zones == @$cluster","op":"and","type":"and_3"}],[6445,{"left":"$$router{'managed'}","type":"or_3","op":"or","right":"$$router{'routing_only'}"}],[6512,{"right":"$$owner{'extend_only'}","op":"and","type":"and_3","left":"$owner"}],[6518,{"left":"$owner","op":"and","type":"and_3","right":"$$owner{'extend_only'}"}],[6540,{"right":"[]","left":"$extended{$owner}","op":"||","type":"or_2"}],[6572,{"left":"$combined","type":"and_3","op":"and","right":"@$combined"}],[6578,{"right":"''","left":"$$node{'owner'}","op":"||","type":"or_2"}],[6623,{"right":"$owner","op":"||=","type":"or_3","left":"$$interface{'owner'}"}],[6630,{"right":"$$router{'routing_only'}","left":"$$router{'managed'}","type":"or_3","op":"||"}],[6673,{"type":"and_3","op":"and","left":"$unknown2services{$up}","right":"$unknown2services{$obj} eq $unknown2services{$up}"}],[6696,{"right":"{}","left":"$sname2info{$name}","op":"||=","type":"or_2"}],[6701,{"right":"{}","type":"or_2","op":"||=","left":"$$info{'objects'}"}],[6748,{"right":"$$service_owners{$sub_owner}","left":"keys %$service_owners == 1","op":"and","type":"and_3"}],[6756,{"right":"$$service{'multi_owner'}","op":"xor","type":"xor_4","left":"$multi_count > 1"}],[6775,{"right":"keys %$unknown_owners","type":"and_3","op":"and","left":"$unknown_owners"}],[6775,{"left":"$unknown_owners and keys %$unknown_owners","op":"xor","type":"xor_4","right":"$$service{'unknown_owner'}"}],[6821,{"right":"$$obj{'loopback'}","op":"or","type":"or_3","left":"$$obj{'router'}{'managed'}"}],[6872,{"op":"or","type":"or_3","left":"$$network{'has_id_hosts'}","right":"$subnet_warning_seen{$subnet}++"}],[6919,{"left":"$rule_tree","type":"or_2","op":"||=","right":"\\%rule_tree"}],[6924,{"right":"''","type":"or_2","op":"||=","left":"$stateless"}],[6925,{"left":"$deny","type":"or_2","op":"||=","right":"''"}],[6926,{"left":"$src_range","type":"or_3","op":"||=","right":"$prt_ip"}],[7039,{"right":"is_autointerface($dst)","left":"is_autointerface($src)","op":"or","type":"or_3"}],[7035,{"left":"is_subnet($src)","type":"and_3","op":"and","right":"is_subnet($dst)"}],[7035,{"type":"and_3","op":"and","left":"$$src{'is_aggregate'}","right":"$$dst{'is_aggregate'}"}],[7061,{"type":"and_3","op":"and","left":"zone_eq($$src{'zone'}, $$dst{'zone'})","right":"$$src{'ip'} == $$dst{'ip'}"}],[7061,{"op":"and","type":"and_3","left":"zone_eq($$src{'zone'}, $$dst{'zone'}) and $$src{'ip'} == $$dst{'ip'}","right":"$$src{'mask'} == $$dst{'mask'}"}],[7035,{"right":"$$src{'mask'} == 0","op":"and","type":"and_3","left":"$$src{'is_aggregate'}"}],[7035,{"type":"and_3","op":"and","left":"$$dst{'is_aggregate'}","right":"$$dst{'mask'} == 0"}],[7080,{"op":"||=","type":"or_2","left":"$$service{'seen_unenforceable'}{$src}{$dst}","right":"[$src, $dst]"}],[7089,{"right":"$$service{'seen_enforceable'}","op":"&&","type":"and_3","left":"$$service{'seen_unenforceable'}"}],[7089,{"right":"not $$service{'seen_unenforceable'} && $$service{'seen_enforceable'}","op":"and","type":"and_3","left":"$$service{'has_unenforceable'}"}],[7106,{"type":"or_3","op":"or","left":"$$service{'seen_unenforceable'}","right":"$$service{'silent_unenforceable'}"}],[7149,{"op":"and","type":"and_3","left":"$$prt1{'flags'}{'overlaps'}","right":"$$prt2{'flags'}{'overlaps'}"}],[7204,{"right":"$$prt2{'flags'}{'overlaps'}","left":"$$prt1{'flags'}{'overlaps'}","op":"and","type":"and_3"}],[7211,{"op":"or","type":"or_3","left":"$$router{'managed'}","right":"$$router{'routing_only'}"}],[7323,{"type":"or_2","op":"||=","left":"$key2log{$key}","right":"\\@tags"}],[7331,{"op":"||=","type":"or_2","left":"$expanded_rules{$action}","right":"[]"}],[7342,{"right":"get_zone($src)","left":"$obj2zone{$src}","type":"or_3","op":"||"}],[7344,{"right":"get_zone($dst)","left":"$obj2zone{$dst}","type":"or_3","op":"||"}],[7357,{"right":"$src_p eq $private","type":"and_3","op":"and","left":"$src_p"}],[7357,{"right":"$dst_p eq $private","left":"$dst_p","op":"and","type":"and_3"}],[7357,{"right":"$dst_p and $dst_p eq $private","left":"$src_p and $src_p eq $private","op":"or","type":"or_3"}],[7424,{"left":"$p1 <= 23","type":"and_3","op":"and","right":"23 <= $p2"}],[7424,{"left":"$p1 <= 22","op":"and","type":"and_3","right":"22 <= $p2"}],[7506,{"left":"$$b{'loopback'}","type":"or_2","op":"||","right":"''"}],[7506,{"right":"''","op":"||","type":"or_2","left":"$$a{'loopback'}"}],[7580,{"left":"$$interface{'bind_nat'}","op":"||","type":"or_3","right":"$bind_nat0"}],[7589,{"left":"join(',', @$nat_tags)","op":"||","type":"or_2","right":"'(none)'"}],[7590,{"right":"'(none)'","type":"or_2","op":"||","left":"join(',', @$entry_nat_tags)"}],[7611,{"left":"$$out_interface{'bind_nat'}","op":"||","type":"or_3","right":"$bind_nat0"}],[8027,{"left":"$nat_network = $$network{'nat'}{$nat_tag}","op":"and","type":"and_3","right":"$$nat_network{'dynamic'}"}],[8063,{"left":"$intf_nat","op":"and","type":"and_3","right":"$$intf_nat{$nat_tag}"}],[8126,{"type":"or_2","op":"||=","left":"$partition2tags{$mark}","right":"{}"}],[8145,{"right":"$$router{'semi_managed'}","op":"or","type":"or_3","left":"$$router{'managed'}"}],[8149,{"right":"$$router{'routing_only'}","op":"or","type":"or_3","left":"$$router{'managed'}"}],[8191,{"type":"and_3","op":"and","left":"my $href = $$network{'nat'}","right":"$no_nat_set"}],[8209,{"left":"$$network{'is_aggregate'}","op":"or","type":"or_3","right":"$$subnet{'is_aggregate'}"}],[8213,{"type":"or_3","op":"||","left":"match_ip($ip2, $sub_ip, $sub_mask)","right":"$ip1 <= $sub_ip && $sub_ip <= $ip2"}],[8213,{"left":"$ip2","type":"and_3","op":"and","right":"match_ip($ip2, $sub_ip, $sub_mask) || $ip1 <= $sub_ip && $sub_ip <= $ip2"}],[8213,{"op":"or","type":"or_3","left":"match_ip($ip1, $sub_ip, $sub_mask)","right":"$ip2 and match_ip($ip2, $sub_ip, $sub_mask) || $ip1 <= $sub_ip && $sub_ip <= $ip2"}],[8221,{"right":"my($nat_tag2) = $$subnet{'name'} =~ /^nat:(.*)\\(/","left":"my $nat_tags = $$object{'bind_nat'}","op":"and","type":"and_3"}],[8224,{"op":"and","type":"and_3","left":"grep {$_ eq $nat_tag2;} @$nat_tags","right":"$$object{'ip'} == $$subnet{'ip'}"}],[8224,{"left":"grep {$_ eq $nat_tag2;} @$nat_tags and $$object{'ip'} == $$subnet{'ip'}","type":"and_3","op":"and","right":"$$subnet{'mask'} == 4294967295"}],[8481,{"right":"{}","op":"||","type":"or_2","left":"$$network{'nat'}"}],[8576,{"right":"$$network{'is_aggregate'}","type":"or_3","op":"or","left":"$$old_net{'is_aggregate'}"}],[8576,{"left":"$$nat_old_net{'dynamic'}","type":"and_3","op":"and","right":"$$nat_network{'dynamic'}"}],[8576,{"left":"$$old_net{'loopback'}","op":"and","type":"and_3","right":"$$nat_network{'dynamic'}"}],[8576,{"right":"$$network{'loopback'}","op":"and","type":"and_3","left":"$$nat_old_net{'dynamic'}"}],[8576,{"op":"||","type":"or_2","left":"$$network{'bridged'}","right":"0"}],[8576,{"right":"1","type":"or_2","op":"||","left":"$$old_net{'bridged'}"}],[8617,{"op":"||=","type":"or_2","left":"$identical{$old_net}","right":"[$old_net]"}],[8692,{"right":"$$subnet{'is_aggregate'}","left":"$$bignet{'is_aggregate'}","op":"or","type":"or_3"}],[8692,{"right":"$$bignet{'has_subnets'}","left":"$$bignet{'is_aggregate'} or $$subnet{'is_aggregate'}","op":"or","type":"or_3"}],[8692,{"right":"$$nat_subnet{'subnet_of'} eq $bignet","left":"$$nat_subnet{'subnet_of'}","type":"and_3","op":"and"}],[8692,{"left":"$$bignet{'is_aggregate'} or $$subnet{'is_aggregate'} or $$bignet{'has_subnets'}","op":"or","type":"or_3","right":"$$nat_subnet{'subnet_of'} and $$nat_subnet{'subnet_of'} eq $bignet"}],[8692,{"right":"$$nat_subnet{'is_layer3'}","left":"$$bignet{'is_aggregate'} or $$subnet{'is_aggregate'} or $$bignet{'has_subnets'} or $$nat_subnet{'subnet_of'} and $$nat_subnet{'subnet_of'} eq $bignet","op":"or","type":"or_3"}],[8704,{"left":"$$nat_subnet{'subnet_of'}","op":"||=","type":"or_3","right":"$bignet"}],[8889,{"right":"$strength2intf{$crosslink_strength{'secondary'}}","op":"and","type":"and_3","left":"$weakest == $crosslink_strength{'local'}"}],[8901,{"right":"$out_acl_count == @{$$network{'interfaces'};}","type":"or_3","op":"or","left":"not $out_acl_count"}],[8976,{"right":"join(',', map({join '/', @$_;} @{$$router0{'filter_only'};}))","left":"$k0","type":"or_3","op":"||="}],[8992,{"type":"or_3","op":"||=","left":"$no_nat_set","right":"$$in_intf{'no_nat_set'}"}],[8993,{"left":"$$info{'no_nat_set'}","op":"||=","type":"or_3","right":"$no_nat_set"}],[9009,{"right":"match_ip($ip, $i, $m)","type":"and_3","op":"and","left":"$mask >= $m"}],[9078,{"right":"match_ip($ip, $i, $m)","type":"and_3","op":"and","left":"$mask > $m"}],[9201,{"op":"||=","type":"or_2","left":"$$aggregate{'networks'}","right":"[]"}],[9323,{"right":"'public'","op":"||","type":"or_2","left":"$$aggregate{'private'}"}],[9325,{"op":"||=","type":"or_2","left":"$private2","right":"'public'"}],[9510,{"right":"'public'","left":"$$network{'private'}","op":"||","type":"or_2"}],[9534,{"right":"$$router{'semi_managed'}","op":"or","type":"or_3","left":"$$router{'managed'}"}],[9569,{"right":"'public'","type":"or_2","op":"||","left":"$$zone{'private'}"}],[9588,{"type":"or_2","op":"||","left":"$$next{'private'}","right":"'public'"}],[9609,{"right":"$zone1","left":"$$zone1{'zone_cluster'}","type":"or_3","op":"||"}],[9609,{"left":"$$zone2{'zone_cluster'}","type":"or_3","op":"||","right":"$zone2"}],[9631,{"right":"$$obj{'routing_only'}","type":"or_3","op":"or","left":"$$obj{'managed'}"}],[9656,{"right":"not $is_zone","type":"xor_4","op":"xor","left":"$$is_inclusive{$area}"}],[9694,{"right":"keys %$attributes == 1","op":"and","type":"and_3","left":"$$attributes{'owner'}"}],[9705,{"right":"ref $val eq 'ARRAY'","type":"and_3","op":"and","left":"ref $r_val eq 'ARRAY'"}],[9705,{"op":"and","type":"and_3","left":"ref $r_val eq 'ARRAY' and ref $val eq 'ARRAY'","right":"aref_eq($r_val, $val)"}],[9705,{"type":"or_3","op":"or","left":"$r_val eq $val","right":"ref $r_val eq 'ARRAY' and ref $val eq 'ARRAY' and aref_eq($r_val, $val)"}],[9735,{"right":"defined $$nat2{$attr}","left":"defined $$nat1{$attr}","type":"xor_4","op":"xor"}],[9832,{"right":"not $$nat{'identity'}","op":"and","type":"and_3","left":"$$network{'ip'} eq 'bridged'"}],[9943,{"right":"@{$$zone{'networks'};} == 1","op":"and","type":"and_3","left":"$$network{'loopback'}"}],[9956,{"left":"$$zone{'private'}","type":"and_3","op":"and","right":"$$zone{'private'} eq 'public'"}],[10186,{"right":"''","type":"or_2","op":"||","left":"$$small{'subset_of'}"}],[10257,{"right":"$$router{'semi_managed'}","op":"or","type":"or_3","left":"$$router{'managed'}"}],[10306,{"right":"$$interface{'zone'}{'loop'}","type":"or_3","op":"||","left":"$$interface{'loop'} || $$interface{'router'}{'loop'}"}],[10368,{"right":"[$zone]","type":"or_2","op":"||","left":"$$zone{'zone_cluster'}"}],[10486,{"op":"and","type":"and_3","left":"$$reached{'zone'} eq $$reached{'router'}","right":"$$reached{'zone'} ne 'none'"}],[10647,{"right":"{'exit', $obj, 'distance', $distance}","left":"$$obj{'loop'}","op":"||=","type":"or_2"}],[10678,{"left":"$$obj{'loop'}","type":"and_3","op":"and","right":"$$obj{'loop'}{'exit'} ne $obj"}],[10735,{"right":"$$obj{'loop'}","left":"$$obj{'to_zone1'}","type":"or_3","op":"or"}],[10827,{"right":"$$router{'semi_managed'}","left":"$$router{'managed'}","type":"or_3","op":"or"}],[10832,{"right":"$obj","type":"or_3","op":"||","left":"$$obj{'main_interface'}"}],[10836,{"left":"$$main{'path_restrict'}","op":"or","type":"or_3","right":"$$main{'reachable_at'}"}],[10850,{"right":"$$obj{'semi_managed'}","op":"or","type":"or_3","left":"$$obj{'managed'}"}],[10871,{"left":"$$object{'managed'}","type":"or_3","op":"or","right":"$$object{'semi_managed'}"}],[10939,{"left":"$reachable_at","type":"and_3","op":"and","right":"$end_intf"}],[10939,{"op":"and","type":"and_3","left":"$reachable_at and $end_intf","right":"$end_intf ne $in_intf"}],[11092,{"right":"scalar keys %$navi","left":"$navi = $$from{'navi'}{$to}","op":"and","type":"and_2"}],[11179,{"op":"||","type":"or_3","left":"$$from_store{'router'} eq $from","right":"$$from_store{'zone'} eq $from"}],[11179,{"left":"is_interface($from_store)","op":"and","type":"and_3","right":"$$from_store{'router'} eq $from || $$from_store{'zone'} eq $from"}],[11179,{"op":"||","type":"or_3","left":"$$from_in{'path_restrict'}","right":"$$from_in{'reachable_at'}"}],[11179,{"op":"and","type":"and_3","left":"$from_in","right":"$$from_in{'path_restrict'} || $$from_in{'reachable_at'}"}],[11194,{"left":"$$to_store{'router'} eq $to","type":"or_3","op":"||","right":"$$to_store{'zone'} eq $to"}],[11194,{"left":"is_interface($to_store)","op":"and","type":"and_3","right":"$$to_store{'router'} eq $to || $$to_store{'zone'} eq $to"}],[11194,{"type":"or_3","op":"||","left":"$$to_out{'path_restrict'}","right":"$$to_out{'reachable_at'}"}],[11194,{"right":"$$to_out{'path_restrict'} || $$to_out{'reachable_at'}","left":"$to_out","type":"and_3","op":"and"}],[11213,{"right":"not $$from_in{'loop'}","left":"$from_in","op":"and","type":"and_3"}],[11213,{"type":"and_3","op":"and","left":"$from_in and not $$from_in{'loop'}","right":"my $restrictions = $$from_in{'path_restrict'}"}],[11213,{"op":"and","type":"and_3","left":"$from_in and not $$from_in{'loop'} and my $restrictions = $$from_in{'path_restrict'}","right":"not $start_intf"}],[11224,{"left":"$to_out","type":"and_3","op":"and","right":"not $$to_out{'loop'}"}],[11224,{"right":"my $restrictions = $$to_out{'path_restrict'}","left":"$to_out and not $$to_out{'loop'}","type":"and_3","op":"and"}],[11224,{"op":"and","type":"and_3","left":"$to_out and not $$to_out{'loop'} and my $restrictions = $$to_out{'path_restrict'}","right":"not $end_intf"}],[11248,{"right":"$$start_intf{'zone'} eq $end_node","left":"$start_intf","type":"and_3","op":"and"}],[11254,{"right":"$from_in","type":"or_3","op":"||","left":"$start_intf"}],[11284,{"left":"$success","op":"and","type":"and_3","right":"$start_intf"}],[11319,{"op":"or","type":"or_3","left":"$router eq $from","right":"$router eq $to"}],[11401,{"right":"$get_next eq 'zone'","left":"$$interface{'loopback'}","type":"and_3","op":"and"}],[11493,{"right":"not $$intf{'loop'}","type":"and_3","op":"and","left":"$intf"}],[11493,{"op":"and","type":"and_3","left":"$intf and not $$intf{'loop'}","right":"my $restrictions = $$intf{'path_restrict'}"}],[11556,{"right":"$to_loop","left":"$from_loop","type":"and_3","op":"and"}],[11556,{"op":"and","type":"and_3","left":"$from_loop and $to_loop","right":"$$from_loop{'cluster_exit'} eq $$to_loop{'cluster_exit'}"}],[11662,{"right":"$$loop_entry{'router'} eq $$loop_entry{'loop_enter'}{$loop_exit}[0]{'router'}","type":"and_3","op":"and","left":"is_interface($loop_entry)"}],[11662,{"right":"is_interface($loop_entry) and $$loop_entry{'router'} eq $$loop_entry{'loop_enter'}{$loop_exit}[0]{'router'}","op":"or","type":"or_3","left":"is_router($loop_entry)"}],[11662,{"left":"is_router($loop_entry) or is_interface($loop_entry) and $$loop_entry{'router'} eq $$loop_entry{'loop_enter'}{$loop_exit}[0]{'router'}","op":"xor","type":"xor_4","right":"$call_at_zone"}],[11691,{"right":"$call_at_zone","left":"$at_router","op":"xor","type":"xor_4"}],[11696,{"op":"||","type":"or_3","left":"is_router($loop_exit)","right":"is_interface($loop_exit) && $$loop_exit{'router'} eq $$loop_entry{'loop_leave'}{$loop_exit}[0]{'router'}"}],[11700,{"op":"xor","type":"xor_4","left":"$exit_at_router","right":"$call_at_zone"}],[11726,{"right":"$from_store","left":"$$from_store{'router'}","type":"or_3","op":"||"}],[11727,{"left":"$$to_store{'router'}","op":"||","type":"or_3","right":"$to_store"}],[11745,{"type":"and_3","op":"and","left":"$from","right":"$to"}],[11768,{"op":"&&","type":"and_3","left":"$where","right":"$where eq 'Zone'"}],[11769,{"left":"is_router($from)","op":"xor","type":"xor_4","right":"$at_zone"}],[11775,{"left":"$$from{'loop'}","type":"and_3","op":"and","right":"$$from_store{'loop_exit'}"}],[11775,{"right":"my $loop_exit = $$from_store{'loop_exit'}{$to_store}","left":"$$from{'loop'} and $$from_store{'loop_exit'}","op":"and","type":"and_3"}],[11792,{"left":"$exit_at_router","type":"xor_4","op":"xor","right":"$at_zone"}],[11804,{"right":"$$in{'loop_entry'}","type":"and_3","op":"and","left":"$in"}],[11804,{"right":"my $loop_entry = $$in{'loop_entry'}{$to_store}","left":"$in and $$in{'loop_entry'}","type":"and_3","op":"and"}],[11823,{"right":"$at_zone","left":"$exit_at_router","type":"xor_4","op":"xor"}],[11853,{"right":"get_path($src)","type":"or_3","op":"||","left":"$obj2path{$src}"}],[11854,{"right":"get_path($dst)","left":"$obj2path{$dst}","type":"or_3","op":"||"}],[11912,{"right":"get_path($src2)","left":"$obj2path{$src2}","op":"||","type":"or_3"}],[11913,{"left":"$obj2path{$dst2}","type":"or_3","op":"||","right":"get_path($dst2)"}],[11914,{"type":"or_3","op":"||","left":"$$from_store{'router'}","right":"$from_store"}],[11915,{"right":"$to_store","type":"or_3","op":"||","left":"$$to_store{'router'}"}],[11932,{"right":"my $exit = $$from_store{'loop_exit'}{$to_store}","op":"and","type":"and_3","left":"$$from_store{'loop_exit'}"}],[12030,{"op":"||","type":"or_3","left":"$$ipsec{'esp_authentication'}","right":"$$ipsec{'esp_encryption'}"}],[12033,{"op":"||","type":"or_3","left":"$obj2path{$intf1}","right":"get_path($intf1)"}],[12034,{"left":"$obj2path{$intf2}","op":"||","type":"or_3","right":"get_path($intf2)"}],[12038,{"left":"not $nat_traversal","type":"or_3","op":"or","right":"$nat_traversal ne 'on'"}],[12079,{"type":"and_3","op":"and","left":"$real_hubs","right":"@$real_hubs"}],[12082,{"left":"$real_spokes","op":"and","type":"and_3","right":"@$real_spokes"}],[12103,{"right":"not $need_id","op":"and","type":"and_3","left":"$$router{'model'}{'do_auth'}"}],[12168,{"right":"$$model{'can_dyn_crypto'}","type":"or_3","op":"or","left":"$$model{'do_auth'}"}],[12177,{"right":"$s_p eq $private","left":"$s_p","type":"and_3","op":"and"}],[12177,{"right":"$h_p eq $private","op":"and","type":"and_3","left":"$h_p"}],[12177,{"right":"$h_p and $h_p eq $private","type":"or_3","op":"or","left":"$s_p and $s_p eq $private"}],[12209,{"right":"@other","left":"$has_id_hosts","type":"and_3","op":"and"}],[12216,{"op":"and","type":"and_3","left":"$$router{'managed'}","right":"$$crypto{'detailed_crypto_acl'}"}],[12330,{"right":"$$attributes{'check-subject-name'}","op":"&&","type":"and_3","left":"$attributes"}],[12386,{"left":"$managed","type":"and_3","op":"and","right":"$$router{'model'}{'crypto'} eq 'EZVPN'"}],[12456,{"op":"and","type":"and_3","left":"$has_id_hosts","right":"$has_other_network"}],[12463,{"left":"$has_id_hosts","type":"or_3","op":"or","right":"$has_other_network"}],[12519,{"left":"$managed","type":"and_3","op":"and","right":"$$router{'model'}{'crypto'} eq 'ASA'"}],[12527,{"right":"not $$real_spoke{'ip'} =~ /^(?:short|unnumbered)$/","left":"$real_spoke","type":"and_3","op":"and"}],[12689,{"left":"$stateless","op":"||=","type":"or_2","right":"''"}],[12690,{"right":"$prt_ip","op":"||=","type":"or_3","left":"$src_range"}],[12745,{"type":"and_3","op":"and","left":"$m >= $mask","right":"match_ip($i, $ip, $mask)"}],[12745,{"op":"and","type":"and_3","left":"$m < $mask","right":"match_ip($ip, $i, $m)"}],[12745,{"left":"$m >= $mask and match_ip($i, $ip, $mask)","op":"or","type":"or_3","right":"$m < $mask and match_ip($ip, $i, $m)"}],[12821,{"type":"or_2","op":"||=","left":"$stateless","right":"''"}],[12822,{"left":"$src_range","op":"||=","type":"or_3","right":"$prt_ip"}],[12851,{"left":"$deny","op":"||=","type":"or_2","right":"''"}],[12915,{"op":"and","type":"and_3","left":"$$dst{'has_other_subnet'}","right":"$out_zone eq $dst_zone"}],[12928,{"op":"||","type":"or_3","left":"$$dst{'network'}","right":"$dst"}],[12931,{"right":"$$dst_filter_at{$mark}","left":"$$src_filter_at{$mark}","type":"and_3","op":"and"}],[12960,{"type":"and_3","op":"and","left":"$$router{'model'}{'stateless'}","right":"not $$rule{'oneway'}"}],[12983,{"right":"$proto eq 'ip'","left":"$proto eq 'tcp' || $proto eq 'udp'","op":"||","type":"or_3"}],[12983,{"right":"$m1 == $m2","left":"$proto eq 'tcp' || $proto eq 'udp' || $proto eq 'ip'","op":"and","type":"and_3"}],[13016,{"op":"and","type":"and_3","left":"$$intf{'loopback'}","right":"not $$intf{'vip'}"}],[13071,{"right":"$src","left":"$$src{'network'}","type":"or_3","op":"||"}],[13075,{"right":"$$dst_filter_at{$mark}","op":"and","type":"and_3","left":"$$src_filter_at{$mark}"}],[13116,{"type":"and_3","op":"and","left":"$$intf{'loopback'}","right":"not $$intf{'vip'}"}],[13244,{"right":"''","op":"||=","type":"or_2","left":"$stateless1"}],[13246,{"right":"$prt_ip","op":"||=","type":"or_3","left":"$src_range1"}],[13269,{"right":"get_zone($src1)","op":"||","type":"or_3","left":"$obj2zone{$src1}"}],[13269,{"op":"||","type":"or_3","left":"$obj2zone{$dst2}","right":"get_zone($dst2)"}],[13277,{"right":"$prt_ip","type":"or_3","op":"||","left":"$$rule2{'src_range'}"}],[13287,{"right":"$stateless2","left":"$stateless1","op":"||","type":"or_3"}],[13459,{"right":"$$router{'managed'} =~ /^(?:secondary|local.*)$/","op":"or","type":"or_3","left":"$$router{'model'}{'stateless'}"}],[13476,{"type":"or_3","op":"or","left":"$$Netspoc::Compiler::Pass1::config{'check_supernet_rules'}","right":"$$Netspoc::Compiler::Pass1::config{'check_transient_supernet_rules'}"}],[13479,{"type":"or_3","op":"or","left":"$$_{'src'}{'has_other_subnet'}","right":"$$_{'dst'}{'has_other_subnet'}"}],[13538,{"right":"$proto eq 'udp'","left":"$proto eq 'tcp'","type":"or_3","op":"or"}],[13538,{"left":"$proto eq 'tcp' or $proto eq 'udp'","type":"or_3","op":"or","right":"$proto eq 'ip'"}],[13545,{"type":"and_3","op":"and","left":"$proto eq 'tcp'","right":"$deny"}],[13574,{"right":"$$model{'stateless_self'}","op":"and","type":"and_3","left":"not $in_intf"}],[13574,{"right":"not $in_intf and $$model{'stateless_self'}","left":"$$model{'stateless'}","op":"or","type":"or_3"}],[13591,{"right":"0","left":"$has_stateless_router","op":"||","type":"or_2"}],[13632,{"right":"$index++","left":"$src_range2index{$new_src_range}","type":"or_3","op":"||="}],[13789,{"left":"1 == @$src_zones","type":"and_3","op":"and","right":"1 == @$dst_zones"}],[13834,{"right":"have_different_marks($src_zones, $dst_zones, 'local_secondary_mark')","left":"have_set_and_equal_marks($src_zones, $dst_zones, 'local_mark')","op":"and","type":"and_3"}],[13852,{"right":"[$zone]","type":"or_2","op":"||","left":"$$zone{'zone_cluster'}"}],[13875,{"right":"$$obj{'nat'}{$nat_tag}","left":"$$obj{'nat'}","type":"and_3","op":"and"}],[13888,{"right":"$managed eq 'full'","op":"or","type":"or_3","left":"$managed eq 'primary'"}],[13965,{"right":"$obj","left":"$$obj{'network'}","type":"or_3","op":"||"}],[13968,{"right":"$other","left":"$$other{'network'}","op":"||","type":"or_3"}],[14017,{"right":"$out_intf","type":"or_3","op":"||","left":"$in_intf"}],[14031,{"type":"or_3","op":"or","left":"not $intf","right":"zone_eq($$network{'zone'}, $$intf{'zone'})"}],[14050,{"right":"$proto eq 'ip'","left":"$proto eq 'udp'","op":"or","type":"or_3"}],[14076,{"right":"get_path($obj)","left":"$obj2path{$obj}","type":"or_3","op":"||"}],[14077,{"right":"get_path($other)","left":"$obj2path{$other}","type":"or_3","op":"||"}],[14078,{"right":"$cache{$to_store}{$from_store}","left":"$cache{$from_store}{$to_store}","op":"||","type":"or_3"}],[14091,{"type":"or_3","op":"or","left":"$is_hidden","right":"$static_seen"}],[14168,{"left":"$$chg_rule{'log'}","op":"||","type":"or_2","right":"''"}],[14181,{"right":"''","op":"||","type":"or_2","left":"$$cmp_rule{'log'}"}],[14187,{"op":"and","type":"and_3","left":"$cmp_rule ne $chg_rule","right":"$cmp_log eq $chg_log"}],[14267,{"right":"get_path($element0)","type":"or_3","op":"||","left":"$obj2path{$element0}"}],[14270,{"type":"or_3","op":"||","left":"$obj2path{$_}","right":"get_path($_)"}],[14277,{"right":"$index++","left":"$path2index{$path}","type":"or_3","op":"||="}],[14413,{"right":"$$in_hw{'level'} < $$out_hw{'level'}","left":"$$nat_net{'dynamic'}","op":"and","type":"and_3"}],[14426,{"right":"$type eq 'Interface'","left":"$type eq 'Subnet'","op":"or","type":"or_3"}],[14465,{"right":"{}","left":"$$info{'src_net'}","op":"||=","type":"or_2"}],[14466,{"right":"{}","type":"or_2","op":"||=","left":"$$info{'dst_net'}"}],[14504,{"left":"$type eq 'Subnet'","op":"or","type":"or_3","right":"$type eq 'Interface'"}],[14663,{"left":"1 == @hop_intf","op":"or","type":"or_3","right":"is_redundany_group(\\@hop_intf)"}],[14718,{"right":"$$route_in_zone{$out_net}","left":"$$route_in_zone{'default'}","op":"||","type":"or_3"}],[14750,{"right":"$$route_in_zone{$network}","left":"$$route_in_zone{'default'}","type":"or_3","op":"||"}],[14784,{"right":"$out_intf","op":"and","type":"and_3","left":"$in_intf"}],[14815,{"right":"$is_intf","left":"$src_zone eq $dst_zone","type":"and_3","op":"and"}],[14821,{"type":"or_3","op":"||","left":"$$from{'main_interface'}","right":"$from"}],[14840,{"left":"$is_intf","type":"and_3","op":"&&=","right":"$is_intf eq 'src' ? 'dst' : ($is_intf eq 'dst' ? 'src' : $is_intf)"}],[14875,{"left":"$$router{'managed'}","type":"or_3","op":"or","right":"$$router{'routing_only'}"}],[14876,{"left":"$$intf{'main_interface'}","op":"||","type":"or_3","right":"$intf"}],[15147,{"op":"||","type":"or_3","left":"$$route_in_zone{'default'}","right":"$$route_in_zone{$peer_net}"}],[15180,{"right":"$$route_in_zone{$hop_net}","type":"or_3","op":"||","left":"$$route_in_zone{'default'}"}],[15192,{"type":"and_3","op":"and","left":"@hops > 1","right":"equal(map({$_ unless $$_{'redundancy_interfaces'};} @hops))"}],[15192,{"right":"@hops == 1","op":"or","type":"or_3","left":"@hops > 1 and equal(map({$_ unless $$_{'redundancy_interfaces'};} @hops))"}],[15197,{"right":"{}","type":"or_2","op":"||=","left":"$$real_intf{'routes'}{$hop}"}],[15248,{"right":"$$interface{'routing'}","left":"$$interface{'loop'}","op":"and","type":"and_3"}],[15260,{"right":"$$interface2{'routing'}","op":"or","type":"or_3","left":"$$interface{'routing'}"}],[15285,{"right":"$group2","left":"$group","type":"and_3","op":"and"}],[15285,{"op":"and","type":"and_3","left":"$group and $group2","right":"$group eq $group2"}],[15315,{"op":"and","type":"and_3","left":"@$hops == 1","right":"my $phys_hop = $$hop1{'orig_main'}"}],[15361,{"right":"''","type":"or_2","op":"||","left":"$$model{'crypto'}"}],[15379,{"right":"$$interface{'hub'}","op":"and","type":"and_3","left":"$asa_crypto"}],[15394,{"left":"$ip == 0","op":"and","type":"and_3","right":"$mask == 0"}],[15475,{"left":"$asa_crypto","op":"and","type":"and_3","right":"$$interface{'hub'}"}],[15533,{"left":"$max_intf","type":"and_3","op":"and","right":"$max_hop"}],[15567,{"right":"not $nxos_prefix","type":"and_3","op":"and","left":"$vrf"}],[15621,{"op":"||","type":"or_2","left":"get_nat_network($a, $out_nat)->{'ip'}","right":"0"}],[15621,{"right":"0","left":"get_nat_network($b, $out_nat)->{'ip'}","op":"||","type":"or_2"}],[15621,{"op":"or","type":"or_3","left":"$$a{'ip'} <=> $$b{'ip'}","right":"$$a{'mask'} <=> $$b{'mask'}"}],[15644,{"op":"or","type":"or_3","left":"$in_hidden","right":"$out_hidden"}],[15648,{"right":"$in_dynamic","op":"and","type":"and_3","left":"$out_dynamic"}],[15648,{"type":"and_3","op":"and","left":"$out_dynamic and $in_dynamic","right":"$out_dynamic eq $in_dynamic"}],[15710,{"left":"$global_index","type":"and_3","op":"and","right":"$nat_index"}],[15712,{"right":"$dyn_index++","type":"or_3","op":"||","left":"$global_index || $nat_index"}],[15719,{"right":"$out_mask == 4294967295","left":"$out_ip == $out_intf_ip","type":"and_3","op":"and"}],[15757,{"left":"$$in_hw{'level'} > $$out_hw{'level'}","op":"or","type":"or_3","right":"$$in_hw{'need_identity_nat'}"}],[15757,{"left":"$$in_hw{'level'} > $$out_hw{'level'} or $$in_hw{'need_identity_nat'}","type":"or_3","op":"or","right":"$in_ip != $out_ip"}],[15799,{"right":"$out","left":"$in","op":"and","type":"and_3"}],[15799,{"op":"and","type":"and_3","left":"$in and $out","right":"$in eq $out"}],[15816,{"type":"and_3","op":"and","left":"$$net_hash{$net}","right":"$net2 = $$network{'is_in'}{$in_nat}"}],[15816,{"left":"$$net_hash{$net} and $net2 = $$network{'is_in'}{$in_nat}","op":"and","type":"and_3","right":"$$net_hash{$net2}"}],[15868,{"right":"$$model{'stateless_self'}","left":"not $out_intf","op":"and","type":"and_3"}],[15868,{"left":"$$model{'stateless'}","type":"or_3","op":"or","right":"not $out_intf and $$model{'stateless_self'}"}],[15879,{"type":"and_3","op":"and","left":"$$rule{'stateless_icmp'}","right":"not $$model{'stateless_icmp'}"}],[15892,{"right":"$obj","left":"$$obj{'network'}","op":"||","type":"or_3"}],[15933,{"type":"and_3","op":"and","left":"$key eq 'rules'","right":"$$model{'has_io_acl'}"}],[16342,{"right":"$dst","op":"||","type":"or_3","left":"$$dst{'network'}"}],[16557,{"type":"and_3","op":"and","left":"$spec","right":"$$spec{'tg_general'}"}],[16564,{"right":"$trust_point","left":"delete $$attributes{'trust-point'}","op":"||","type":"or_3"}],[16647,{"type":"or_3","op":"or","left":"keys %cert_group_map","right":"keys %single_cert_map"}],[16769,{"right":"$$model{'class'} eq 'ASA'","left":"$$hardware{'name'} eq 'device'","type":"and_3","op":"and"}],[16773,{"op":"||=","type":"or_2","left":"$$hardware{'rules'}","right":"[]"}],[16779,{"left":"$suffix eq 'out'","op":"and","type":"and_3","right":"not $$hardware{'need_out_acl'}"}],[16784,{"right":"[]","left":"$$hardware{$_}","type":"or_2","op":"||"}],[16841,{"right":"equal(@redundant)","op":"and","type":"and_3","left":"@redundant == @interfaces"}],[16863,{"right":"$filter eq 'NX-OS'","op":"or","type":"or_3","left":"$filter eq 'IOS'"}],[17079,{"right":"$crypto_type eq 'IOS'","op":"and","type":"and_3","left":"$lifetime == 3600"}],[17257,{"left":"$$model{'crypto'}","type":"or_2","op":"||","right":"''"}],[17349,{"type":"and_3","op":"and","left":"$crypto_type eq 'ASA'","right":"$$isakmp{'ike_version'} == 2"}],[17451,{"right":"$$model{'has_vip'}","op":"and","type":"and_3","left":"$name eq 'VIP'"}],[17493,{"right":"$stateful","left":"$class eq 'IOS'","op":"and","type":"and_3"}],[17493,{"right":"not $$hardware{'loopback'}","type":"and_3","op":"and","left":"$class eq 'IOS' and $stateful"}],[17515,{"right":"full_prefix_code(address($obj, $no_nat_set))","op":"||=","type":"or_3","left":"$obj2nat2address{$obj}{$no_nat_set}"}],[17528,{"right":"$proto eq 'udp'","type":"or_3","op":"or","left":"$proto eq 'tcp'"}],[17549,{"right":"''","left":"$$router{'managed'}","type":"or_2","op":"||"}],[17559,{"type":"or_3","op":"or","left":"$$router{'need_protect'}","right":"$$router{'crosslink_interfaces'}"}],[17597,{"op":"and","type":"and_3","left":"$need_protect","right":"delete $$acl{'protect_self'}"}],[17617,{"right":"my $log = $$rule{'log'}","op":"and","type":"and_3","left":"$active_log"}],[17639,{"left":"$$router{'log_deny'}","op":"and","type":"and_3","right":"$deny"}],[17646,{"op":"and","type":"and_3","left":"$secondary_filter","right":"$$rule{'some_non_secondary'}"}],[17646,{"type":"and_3","op":"and","left":"$standard_filter","right":"$$rule{'some_primary'}"}],[17646,{"op":"or","type":"or_3","left":"$secondary_filter and $$rule{'some_non_secondary'}","right":"$standard_filter and $$rule{'some_primary'}"}],[17677,{"right":"$type eq 'Interface'","left":"$type eq 'Subnet'","op":"or","type":"or_3"}],[17910,{"right":"-d $in_path","left":"defined $in_path","type":"and_3","op":"and"}],[18082,{"type":"or_3","op":"||","left":"$$Netspoc::Compiler::Pass1::config{'start_time'}","right":"time"}]],"subroutine":[[29,"BEGIN"],[30,"BEGIN"],[31,"BEGIN"],[32,"BEGIN"],[33,"BEGIN"],[34,"BEGIN"],[35,"BEGIN"],[42,"BEGIN"],[3872,"BEGIN"],[13584,"BEGIN"],[145,"store_description"],[157,"fast_mode"],[307,"equal"],[315,"unique"],[320,"find_duplicates"],[326,"intersect"],[332,"max"],[342,"aref_delete"],[356,"aref_eq"],[365,"keys_eq"],[374,"warn_msg"],[396,"context"],[409,"at_line"],[416,"check_abort"],[426,"abort_on_error"],[431,"set_abort_immediately"],[436,"error_atline"],[443,"err_msg"],[450,"syntax_err"],[455,"internal_err"],[479,"skip_space_and_comment"],[493,"check"],[501,"skip"],[507,"check_int"],[517,"read_int"],[524,"check_ip"],[537,"read_ip"],[545,"read_ip_prefix"],[557,"read_ip_prefix_pair"],[562,"gen_ip"],[569,"print_ip"],[574,"read_identifier"],[585,"read_owner_pattern"],[596,"read_name"],[607,"read_string"],[621,"read_union"],[650,"check_typed_name"],[677,"read_typed_name"],[706,"read_extended_name"],[775,"read_user_id"],[786,"check_hostname"],[802,"read_complement"],[811,"read_intersection"],[833,"read_time_val"],[840,"add_description"],[856,"check_permit_deny"],[866,"check_nat_name"],[876,"split_typed_name"],[883,"check_flag"],[894,"check_assign"],[912,"read_list"],[928,"read_list_or_null"],[934,"read_assign_list"],[941,"check_assign_list"],[950,"check_assign_pair"],[971,"new"],[977,"add_attribute"],[986,"check_radius_attributes"],[1001,"check_routing"],[1008,"check_managed"],[1038,"check_model"],[1069,"host_as_interface"],[1110,"read_host"],[1221,"read_nat"],[1278,"read_network"],[1495,"read_interface"],[1797,"set_pix_interface_level"],[1841,"check_no_in_acl"],[1897,"read_router"],[2447,"move_locked_interfaces"],[2497,"read_aggregate"],[2547,"check_router_attributes"],[2582,"read_area"],[2646,"read_group"],[2659,"read_protocolgroup"],[2666,"read_port_range"],[2696,"read_port_ranges"],[2711,"read_icmp_type_code"],[2739,"read_proto_nr"],[2767,"gen_protocol_name"],[2775,"__ANON__"],[2813,"cache_anonymous_protocol"],[2827,"read_simple_protocol"],[2864,"check_protocol_modifiers"],[2881,"read_typed_name_or_simple_protocol"],[2885,"read_protocol"],[2896,"assign_union_allow_user"],[2906,"read_service"],[2990,"read_pathrestriction"],[3001,"read_attributed_object"],[3079,"read_isakmp"],[3117,"read_ipsec"],[3124,"read_crypto"],[3151,"read_owner"],[3216,"read_netspoc"],[3237,"read_file"],[3266,"read_file_or_dir"],[3278,"__ANON__"],[3296,"__ANON__"],[3332,"show_read_statistics"],[3347,"is_network"],[3348,"is_router"],[3349,"is_interface"],[3350,"is_host"],[3351,"is_subnet"],[3352,"is_area"],[3353,"is_zone"],[3354,"is_group"],[3355,"is_protocolgroup"],[3356,"is_autointerface"],[3361,"print_rule"],[3383,"get_orig_prt"],[3404,"prepare_prt_ordering"],[3466,"order_icmp"],[3492,"order_proto"],[3509,"order_ranges"],[3526,"__ANON__"],[3658,"expand_splitted_protocol"],[3713,"order_protocols"],[3762,"link_to_owner"],[3778,"link_to_real_owner"],[3797,"expand_watchers"],[3841,"link_owners"],[3933,"link_policy_distribution_point"],[3958,"link_general_permit"],[4004,"link_areas"],[4064,"link_interfaces"],[4119,"check_interface_ip"],[4181,"link_routers"],[4190,"link_subnet"],[4193,"__ANON__"],[4244,"link_subnets"],[4259,"add_pathrestriction"],[4273,"link_pathrestrictions"],[4372,"link_virtual_interfaces"],[4491,"is_redundany_group"],[4499,"check_ip_addresses"],[4599,"link_topology"],[4628,"disable_behind"],[4681,"check_bridged_networks"],[4744,"mark_disabled"],[4890,"split_ip_range"],[4906,"owner_eq"],[4913,"check_host_compatibility"],[4949,"convert_hosts"],[5133,"combine_subnets"],[5186,"get_intf"],[5201,"get_auto_intf"],[5241,"check_auto_intf"],[5307,"expand_group1"],[5548,"__ANON__"],[5565,"__ANON__"],[5805,"remove_duplicates"],[5824,"expand_group"],[5843,"expand_group_in_rule"],[5886,"__ANON__"],[5893,"check_unused_groups"],[5917,"expand_protocols"],[5978,"split_protocols"],[6045,"expand_auto_intf_with_dst_list"],[6099,"substitute_auto_intf"],[6127,"classify_protocols"],[6177,"normalize_service_rules"],[6285,"normalize_services"],[6341,"propagate_owners"],[6414,"__ANON__"],[6439,"__ANON__"],[6454,"__ANON__"],[6484,"__ANON__"],[6662,"show_unknown_owners"],[6686,"set_service_owner"],[6766,"__ANON__"],[6803,"apply_src_dst_modifier"],[6837,"convert_hosts_in_rules"],[6918,"add_rules"],[6948,"get_zone"],[6998,"add_managed_hosts"],[7020,"collect_unenforceable"],[7085,"show_unenforceable"],[7130,"warn_useless_unenforceable"],[7141,"show_deleted_rules1"],[7196,"collect_redundant_rules"],[7235,"show_deleted_rules2"],[7276,"warn_unused_overlaps"],[7296,"collect_log"],[7306,"check_log"],[7320,"normalize_log"],[7329,"expand_rules"],[7391,"print_rulecount"],[7400,"expand_services"],[7419,"set_policy_distribution_ip"],[7433,"__ANON__"],[7565,"set_natdomain"],[7637,"distribute_nat1"],[7783,"distribute_nat"],[7795,"distribute_nat_info"],[7845,"__ANON__"],[8089,"invert_nat_set"],[8092,"__ANON__"],[8162,"adjust_crypto_nat"],[8190,"get_nat_network"],[8208,"check_subnets"],[8212,"__ANON__"],[8254,"nat_to_loopback_ok"],[8281,"by_name"],[8288,"find_subnets_in_zone"],[8450,"__ANON__"],[8480,"__ANON__"],[8555,"find_subnets_in_nat_domain"],[8779,"cluster_crosslink_routers"],[8786,"__ANON__"],[8833,"check_crosslink"],[8936,"get_managed_local_clusters"],[8951,"__ANON__"],[8969,"__ANON__"],[9058,"mark_managed_local"],[9065,"__ANON__"],[9112,"link_reroute_permit"],[9148,"add_managed_hosts_to_aggregate"],[9193,"link_aggregate_to_zone"],[9226,"link_implicit_aggregate_to_zone"],[9235,"__ANON__"],[9292,"link_aggregates"],[9384,"duplicate_aggregate_to_cluster"],[9421,"get_any"],[9477,"get_cluster_aggregates"],[9490,"set_zone1"],[9563,"set_zone_cluster"],[9608,"zone_eq"],[9622,"set_area1"],[9690,"inherit_router_attributes"],[9731,"nat_equal"],[9749,"check_useless_nat"],[9766,"inherit_area_nat"],[9799,"inherit_attributes_from_area"],[9812,"inherit_nat_to_subnets_in_zone"],[9874,"inherit_nat_in_zone"],[9901,"cleanup_after_inheritance"],[9919,"inherit_attributes"],[9930,"set_zones"],[9972,"cluster_zones"],[9993,"prepare_area_borders"],[10021,"set_area"],[10046,"set_areas"],[10104,"find_area_subset_relations"],[10166,"check_routers_in_nested_areas"],[10217,"clean_areas"],[10230,"set_zone"],[10251,"check_virtual_interfaces"],[10296,"check_pathrestrictions"],[10425,"traverse_loop_part"],[10468,"apply_pathrestriction_optimization"],[10532,"optimize_pathrestrictions"],[10599,"setpath_obj"],[10696,"set_loop_cluster"],[10729,"find_dists_and_loops"],[10756,"process_loops"],[10794,"setpath"],[10814,"get_path"],[10914,"cluster_path_mark1"],[11087,"cluster_navigation"],[11164,"cluster_path_mark"],[11525,"path_mark"],[11653,"loop_path_walk"],[11719,"path_walk"],[11850,"single_path_walk"],[11861,"set_auto_intf_from_border"],[11865,"__ANON__"],[11904,"path_auto_interfaces"],[11989,"link_ipsec"],[12007,"link_crypto"],[12028,"gen_tunnel_rules"],[12067,"link_tunnels"],[12248,"crypto_behind"],[12292,"verify_asa_vpn_attributes"],[12324,"verify_subject_name"],[12328,"__ANON__"],[12347,"verify_asa_trustpoint"],[12360,"expand_crypto"],[12612,"setup_ref2obj"],[12666,"collect_supernet_dst_rules"],[12697,"find_supernet"],[12723,"find_zone_network"],[12776,"find_matching_supernet"],[12817,"check_supernet_in_zone"],[12901,"check_supernet_src_rule"],[13056,"check_supernet_dst_rule"],[13132,"check_supernet_dst_collections"],[13170,"find_smaller_prt"],[13224,"check_for_transient_supernet_rule"],[13453,"mark_stateful"],[13475,"check_supernet_rules"],[13527,"gen_reverse_rules1"],[13561,"__ANON__"],[13661,"gen_reverse_rules"],[13694,"mark_secondary"],[13724,"mark_primary"],[13750,"mark_local_secondary"],[13774,"get_zones"],[13788,"have_different_marks"],[13798,"have_set_and_equal_marks"],[13805,"mark_secondary_rules"],[13851,"get_zone_cluster_borders"],[13866,"mark_dynamic_host_nets"],[13901,"check_dynamic_nat_rules"],[13939,"__ANON__"],[14016,"__ANON__"],[14120,"optimize_rules"],[14246,"optimize_and_warn_deleted"],[14260,"split_rules_by_path"],[14300,"remove_unenforceable_rules"],[14313,"group_path_rules"],[14339,"collect_nat_path"],[14358,"distribute_nat_to_device"],[14423,"add_networks"],[14447,"prepare_nat_commands"],[14500,"get_route_networks"],[14543,"set_routes_in_zone"],[14571,"__ANON__"],[14616,"__ANON__"],[14705,"add_path_routes"],[14742,"add_end_routes"],[14774,"get_route_path"],[14806,"generate_routing_tree1"],[14896,"generate_routing_tree"],[14955,"generate_routing_info"],[15036,"find_active_routes"],[15065,"fix_bridged_hops"],[15089,"check_and_convert_routes"],[15164,"__ANON__"],[15348,"print_header"],[15356,"print_routes"],[15604,"print_nat1"],[15686,"print_pix_static"],[15699,"__ANON__"],[15747,"__ANON__"],[15756,"__ANON__"],[15781,"optimize_nat_networks"],[15834,"print_nat"],[15850,"distribute_rule"],[15891,"__ANON__"],[16001,"add_router_acls"],[16118,"create_general_permit_rules"],[16133,"distribute_general_permit"],[16197,"rules_distribution"],[16227,"address"],[16297,"ios_route_code"],[16307,"prefix_code"],[16315,"full_prefix_code"],[16325,"print_acl_placeholder"],[16335,"get_split_tunnel_nets"],[16360,"print_asavpn"],[16400,"__ANON__"],[16666,"print_acl_prefix"],[16699,"print_acl_suffix"],[16712,"print_iptables_acls"],[16758,"print_cisco_acls"],[16888,"generate_acls"],[16903,"gen_crypto_rules"],[16908,"print_ezvpn"],[16994,"print_crypto_acl"],[17024,"print_crypto_filter_acl"],[17047,"print_crypto_map_attributes"],[17090,"print_tunnel_group"],[17116,"print_ca_and_tunnel_group_map"],[17127,"print_static_crypto_map"],[17205,"print_dynamic_crypto_map"],[17255,"print_crypto"],[17444,"print_interface"],[17514,"print_address"],[17521,"print_prt"],[17544,"print_acls"],[17783,"check_output_dir"],[17812,"print_code"],[17873,"__ANON__"],[17909,"copy_raw"],[17955,"show_version"],[17963,"init_protocols"],[18082,"init_global_vars"],[18115,"compile"]],"statement":[29,29,29,30,30,30,31,31,31,32,32,32,33,33,33,34,34,34,35,35,35,42,42,42,3872,3872,3872,13584,13584,13584,145,146,147,150,157,158,159,162,307,308,309,309,315,316,316,320,321,322,322,326,327,327,328,328,332,333,334,336,342,343,344,345,348,351,356,357,358,359,361,365,366,367,368,370,374,375,396,397,398,401,403,405,409,416,417,418,421,426,427,431,432,436,437,438,439,443,444,445,446,450,451,455,459,460,462,463,464,465,467,479,480,484,485,493,494,495,496,501,502,507,508,509,512,517,518,519,524,525,526,527,529,532,537,538,539,545,546,547,548,549,552,553,557,558,562,563,569,570,574,575,576,579,585,586,587,590,596,597,598,601,607,608,609,612,621,622,623,624,625,626,627,628,629,632,634,635,636,637,641,645,650,651,652,653,654,655,656,659,662,663,664,667,670,673,677,706,709,711,712,714,715,716,717,719,720,721,722,725,726,727,729,732,734,737,739,744,747,749,750,751,752,753,755,756,759,760,762,765,766,770,775,776,777,780,786,787,788,789,792,796,802,803,806,811,812,813,815,816,819,833,834,835,836,840,841,842,847,848,849,851,856,857,858,861,866,867,868,871,876,879,883,884,885,886,889,894,895,896,897,898,899,900,903,904,905,908,912,913,914,915,916,917,920,922,924,928,929,930,934,935,936,937,941,942,943,944,946,950,951,952,953,954,955,956,957,959,971,972,973,977,978,979,980,986,987,988,989,990,991,992,993,994,995,997,1001,1002,1004,1008,1009,1010,1011,1014,1015,1020,1023,1029,1032,1034,1038,1040,1041,1042,1045,1047,1050,1049,1051,1052,1054,1055,1056,1057,1059,1069,1070,1071,1072,1073,1074,1077,1080,1082,1083,1088,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1105,1106,1110,1111,1112,1113,1116,1117,1119,1120,1121,1122,1123,1124,1125,1126,1129,1130,1136,1138,1141,1142,1145,1148,1151,1154,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1168,1171,1175,1178,1181,1182,1193,1194,1195,1198,1199,1201,1202,1205,1208,1209,1214,1217,1221,1224,1225,1226,1227,1228,1229,1230,1231,1232,1235,1238,1244,1247,1250,1253,1254,1255,1255,1256,1260,1263,1264,1264,1265,1267,1270,1272,1278,1282,1283,1284,1285,1286,1288,1289,1290,1291,1292,1293,1294,1295,1298,1299,1304,1309,1312,1315,1318,1321,1322,1323,1324,1324,1325,1330,1330,1331,1334,1334,1337,1339,1340,1341,1342,1343,1345,1347,1350,1351,1354,1355,1358,1363,1366,1368,1369,1372,1373,1374,1383,1395,1396,1397,1404,1405,1406,1407,1408,1410,1415,1416,1416,1419,1420,1421,1426,1426,1427,1432,1437,1443,1443,1444,1446,1449,1449,1450,1451,1460,1460,1460,1463,1463,1467,1468,1471,1475,1495,1496,1499,1500,1501,1502,1505,1506,1507,1508,1509,1510,1511,1512,1516,1517,1518,1520,1524,1527,1530,1533,1536,1539,1544,1547,1548,1549,1550,1550,1554,1555,1556,1559,1562,1565,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1579,1584,1585,1586,1587,1588,1589,1590,1593,1596,1597,1600,1604,1608,1611,1616,1617,1618,1619,1620,1621,1624,1626,1629,1631,1632,1635,1638,1639,1644,1645,1648,1651,1654,1657,1657,1658,1659,1661,1664,1667,1670,1677,1678,1684,1685,1686,1687,1691,1693,1697,1700,1699,1699,1701,1704,1706,1707,1708,1711,1712,1713,1716,1718,1719,1720,1722,1723,1727,1730,1731,1731,1732,1733,1735,1736,1737,1738,1742,1745,1746,1747,1747,1748,1748,1749,1752,1754,1758,1765,1769,1770,1771,1773,1774,1774,1777,1778,1779,1781,1784,1785,1786,1787,1790,1797,1798,1798,1799,1800,1801,1802,1802,1803,1806,1807,1813,1817,1820,1828,1830,1832,1841,1842,1845,1845,1846,1847,1850,1851,1854,1854,1854,1860,1863,1865,1868,1873,1877,1877,1877,1878,1885,1885,1886,1889,1897,1902,1904,1905,1908,1909,1911,1912,1913,1914,1915,1916,1917,1919,1924,1927,1930,1933,1936,1939,1942,1945,1948,1953,1961,1964,1965,1966,1967,1969,1970,1971,1972,1975,1979,1980,1981,1981,1982,1983,1984,1988,1991,1994,1997,2002,2007,2007,2008,2008,2009,2010,2013,2014,2017,2020,2018,2023,2030,2031,2033,2034,2037,2041,2042,2043,2044,2047,2054,2055,2055,2058,2059,2062,2066,2069,2070,2074,2077,2078,2083,2091,2092,2093,2093,2094,2095,2099,2105,2109,2110,2115,2115,2121,2122,2130,2131,2133,2136,2137,2145,2146,2147,2149,2153,2158,2159,2160,2163,2165,2167,2168,2170,2171,2174,2179,2180,2185,2189,2190,2194,2194,2195,2198,2201,2202,2206,2209,2210,2216,2217,2217,2218,2219,2220,2221,2222,2228,2232,2234,2235,2240,2244,2248,2249,2253,2259,2260,2265,2266,2267,2267,2268,2269,2270,2274,2275,2278,2278,2278,2281,2282,2285,2287,2288,2288,2288,2292,2294,2294,2294,2300,2300,2300,2304,2307,2310,2311,2317,2318,2319,2321,2321,2322,2323,2326,2327,2332,2333,2338,2339,2344,2346,2346,2349,2350,2356,2361,2362,2369,2370,2372,2373,2384,2385,2387,2389,2394,2395,2396,2404,2405,2406,2409,2410,2412,2413,2413,2416,2421,2422,2424,2427,2427,2430,2433,2437,2439,2447,2448,2449,2453,2454,2461,2462,2465,2469,2470,2471,2473,2474,2475,2476,2479,2480,2481,2481,2484,2487,2491,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2510,2513,2516,2519,2520,2521,2523,2526,2529,2530,2531,2532,2533,2535,2535,2537,2541,2543,2547,2550,2551,2552,2553,2554,2555,2556,2557,2562,2570,2573,2576,2582,2583,2584,2585,2586,2587,2588,2589,2590,2590,2591,2592,2594,2599,2599,2600,2601,2603,2606,2609,2610,2611,2613,2616,2619,2622,2623,2624,2626,2629,2632,2637,2640,2646,2647,2648,2649,2650,2651,2652,2653,2659,2660,2661,2662,2666,2667,2668,2669,2670,2671,2672,2673,2675,2676,2679,2683,2687,2691,2696,2697,2698,2699,2700,2702,2705,2707,2711,2712,2713,2714,2715,2716,2717,2718,2721,2725,2726,2727,2735,2739,2740,2741,2742,2743,2744,2749,2750,2753,2754,2757,2761,2763,2767,2768,2769,2771,2785,2775,2776,2777,2780,2783,2786,2787,2788,2788,2789,2790,2791,2792,2795,2796,2797,2800,2805,2807,2813,2814,2815,2816,2819,2820,2821,2822,2827,2828,2829,2830,2831,2834,2835,2838,2839,2842,2843,2846,2849,2852,2854,2855,2858,2860,2864,2865,2866,2867,2871,2874,2877,2881,2885,2886,2887,2888,2889,2890,2896,2897,2898,2899,2900,2901,2902,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2918,2921,2924,2927,2930,2933,2936,2941,2942,2943,2945,2946,2948,2949,2950,2951,2952,2953,2955,2956,2957,2960,2962,2963,2969,2977,2978,2978,2981,2984,2990,2991,2992,2993,2994,2995,2996,2997,3001,3002,3003,3004,3005,3006,3007,3008,3009,3011,3012,3013,3014,3015,3015,3019,3022,3024,3025,3027,3028,3029,3030,3031,3034,3039,3040,3041,3042,3046,3079,3080,3117,3118,3124,3125,3126,3127,3128,3129,3130,3131,3132,3133,3136,3138,3141,3144,3145,3151,3152,3153,3154,3155,3156,3157,3158,3159,3161,3164,3166,3169,3171,3174,3177,3180,3183,3186,3189,3190,3192,3194,3216,3217,3218,3220,3221,3222,3223,3224,3232,3237,3238,3241,3242,3244,3245,3250,3251,3254,3255,3257,3258,3259,3260,3262,3266,3267,3270,3271,3272,3276,3292,3278,3279,3280,3281,3282,3283,3284,3285,3287,3290,3309,3296,3299,3300,3301,3303,3304,3307,3313,3314,3314,3315,3317,3319,3320,3323,3325,3326,3328,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3347,3348,3349,3350,3351,3352,3353,3354,3355,3356,3361,3363,3364,3365,3366,3367,3368,3369,3370,3371,3372,3373,3374,3376,3377,3379,3383,3384,3385,3386,3387,3390,3404,3405,3406,3407,3415,3418,3419,3420,3421,3422,3427,3430,3432,3436,3437,3438,3439,3443,3449,3450,3453,3460,3462,3466,3469,3470,3471,3473,3476,3479,3482,3486,3488,3492,3493,3494,3497,3499,3509,3516,3510,3523,3637,3526,3527,3528,3529,3530,3530,3534,3538,3543,3548,3549,3552,3555,3556,3565,3566,3567,3568,3629,3572,3573,3574,3575,3577,3578,3578,3582,3583,3584,3588,3592,3593,3594,3598,3601,3606,3611,3613,3623,3626,3628,3630,3631,3632,3635,3640,3642,3643,3644,3644,3648,3653,3654,3658,3661,3662,3665,3666,3670,3713,3720,3720,3733,3736,3737,3742,3744,3745,3746,3747,3748,3751,3752,3762,3763,3764,3765,3766,3769,3772,3774,3778,3779,3780,3783,3784,3790,3797,3798,3801,3802,3806,3807,3807,3809,3810,3811,3813,3814,3815,3816,3817,3818,3819,3820,3822,3824,3825,3825,3828,3831,3834,3836,3836,3841,3844,3845,3848,3849,3850,3851,3852,3853,3854,3857,3861,3864,3865,3865,3871,3873,3882,3888,3888,3888,3889,3890,3890,3891,3891,3892,3896,3896,3897,3899,3904,3905,3906,3906,3907,3910,3911,3913,3914,3915,3916,3919,3920,3921,3922,3922,3923,3926,3927,3929,3933,3934,3935,3936,3937,3941,3942,3944,3945,3946,3950,3951,3953,3954,3958,3959,3960,3969,3965,3967,3974,3975,3977,3978,3979,3980,3983,3984,3986,3987,3988,3990,3991,3993,3994,3995,3999,4004,4005,4007,4006,4008,4009,4010,4011,4014,4018,4022,4024,4029,4030,4031,4032,4032,4033,4034,4035,4040,4041,4045,4049,4054,4055,4056,4059,4064,4065,4065,4066,4067,4069,4070,4072,4073,4076,4079,4084,4085,4088,4092,4093,4094,4102,4112,4112,4113,4115,4119,4120,4121,4122,4129,4134,4149,4150,4151,4154,4155,4156,4165,4166,4168,4169,4170,4174,4181,4182,4183,4184,4186,4190,4196,4193,4197,4198,4198,4199,4200,4204,4205,4207,4208,4209,4216,4217,4219,4220,4221,4222,4225,4226,4230,4231,4236,4237,4240,4244,4245,4247,4248,4249,4249,4250,4253,4259,4260,4261,4264,4264,4265,4266,4268,4269,4273,4274,4276,4277,4278,4278,4279,4280,4281,4282,4283,4289,4289,4293,4294,4297,4303,4304,4305,4311,4312,4317,4318,4321,4322,4322,4322,4324,4324,4325,4326,4330,4333,4339,4339,4340,4344,4345,4346,4346,4347,4348,4349,4352,4352,4353,4353,4357,4372,4377,4378,4379,4380,4381,4382,4383,4384,4385,4386,4387,4389,4391,4392,4394,4399,4400,4403,4408,4409,4411,4416,4430,4431,4432,4433,4434,4434,4435,4435,4436,4437,4437,4438,4439,4440,4441,4444,4442,4443,4444,4445,4446,4447,4448,4449,4450,4450,4451,4453,4456,4470,4471,4472,4473,4474,4475,4476,4477,4482,4491,4492,4494,4493,4495,4499,4500,4500,4504,4506,4506,4507,4509,4512,4517,4518,4518,4519,4520,4523,4523,4524,4528,4529,4530,4533,4535,4536,4539,4544,4548,4549,4554,4555,4555,4556,4557,4558,4562,4566,4567,4568,4572,4576,4576,4577,4578,4579,4580,4591,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609,4610,4628,4631,4632,4633,4636,4638,4639,4639,4640,4642,4642,4643,4646,4649,4651,4652,4653,4654,4654,4655,4656,4659,4681,4682,4683,4684,4686,4687,4688,4693,4694,4695,4696,4697,4698,4699,4699,4703,4704,4704,4705,4708,4709,4709,4710,4711,4712,4713,4714,4715,4716,4720,4720,4721,4722,4723,4724,4725,4726,4728,4732,4733,4740,4744,4744,4746,4747,4748,4749,4755,4759,4762,4763,4764,4765,4770,4771,4772,4773,4776,4777,4778,4778,4779,4780,4784,4785,4788,4792,4793,4794,4795,4796,4799,4805,4806,4807,4808,4809,4809,4811,4812,4815,4813,4825,4826,4827,4827,4828,4829,4830,4836,4840,4841,4842,4843,4851,4852,4853,4853,4854,4855,4856,4861,4862,4863,4864,4865,4866,4869,4874,4874,4875,4876,4890,4891,4893,4894,4895,4896,4897,4898,4902,4906,4907,4908,4909,4913,4914,4915,4916,4917,4918,4923,4926,4927,4930,4931,4936,4940,4943,4949,4950,4951,4952,4956,4956,4958,4957,4959,4960,4961,4962,4963,4964,4971,4976,4976,4977,4978,4979,4980,4984,4987,4993,4995,4996,4997,4998,4999,5000,5000,5003,5010,5011,5012,5013,5014,5015,5018,5019,5019,5020,5020,5027,5028,5029,5030,5033,5034,5035,5036,5037,5038,5039,5044,5049,5050,5051,5052,5053,5054,5055,5057,5074,5077,5078,5079,5080,5081,5084,5092,5094,5095,5103,5104,5106,5107,5107,5109,5110,5113,5122,5122,5123,5124,5125,5128,5133,5134,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5145,5146,5149,5153,5154,5157,5165,5165,5186,5187,5188,5188,5191,5194,5194,5201,5202,5203,5204,5205,5206,5207,5210,5212,5213,5219,5220,5224,5241,5242,5245,5246,5247,5248,5249,5250,5251,5252,5253,5256,5257,5258,5259,5260,5261,5262,5264,5267,5268,5268,5269,5270,5271,5272,5273,5276,5280,5281,5287,5288,5289,5290,5291,5292,5292,5295,5299,5307,5308,5309,5311,5312,5313,5315,5316,5317,5320,5318,5319,5319,5325,5326,5327,5330,5333,5336,5337,5338,5339,5341,5342,5343,5344,5345,5348,5350,5351,5352,5359,5359,5362,5368,5369,5372,5373,5374,5376,5377,5379,5380,5381,5382,5383,5384,5385,5390,5395,5395,5402,5398,5400,5405,5405,5409,5410,5415,5420,5421,5428,5431,5435,5441,5441,5442,5447,5447,5448,5449,5452,5453,5454,5457,5461,5460,5468,5465,5467,5466,5470,5471,5471,5474,5474,5478,5479,5480,5487,5490,5494,5499,5507,5508,5511,5512,5513,5516,5520,5527,5530,5538,5535,5536,5545,5542,5543,5543,5544,5563,5548,5549,5550,5551,5554,5552,5554,5557,5560,5562,5598,5565,5566,5567,5568,5569,5572,5573,5580,5580,5590,5590,5584,5595,5597,5599,5600,5601,5602,5603,5604,5605,5608,5609,5612,5617,5618,5618,5619,5620,5625,5629,5630,5630,5632,5635,5636,5637,5638,5667,5647,5648,5649,5650,5651,5654,5655,5660,5664,5647,5671,5672,5679,5682,5683,5684,5685,5687,5691,5690,5694,5695,5703,5706,5713,5718,5721,5722,5724,5727,5728,5729,5730,5737,5740,5742,5745,5750,5751,5752,5753,5762,5764,5765,5766,5767,5770,5771,5771,5773,5772,5774,5779,5781,5786,5786,5787,5792,5797,5800,5805,5806,5808,5809,5810,5811,5814,5816,5815,5817,5818,5818,5820,5824,5825,5826,5829,5830,5831,5832,5833,5836,5836,5837,5843,5844,5847,5848,5849,5850,5851,5852,5855,5858,5859,5862,5867,5868,5872,5874,5875,5876,5877,5880,5880,5881,5886,5887,5888,5889,5890,5891,5893,5894,5895,5896,5899,5900,5901,5906,5907,5917,5918,5919,5922,5923,5924,5927,5928,5929,5930,5933,5936,5937,5941,5942,5943,5944,5945,5953,5954,5955,5958,5962,5965,5966,5970,5973,5978,5979,5980,5981,5982,5983,5984,5988,5989,5996,5997,5998,5999,6000,6001,6004,6006,6009,6010,6014,6045,6046,6050,6051,6052,6055,6056,6058,6059,6060,6061,6062,6071,6077,6077,6080,6083,6085,6087,6087,6094,6089,6089,6092,6099,6100,6101,6102,6103,6104,6108,6109,6110,6111,6112,6117,6118,6121,6123,6127,6128,6129,6132,6137,6139,6140,6143,6144,6146,6147,6148,6150,6155,6158,6159,6160,6161,6161,6167,6167,6170,6170,6173,6177,6178,6179,6180,6181,6183,6184,6185,6186,6187,6188,6189,6190,6193,6196,6199,6200,6202,6203,6204,6207,6208,6213,6214,6216,6217,6219,6221,6220,6223,6224,6227,6229,6231,6230,6233,6234,6235,6236,6237,6243,6244,6245,6246,6246,6248,6249,6250,6254,6255,6261,6262,6263,6264,6265,6266,6267,6269,6271,6273,6273,6281,6285,6287,6290,6291,6292,6295,6296,6297,6298,6299,6300,6304,6307,6311,6317,6318,6319,6320,6320,6321,6325,6331,6332,6341,6344,6345,6346,6351,6356,6357,6357,6358,6359,6360,6361,6362,6365,6368,6371,6372,6379,6380,6380,6382,6384,6389,6398,6399,6400,6400,6401,6401,6401,6401,6402,6410,6412,6419,6414,6415,6415,6416,6417,6418,6422,6423,6424,6429,6430,6430,6431,6432,6449,6439,6440,6440,6441,6443,6443,6444,6445,6446,6452,6461,6454,6455,6456,6457,6458,6459,6464,6465,6465,6466,6467,6473,6472,6473,6477,6532,6484,6485,6486,6487,6490,6491,6492,6493,6494,6502,6503,6507,6508,6509,6510,6510,6512,6513,6514,6518,6519,6520,6521,6524,6525,6527,6528,6529,6533,6534,6539,6540,6541,6543,6544,6545,6546,6547,6548,6549,6550,6554,6555,6556,6556,6557,6565,6568,6569,6572,6573,6575,6576,6577,6578,6579,6580,6583,6584,6584,6585,6597,6597,6597,6597,6598,6599,6600,6601,6601,6602,6603,6604,6611,6616,6617,6618,6620,6623,6629,6630,6631,6631,6632,6633,6634,6635,6636,6640,6645,6646,6646,6647,6648,6649,6650,6652,6655,6662,6663,6665,6670,6671,6672,6673,6676,6679,6681,6682,6686,6688,6690,6691,6692,6693,6694,6695,6696,6698,6701,6705,6706,6707,6710,6714,6715,6716,6717,6717,6722,6723,6724,6727,6730,6731,6732,6733,6734,6737,6741,6746,6747,6748,6753,6756,6757,6758,6766,6766,6768,6767,6770,6775,6778,6779,6782,6783,6784,6785,6785,6794,6795,6798,6799,6803,6804,6806,6807,6808,6809,6810,6811,6814,6815,6816,6818,6821,6822,6823,6825,6828,6830,6831,6833,6837,6838,6839,6840,6841,6842,6843,6844,6846,6847,6850,6851,6852,6854,6855,6858,6859,6860,6862,6862,6870,6871,6872,6875,6881,6884,6885,6886,6890,6891,6895,6895,6896,6918,6919,6921,6923,6922,6924,6925,6926,6927,6930,6933,6934,6935,6939,6942,6948,6949,6950,6953,6954,6955,6958,6959,6962,6965,6966,6969,6975,6976,6979,6985,6988,6991,6993,6998,6999,7000,7001,7002,7004,7005,7006,7008,7020,7022,7023,7024,7025,7028,7029,7033,7035,7039,7048,7049,7050,7051,7061,7069,7072,7078,7080,7081,7085,7086,7087,7089,7093,7095,7096,7098,7103,7106,7109,7111,7113,7115,7116,7117,7118,7119,7120,7123,7125,7130,7131,7132,7133,7134,7135,7137,7141,7142,7144,7145,7147,7148,7149,7151,7152,7153,7154,7155,7156,7157,7161,7162,7163,7164,7165,7169,7170,7171,7172,7173,7174,7175,7175,7177,7178,7179,7180,7181,7182,7183,7184,7184,7185,7191,7192,7196,7199,7200,7202,7203,7204,7208,7209,7210,7211,7212,7216,7217,7218,7219,7220,7222,7223,7224,7225,7226,7230,7231,7235,7236,7237,7238,7240,7241,7242,7243,7244,7245,7246,7247,7248,7248,7250,7251,7252,7253,7254,7255,7256,7260,7257,7261,7264,7270,7272,7276,7277,7278,7279,7280,7281,7282,7283,7289,7296,7297,7298,7299,7302,7306,7307,7308,7309,7310,7312,7320,7321,7322,7323,7329,7330,7331,7332,7333,7334,7335,7336,7337,7338,7339,7340,7341,7342,7343,7344,7345,7346,7347,7353,7354,7355,7356,7357,7365,7370,7377,7378,7382,7391,7392,7393,7393,7393,7395,7396,7400,7401,7402,7403,7404,7405,7406,7407,7409,7410,7411,7419,7426,7422,7424,7423,7427,7427,7431,7445,7433,7434,7435,7436,7438,7438,7438,7439,7440,7441,7444,7446,7447,7448,7450,7451,7452,7453,7454,7455,7456,7457,7462,7462,7465,7467,7468,7469,7473,7476,7477,7482,7486,7487,7488,7494,7496,7495,7496,7501,7507,7505,7506,7510,7512,7513,7514,7515,7516,7517,7518,7519,7521,7528,7526,7532,7535,7537,7540,7541,7542,7543,7545,7546,7552,7565,7568,7571,7572,7572,7573,7573,7576,7577,7580,7581,7587,7588,7589,7590,7591,7592,7596,7601,7603,7603,7606,7607,7611,7612,7614,7615,7621,7622,7622,7623,7623,7627,7637,7640,7644,7648,7649,7653,7654,7655,7656,7657,7668,7672,7672,7673,7674,7675,7683,7687,7688,7691,7691,7692,7693,7697,7697,7701,7701,7702,7703,7706,7706,7709,7712,7715,7722,7722,7723,7724,7728,7729,7730,7731,7732,7737,7738,7744,7745,7753,7754,7762,7768,7774,7775,7779,7783,7784,7787,7789,7788,7791,7795,7799,7801,7802,7803,7804,7805,7806,7815,7836,7837,7838,7843,7862,7845,7846,7847,7848,7849,7853,7853,7854,7860,7861,7865,7866,7867,7871,7872,7873,7874,7880,7881,7885,7885,7888,7889,7890,7893,7896,7897,7898,7899,7905,7906,7907,7918,7923,7924,7924,7925,7928,7933,7934,7942,7942,7947,7948,7949,7950,7951,7952,7956,7957,7958,7959,7960,7967,7968,7972,7973,7973,7974,7981,7983,7984,7985,7986,7986,7987,7988,7989,7990,7999,8003,8004,8005,8007,8010,8022,8023,8023,8023,8024,8025,8025,8026,8027,8030,8031,8031,8032,8033,8038,8047,8048,8054,8055,8056,8057,8058,8059,8059,8060,8063,8065,8066,8067,8067,8068,8069,8069,8070,8080,8081,8089,8103,8092,8093,8096,8097,8097,8098,8098,8099,8100,8104,8105,8106,8107,8111,8112,8113,8114,8114,8115,8116,8117,8123,8124,8125,8126,8129,8130,8130,8131,8140,8141,8142,8142,8143,8143,8144,8145,8148,8149,8154,8162,8163,8164,8164,8165,8166,8166,8167,8168,8169,8170,8171,8174,8175,8176,8177,8178,8181,8186,8190,8191,8192,8193,8194,8197,8208,8209,8210,8210,8234,8212,8213,8221,8224,8224,8228,8231,8235,8235,8236,8237,8238,8240,8240,8241,8242,8245,8248,8254,8256,8257,8258,8263,8263,8264,8265,8268,8268,8269,8270,8270,8271,8272,8276,8278,8281,8288,8289,8297,8298,8305,8305,8306,8309,8313,8315,8315,8315,8318,8320,8321,8322,8323,8324,8324,8325,8326,8330,8331,8332,8333,8341,8343,8343,8346,8347,8348,8349,8355,8361,8362,8365,8367,8369,8371,8375,8377,8378,8381,8382,8389,8386,8387,8393,8399,8400,8401,8412,8425,8427,8428,8429,8447,8467,8450,8451,8452,8453,8455,8456,8457,8461,8463,8464,8466,8468,8468,8474,8474,8475,8493,8480,8481,8486,8487,8488,8489,8492,8494,8495,8496,8498,8501,8502,8503,8504,8505,8506,8507,8513,8514,8514,8515,8516,8519,8520,8522,8524,8525,8533,8532,8533,8536,8536,8537,8545,8555,8556,8557,8559,8560,8563,8565,8566,8567,8568,8569,8569,8573,8574,8575,8576,8577,8578,8585,8586,8595,8598,8606,8608,8609,8610,8611,8617,8618,8618,8624,8629,8630,8631,8632,8639,8640,8643,8645,8646,8652,8656,8657,8658,8659,8660,8664,8669,8670,8673,8679,8682,8683,8685,8687,8692,8704,8706,8713,8714,8717,8722,8723,8736,8737,8738,8739,8740,8742,8743,8744,8745,8746,8749,8750,8752,8755,8757,8779,8780,8782,8800,8786,8787,8788,8789,8789,8790,8791,8792,8793,8793,8794,8795,8796,8797,8803,8804,8807,8808,8814,8811,8813,8812,8813,8819,8820,8823,8833,8836,8837,8838,8841,8842,8843,8846,8846,8847,8848,8849,8852,8853,8857,8859,8859,8859,8865,8866,8868,8868,8870,8871,8874,8875,8879,8878,8879,8883,8884,8884,8885,8889,8892,8901,8900,8904,8904,8909,8936,8937,8938,8939,8940,8941,8942,8943,8962,8951,8952,8953,8954,8955,8955,8956,8957,8960,8965,9035,8969,8970,8971,8976,8975,8976,8979,8977,8979,8980,8988,8988,8992,8993,8994,8995,8996,8997,8998,9001,9005,9004,9006,9006,9007,9008,9009,9010,9013,9014,9016,9020,9025,9025,9026,9027,9028,9029,9030,9031,9037,9038,9039,9041,9041,9042,9043,9044,9045,9046,9050,9058,9059,9061,9060,9063,9094,9065,9066,9068,9069,9072,9073,9074,9075,9075,9076,9077,9078,9081,9082,9086,9087,9090,9095,9096,9101,9103,9112,9113,9113,9114,9115,9117,9118,9119,9120,9121,9122,9129,9133,9139,9142,9148,9151,9152,9153,9154,9155,9155,9163,9163,9164,9165,9165,9166,9167,9170,9168,9169,9174,9193,9196,9197,9201,9204,9205,9207,9208,9213,9215,9226,9227,9228,9232,9232,9233,9239,9235,9236,9237,9238,9240,9240,9241,9241,9244,9244,9245,9245,9248,9249,9249,9250,9253,9254,9256,9261,9259,9260,9268,9268,9269,9269,9270,9271,9274,9277,9278,9279,9292,9294,9295,9296,9296,9299,9300,9301,9302,9306,9307,9308,9310,9311,9313,9314,9315,9319,9320,9323,9324,9325,9326,9331,9331,9332,9333,9334,9335,9336,9342,9343,9352,9353,9354,9355,9356,9363,9367,9368,9370,9384,9385,9386,9386,9387,9390,9391,9396,9405,9406,9409,9412,9421,9422,9423,9424,9430,9431,9432,9431,9435,9436,9437,9440,9443,9448,9449,9450,9451,9452,9459,9460,9462,9463,9466,9467,9470,9477,9478,9480,9480,9480,9490,9493,9494,9498,9499,9500,9500,9506,9507,9510,9511,9512,9513,9514,9515,9525,9529,9529,9530,9531,9534,9535,9536,9536,9541,9542,9543,9543,9546,9546,9547,9548,9549,9553,9563,9566,9567,9569,9572,9572,9573,9574,9575,9576,9577,9578,9581,9581,9582,9583,9584,9585,9588,9589,9598,9601,9608,9609,9622,9624,9626,9628,9631,9632,9633,9633,9637,9637,9640,9641,9643,9643,9646,9649,9652,9653,9656,9657,9661,9662,9667,9669,9668,9672,9677,9678,9679,9680,9683,9690,9693,9694,9697,9697,9698,9700,9703,9704,9705,9712,9721,9725,9731,9734,9735,9736,9737,9741,9749,9750,9751,9756,9757,9759,9766,9767,9770,9771,9774,9774,9777,9780,9781,9785,9790,9799,9799,9799,9799,9800,9801,9803,9812,9815,9813,9817,9818,9819,9824,9824,9825,9825,9828,9829,9832,9836,9841,9849,9859,9862,9863,9866,9870,9874,9879,9878,9878,9878,9883,9886,9886,9889,9892,9901,9902,9903,9904,9905,9907,9908,9909,9910,9911,9915,9919,9920,9921,9922,9930,9931,9934,9935,9936,9939,9943,9942,9946,9946,9947,9951,9952,9956,9957,9960,9972,9973,9976,9977,9980,9985,9993,9996,9997,9998,9999,10002,10003,10004,10007,10008,10013,10021,10022,10025,10026,10027,10028,10029,10036,10030,10038,10040,10046,10047,10048,10049,10054,10056,10060,10061,10062,10062,10063,10066,10067,10073,10074,10075,10078,10079,10080,10080,10084,10082,10087,10086,10092,10092,10097,10104,10107,10108,10114,10112,10111,10112,10112,10117,10119,10120,10121,10122,10125,10126,10126,10127,10128,10129,10130,10135,10136,10136,10136,10137,10142,10149,10152,10166,10169,10177,10174,10172,10174,10174,10180,10183,10184,10185,10186,10187,10188,10197,10198,10201,10201,10202,10203,10211,10217,10218,10219,10219,10220,10221,10224,10230,10231,10232,10233,10234,10235,10236,10237,10238,10239,10240,10241,10242,10251,10252,10253,10256,10257,10259,10260,10263,10264,10265,10266,10268,10271,10277,10274,10274,10281,10296,10297,10298,10300,10302,10303,10304,10305,10306,10313,10314,10315,10317,10318,10319,10323,10324,10325,10326,10330,10331,10335,10336,10341,10342,10342,10343,10344,10349,10350,10351,10356,10356,10361,10361,10361,10365,10366,10367,10368,10371,10372,10372,10373,10376,10376,10377,10378,10379,10380,10382,10383,10386,10395,10399,10403,10403,10403,10406,10425,10428,10429,10431,10432,10435,10440,10440,10443,10444,10447,10448,10449,10454,10455,10456,10459,10468,10481,10482,10483,10486,10489,10494,10495,10496,10497,10498,10498,10506,10507,10510,10515,10515,10516,10523,10532,10535,10536,10540,10541,10542,10546,10547,10548,10549,10552,10555,10556,10557,10558,10562,10565,10566,10571,10572,10575,10599,10604,10607,10608,10612,10616,10617,10618,10621,10621,10624,10625,10628,10629,10632,10633,10636,10637,10638,10641,10647,10652,10655,10656,10657,10660,10667,10673,10678,10679,10683,10684,10696,10699,10700,10705,10708,10711,10716,10719,10729,10730,10730,10731,10734,10735,10738,10743,10744,10746,10756,10756,10757,10758,10761,10764,10766,10769,10772,10776,10777,10777,10778,10779,10780,10782,10786,10794,10795,10796,10797,10798,10799,10800,10814,10815,10816,10819,10820,10823,10826,10827,10832,10836,10837,10840,10844,10850,10851,10854,10860,10865,10870,10871,10874,10879,10884,10889,10893,10914,10917,10918,10924,10925,10926,10928,10939,10941,10942,10945,10946,10947,10948,10952,10962,10963,10966,10969,10978,10981,10985,10988,10991,10996,10997,10998,10999,11000,11001,11004,11011,11016,11017,11020,11024,11025,11028,11031,11035,11035,11036,11037,11038,11039,11040,11045,11054,11055,11057,11063,11064,11067,11070,11087,11090,11092,11094,11098,11101,11102,11103,11106,11107,11110,11115,11116,11120,11125,11128,11129,11135,11136,11137,11138,11141,11144,11164,11167,11171,11176,11179,11182,11183,11188,11191,11194,11197,11198,11202,11205,11208,11209,11213,11218,11219,11224,11229,11232,11233,11235,11244,11244,11248,11249,11250,11254,11255,11262,11263,11264,11265,11268,11271,11272,11277,11279,11284,11285,11286,11293,11294,11295,11296,11297,11298,11298,11314,11315,11318,11319,11322,11323,11326,11326,11327,11330,11332,11337,11338,11344,11348,11356,11356,11357,11365,11366,11369,11370,11371,11375,11376,11377,11380,11384,11385,11386,11391,11392,11393,11394,11397,11399,11401,11405,11409,11416,11417,11424,11427,11428,11429,11431,11432,11433,11435,11436,11443,11446,11447,11448,11451,11452,11454,11454,11453,11458,11459,11460,11461,11462,11462,11463,11464,11467,11473,11474,11475,11476,11481,11482,11483,11484,11485,11486,11486,11492,11493,11497,11498,11505,11506,11508,11525,11529,11530,11540,11541,11544,11548,11551,11552,11556,11560,11565,11568,11571,11574,11577,11580,11581,11584,11587,11594,11597,11598,11599,11605,11608,11611,11614,11615,11618,11621,11628,11631,11632,11633,11636,11653,11662,11680,11680,11681,11686,11689,11690,11691,11696,11700,11703,11703,11704,11707,11719,11722,11723,11726,11727,11731,11745,11746,11749,11750,11753,11762,11763,11768,11769,11771,11772,11775,11779,11782,11786,11788,11792,11793,11794,11797,11801,11804,11808,11809,11811,11816,11819,11823,11824,11825,11830,11831,11835,11837,11841,11842,11843,11846,11850,11851,11852,11853,11854,11855,11861,11862,11890,11865,11866,11867,11870,11870,11871,11872,11873,11874,11875,11876,11877,11881,11881,11882,11883,11884,11885,11887,11889,11891,11892,11893,11894,11896,11897,11904,11905,11908,11906,11910,11912,11913,11914,11915,11917,11918,11919,11920,11928,11929,11932,11935,11935,11938,11940,11940,11945,11946,11947,11948,11949,11951,11952,11953,11956,11959,11960,11965,11966,11972,11973,11976,11977,11981,11981,11989,11992,11992,11993,11994,11997,12000,12003,12007,12008,12011,12011,12013,12014,12017,12020,12023,12028,12029,12030,12031,12033,12034,12035,12036,12038,12039,12040,12041,12042,12043,12045,12052,12053,12060,12067,12072,12073,12074,12075,12076,12077,12077,12078,12078,12079,12082,12085,12086,12087,12090,12090,12091,12098,12099,12103,12109,12110,12112,12114,12121,12122,12123,12123,12124,12125,12126,12127,12130,12131,12132,12133,12134,12136,12137,12138,12152,12154,12154,12155,12155,12156,12156,12157,12157,12158,12158,12159,12162,12163,12166,12167,12168,12169,12174,12175,12176,12177,12186,12190,12197,12198,12200,12200,12201,12202,12203,12206,12209,12212,12210,12214,12216,12217,12225,12226,12227,12233,12234,12234,12235,12238,12239,12239,12240,12244,12248,12249,12250,12251,12251,12254,12255,12258,12259,12259,12262,12292,12293,12294,12295,12296,12297,12298,12299,12307,12308,12313,12313,12313,12319,12324,12325,12326,12331,12328,12329,12330,12332,12333,12334,12335,12336,12337,12339,12340,12343,12347,12348,12349,12350,12356,12360,12362,12364,12365,12366,12367,12371,12371,12372,12373,12373,12374,12375,12376,12377,12378,12380,12381,12383,12383,12384,12385,12386,12387,12390,12392,12393,12394,12395,12398,12400,12402,12403,12404,12405,12406,12410,12413,12417,12417,12418,12422,12423,12424,12425,12426,12427,12428,12434,12436,12444,12447,12448,12456,12452,12463,12458,12466,12467,12468,12469,12470,12471,12473,12474,12483,12494,12490,12498,12507,12508,12511,12512,12513,12514,12519,12520,12527,12530,12530,12531,12532,12537,12541,12542,12544,12544,12556,12557,12558,12559,12561,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12577,12583,12584,12585,12586,12589,12593,12596,12596,12597,12598,12604,12605,12612,12613,12614,12614,12614,12615,12618,12666,12669,12672,12673,12675,12676,12677,12680,12681,12682,12683,12686,12686,12688,12687,12689,12690,12691,12693,12697,12700,12701,12702,12703,12705,12706,12708,12723,12724,12725,12726,12727,12727,12728,12729,12730,12732,12733,12737,12738,12739,12740,12741,12742,12742,12743,12745,12750,12751,12752,12756,12757,12760,12761,12767,12776,12777,12781,12782,12787,12788,12792,12795,12796,12797,12798,12802,12817,12820,12819,12821,12822,12823,12827,12830,12831,12832,12833,12835,12835,12837,12841,12842,12843,12844,12845,12851,12852,12853,12854,12857,12860,12860,12863,12864,12865,12867,12868,12869,12871,12877,12901,12905,12908,12909,12911,12912,12913,12914,12915,12921,12926,12927,12928,12929,12930,12931,12934,12937,12938,12939,12942,12954,12957,12960,12963,12974,12975,12976,12977,12978,12983,12988,12989,12992,13005,13014,13014,13015,13016,13020,13021,13022,13023,13024,13032,13035,13036,13056,13059,13062,13063,13065,13066,13070,13071,13072,13073,13074,13075,13078,13079,13082,13083,13086,13099,13101,13107,13107,13115,13116,13119,13120,13121,13122,13123,13125,13132,13133,13135,13136,13137,13138,13139,13143,13143,13148,13149,13156,13157,13161,13162,13170,13172,13173,13175,13176,13179,13180,13181,13182,13183,13184,13187,13188,13189,13190,13191,13192,13195,13196,13197,13224,13225,13226,13228,13229,13230,13231,13232,13233,13236,13240,13240,13242,13244,13245,13246,13249,13250,13251,13252,13253,13254,13255,13259,13260,13263,13265,13269,13273,13274,13276,13277,13280,13284,13287,13291,13292,13293,13294,13295,13296,13297,13298,13299,13301,13302,13303,13306,13307,13309,13312,13313,13322,13325,13329,13333,13336,13340,13341,13344,13345,13350,13351,13352,13353,13354,13355,13355,13356,13358,13366,13374,13376,13377,13378,13379,13380,13381,13383,13384,13385,13386,13387,13395,13399,13402,13453,13454,13455,13455,13456,13457,13459,13462,13463,13464,13464,13465,13466,13467,13468,13471,13475,13476,13482,13479,13479,13484,13485,13486,13487,13488,13489,13490,13493,13494,13495,13496,13497,13499,13500,13503,13504,13506,13507,13511,13512,13513,13514,13515,13527,13528,13530,13531,13532,13534,13535,13536,13537,13538,13545,13546,13548,13551,13552,13553,13554,13560,13587,13561,13566,13567,13571,13572,13574,13581,13585,13589,13591,13593,13597,13598,13599,13601,13602,13603,13604,13605,13606,13609,13610,13611,13616,13617,13618,13620,13621,13622,13626,13629,13631,13632,13633,13633,13636,13637,13638,13639,13649,13650,13653,13656,13657,13661,13662,13663,13665,13694,13695,13698,13698,13699,13700,13701,13702,13704,13705,13706,13706,13707,13708,13709,13710,13711,13714,13724,13725,13726,13726,13727,13728,13729,13730,13732,13733,13734,13734,13735,13736,13737,13738,13739,13742,13750,13751,13754,13754,13755,13756,13757,13758,13760,13761,13762,13762,13763,13764,13765,13766,13767,13770,13774,13775,13776,13777,13780,13783,13783,13788,13789,13790,13792,13792,13793,13793,13794,13798,13799,13799,13800,13800,13801,13805,13807,13808,13809,13810,13811,13812,13814,13815,13817,13818,13824,13824,13826,13825,13832,13833,13834,13835,13841,13843,13844,13847,13851,13852,13855,13854,13855,13854,13866,13868,13869,13870,13871,13872,13873,13874,13874,13874,13875,13876,13877,13878,13878,13879,13883,13884,13885,13886,13887,13888,13892,13892,13901,13903,13906,13907,13908,13909,13910,13911,13917,13918,13919,13920,13921,13922,13924,13925,13925,13926,13927,13928,13929,13930,13932,13934,13952,13939,13940,13941,13942,13943,13945,13944,13947,13949,13948,13956,13961,13961,13961,13962,13963,13964,13965,13966,13967,13968,13969,13975,13979,13980,13982,13984,13985,13986,13987,13988,13991,13992,13995,13997,13998,13999,14010,14013,14054,14016,14017,14040,14020,14021,14022,14024,14025,14026,14027,14031,14033,14041,14042,14043,14050,14051,14055,14057,14059,14068,14069,14070,14071,14072,14074,14076,14077,14078,14081,14082,14084,14085,14088,14089,14090,14091,14093,14092,14094,14095,14111,14120,14121,14122,14123,14124,14125,14126,14127,14130,14131,14132,14134,14137,14138,14139,14142,14146,14148,14149,14153,14165,14168,14172,14173,14181,14187,14199,14204,14209,14213,14220,14225,14229,14233,14234,14238,14239,14242,14246,14247,14248,14249,14250,14251,14252,14260,14261,14262,14263,14264,14265,14266,14267,14270,14270,14272,14273,14275,14276,14277,14278,14278,14280,14281,14282,14283,14286,14292,14293,14296,14300,14301,14302,14303,14304,14305,14306,14307,14313,14314,14316,14317,14321,14322,14323,14324,14325,14327,14330,14339,14342,14345,14347,14348,14349,14350,14352,14352,14353,14358,14359,14360,14361,14366,14367,14369,14370,14373,14374,14376,14377,14383,14384,14385,14385,14388,14395,14396,14397,14402,14402,14405,14407,14413,14414,14415,14419,14423,14424,14425,14426,14427,14428,14429,14429,14432,14436,14437,14440,14443,14447,14448,14452,14453,14453,14454,14454,14455,14456,14457,14458,14459,14463,14464,14464,14465,14466,14467,14468,14471,14472,14473,14474,14474,14475,14475,14476,14477,14481,14500,14501,14502,14503,14504,14505,14506,14506,14509,14512,14516,14517,14518,14521,14525,14528,14543,14546,14550,14550,14551,14552,14553,14554,14557,14557,14558,14559,14560,14563,14567,14569,14600,14571,14572,14573,14576,14576,14577,14580,14581,14582,14583,14584,14586,14589,14590,14591,14594,14594,14595,14596,14597,14603,14604,14605,14606,14613,14643,14616,14617,14620,14621,14622,14625,14625,14626,14627,14630,14630,14631,14632,14635,14636,14636,14640,14647,14648,14652,14652,14653,14654,14655,14658,14663,14664,14669,14671,14675,14676,14679,14680,14680,14684,14685,14685,14690,14705,14706,14708,14709,14710,14713,14714,14717,14718,14722,14723,14724,14726,14729,14742,14743,14744,14745,14748,14749,14750,14755,14756,14758,14761,14774,14784,14785,14785,14790,14790,14795,14795,14797,14806,14809,14808,14815,14818,14819,14820,14821,14822,14823,14825,14829,14832,14835,14836,14840,14846,14854,14858,14859,14860,14862,14863,14864,14869,14870,14871,14874,14875,14876,14877,14878,14879,14886,14896,14900,14900,14904,14903,14905,14908,14909,14914,14915,14919,14924,14925,14929,14933,14934,14935,14939,14944,14955,14958,14959,14962,14965,14965,14966,14966,14967,14967,14968,14968,14971,14971,14972,14974,14975,14979,14979,14982,14985,14986,14987,14987,14990,14994,14993,14996,15000,15004,15004,15007,15010,15011,15012,15012,15015,15019,15018,15021,15025,15029,15036,15039,15040,15044,15047,15050,15051,15065,15066,15067,15068,15068,15069,15071,15070,15072,15072,15073,15074,15075,15078,15080,15085,15089,15092,15093,15093,15094,15095,15095,15096,15097,15097,15098,15099,15100,15101,15104,15105,15110,15113,15113,15114,15115,15116,15117,15118,15119,15120,15120,15121,15122,15125,15128,15129,15130,15133,15140,15146,15147,15151,15156,15162,15170,15164,15165,15166,15167,15168,15169,15171,15172,15173,15175,15176,15177,15180,15186,15191,15192,15192,15196,15197,15198,15208,15209,15209,15210,15221,15222,15223,15228,15229,15235,15237,15237,15240,15248,15249,15250,15250,15251,15251,15254,15255,15260,15263,15272,15274,15275,15276,15277,15277,15279,15284,15285,15290,15293,15301,15306,15307,15308,15309,15309,15310,15315,15316,15317,15318,15326,15336,15335,15339,15348,15349,15350,15351,15352,15356,15357,15358,15359,15360,15361,15362,15363,15365,15366,15367,15369,15369,15370,15371,15372,15373,15376,15379,15380,15382,15384,15384,15385,15389,15390,15391,15392,15393,15393,15394,15395,15399,15400,15404,15409,15410,15411,15412,15413,15414,15417,15418,15419,15420,15422,15428,15429,15430,15431,15432,15435,15436,15439,15440,15443,15444,15445,15448,15449,15452,15453,15454,15455,15456,15459,15460,15461,15467,15469,15468,15470,15471,15472,15475,15477,15478,15479,15483,15484,15485,15486,15487,15491,15494,15500,15503,15507,15507,15513,15516,15521,15522,15523,15523,15525,15524,15524,15526,15527,15528,15529,15533,15541,15538,15540,15545,15547,15548,15549,15551,15552,15552,15556,15561,15561,15562,15563,15564,15567,15571,15572,15574,15575,15578,15579,15583,15584,15591,15596,15604,15605,15608,15607,15608,15610,15611,15612,15613,15616,15617,15623,15621,15631,15634,15632,15639,15637,15644,15648,15652,15656,15659,15659,15659,15662,15663,15664,15665,15671,15677,15682,15686,15689,15692,15745,15699,15700,15701,15705,15709,15710,15712,15713,15714,15715,15718,15719,15720,15726,15727,15728,15732,15734,15737,15738,15739,15740,15741,15742,15743,15754,15747,15748,15749,15750,15751,15752,15753,15771,15756,15757,15761,15762,15763,15764,15765,15769,15772,15773,15773,15774,15775,15777,15781,15782,15782,15783,15784,15785,15786,15789,15790,15794,15795,15796,15797,15798,15799,15800,15803,15804,15805,15806,15812,15813,15814,15815,15816,15820,15821,15824,15830,15834,15835,15838,15840,15841,15842,15850,15857,15858,15859,15860,15867,15868,15873,15879,15882,15884,15888,15889,15895,15891,15892,15893,15894,15898,15898,15899,15899,15902,15905,15906,15908,15909,15913,15916,15919,15921,15924,15925,15926,15926,15930,15933,15939,15940,15941,15942,15943,15944,15946,15946,15949,15951,15951,15951,15952,15952,15956,15961,15962,15965,15966,15967,15969,15969,15973,15974,15974,15978,15979,15979,15983,15983,15989,15988,15993,15993,15995,16001,16002,16003,16003,16007,16014,16015,16015,16016,16020,16021,16022,16025,16026,16029,16029,16033,16034,16035,16042,16045,16046,16046,16049,16049,16054,16055,16056,16057,16058,16060,16061,16064,16065,16065,16077,16077,16087,16088,16089,16090,16091,16092,16094,16094,16103,16104,16104,16114,16118,16119,16119,16124,16129,16133,16134,16135,16136,16137,16137,16138,16142,16143,16144,16144,16146,16150,16151,16152,16152,16153,16154,16158,16163,16163,16164,16169,16170,16176,16177,16177,16179,16181,16184,16188,16189,16193,16197,16198,16201,16201,16202,16206,16209,16209,16210,16213,16216,16217,16218,16227,16228,16229,16230,16232,16233,16236,16240,16241,16242,16245,16248,16255,16257,16261,16262,16265,16267,16268,16268,16269,16272,16275,16278,16285,16287,16291,16292,16297,16298,16299,16300,16301,16307,16308,16309,16310,16311,16315,16316,16317,16318,16319,16325,16326,16335,16337,16338,16338,16338,16339,16340,16341,16342,16346,16347,16350,16350,16360,16361,16362,16364,16365,16373,16374,16376,16387,16394,16412,16400,16401,16402,16403,16404,16405,16406,16407,16408,16410,16414,16416,16417,16417,16418,16419,16421,16422,16423,16424,16425,16426,16430,16427,16428,16429,16435,16436,16444,16447,16448,16449,16451,16452,16453,16454,16457,16460,16461,16464,16465,16466,16467,16468,16475,16477,16479,16486,16486,16487,16489,16494,16501,16502,16508,16508,16509,16511,16512,16513,16516,16517,16519,16520,16521,16522,16523,16525,16526,16527,16528,16529,16530,16532,16535,16536,16537,16539,16541,16542,16544,16545,16546,16547,16548,16549,16550,16551,16555,16556,16557,16558,16559,16560,16564,16566,16572,16574,16575,16580,16581,16583,16587,16588,16592,16596,16598,16608,16612,16613,16614,16617,16618,16624,16624,16625,16627,16629,16631,16632,16633,16634,16636,16637,16638,16639,16640,16642,16647,16648,16649,16650,16651,16652,16653,16655,16656,16657,16658,16661,16666,16667,16668,16669,16670,16671,16674,16675,16676,16677,16678,16679,16682,16683,16684,16685,16686,16687,16688,16691,16692,16693,16694,16695,16699,16700,16701,16702,16703,16704,16705,16706,16707,16708,16712,16713,16713,16716,16718,16719,16723,16724,16730,16730,16731,16732,16737,16738,16739,16740,16746,16746,16747,16748,16752,16754,16758,16759,16760,16761,16763,16763,16766,16769,16773,16775,16778,16779,16782,16783,16784,16786,16790,16794,16795,16803,16804,16807,16809,16810,16812,16813,16816,16819,16825,16826,16826,16827,16828,16832,16831,16831,16834,16840,16838,16839,16841,16844,16846,16846,16847,16854,16855,16859,16859,16860,16863,16865,16864,16871,16870,16876,16881,16884,16888,16889,16890,16891,16893,16894,16897,16899,16903,16904,16908,16909,16910,16910,16911,16911,16912,16913,16914,16915,16916,16917,16917,16920,16921,16922,16923,16924,16925,16926,16928,16928,16932,16934,16938,16941,16944,16945,16948,16949,16951,16950,16955,16955,16958,16961,16964,16970,16970,16971,16974,16982,16982,16983,16986,16987,16988,16994,16995,17000,17001,17002,17003,17004,17005,17006,17007,17008,17009,17016,17016,17017,17018,17024,17025,17027,17029,17030,17031,17032,17040,17040,17041,17042,17047,17052,17055,17056,17059,17060,17061,17062,17065,17069,17072,17073,17076,17079,17080,17086,17090,17091,17092,17093,17094,17095,17096,17097,17098,17099,17100,17103,17104,17110,17112,17116,17120,17121,17122,17123,17127,17128,17129,17130,17133,17136,17140,17139,17144,17145,17146,17148,17149,17150,17152,17154,17158,17159,17160,17161,17164,17168,17169,17169,17170,17172,17179,17176,17178,17183,17187,17188,17188,17189,17191,17195,17196,17201,17205,17206,17207,17208,17209,17212,17216,17215,17219,17220,17221,17222,17224,17225,17226,17228,17230,17235,17237,17242,17243,17246,17249,17251,17255,17256,17257,17263,17261,17262,17263,17267,17271,17271,17273,17275,17276,17277,17283,17284,17285,17288,17289,17290,17295,17296,17299,17302,17303,17306,17308,17309,17311,17312,17313,17316,17317,17320,17321,17322,17323,17325,17326,17327,17328,17329,17331,17334,17335,17340,17341,17342,17343,17344,17345,17346,17349,17350,17351,17352,17354,17355,17356,17359,17362,17364,17365,17366,17367,17373,17374,17375,17377,17378,17381,17384,17385,17387,17388,17390,17393,17399,17401,17401,17402,17403,17404,17405,17405,17409,17409,17413,17413,17414,17417,17419,17420,17421,17423,17425,17426,17428,17432,17433,17434,17434,17437,17440,17444,17445,17446,17447,17448,17449,17449,17450,17451,17452,17454,17455,17455,17456,17457,17458,17461,17464,17467,17468,17469,17470,17473,17474,17475,17476,17478,17479,17481,17482,17483,17486,17493,17494,17496,17497,17501,17503,17504,17505,17508,17509,17514,17515,17521,17522,17523,17525,17526,17528,17529,17529,17530,17533,17534,17536,17537,17540,17544,17545,17547,17549,17550,17551,17552,17553,17554,17555,17559,17571,17572,17573,17575,17574,17577,17578,17578,17583,17584,17587,17590,17595,17597,17602,17598,17606,17607,17608,17609,17611,17612,17616,17617,17618,17619,17620,17621,17623,17624,17627,17631,17635,17639,17640,17643,17646,17649,17650,17651,17654,17660,17664,17665,17670,17671,17672,17676,17677,17678,17679,17680,17683,17684,17685,17688,17689,17690,17694,17704,17705,17706,17709,17710,17712,17715,17718,17717,17717,17720,17719,17719,17722,17721,17721,17723,17724,17726,17742,17745,17743,17748,17751,17749,17754,17758,17759,17760,17762,17763,17763,17764,17767,17768,17769,17773,17774,17777,17783,17784,17785,17789,17791,17792,17793,17794,17795,17799,17800,17802,17807,17812,17816,17817,17819,17820,17821,17822,17825,17827,17828,17832,17835,17838,17840,17842,17843,17846,17847,17848,17852,17853,17854,17855,17858,17861,17862,17863,17865,17864,17866,17868,17869,17877,17873,17874,17875,17878,17879,17880,17881,17882,17883,17884,17885,17888,17891,17892,17893,17898,17899,17901,17902,17905,17909,17910,17911,17915,17916,17920,17921,17925,17929,17928,17931,17932,17933,17934,17937,17938,17939,17940,17941,17943,17944,17945,17947,17948,17951,17955,17956,17963,17999,18037,18038,18042,18047,18052,18057,18063,18069,18070,18071,18076,18078,18082,18083,18084,18085,18086,18087,18087,18089,18090,18091,18092,18093,18094,18095,18096,18097,18098,18099,18100,18101,18102,18103,18104,18105,18106,18107,18108,18109,18110,18111,18115,18117,18118,18119,18122,18123,18124,18125,18126,18127,18128,18129,18130,18131,18132,18136,18140,18142,18143,18144,18145,18146,18147,18150,18151,18152,18153,18154,18159,18161,18163,18164,18165,18166,18167,18168,18169,18172,18173,18175,18176,18177,18179],"digest":"a7e8b30b1ecfc0a79c0eb51b2e31792d","branch":[[146,{"text":"if (defined $set) { }"}],[158,{"text":"if (defined $set) { }"}],[307,{"text":"unless @_"}],[334,{"text":"if $max < $el"}],[344,{"text":"if ($$aref[$i] eq $elt)"}],[357,{"text":"unless @$a1 == @$a2"}],[359,{"text":"if $$a1[$i] ne $$a2[$i]"}],[366,{"text":"unless keys %$href1 == keys %$href2"}],[368,{"text":"unless exists $$href2{$key}"}],[397,{"text":"if (pos $input == length $input) { }"}],[417,{"text":"if ($error_counter == $$Netspoc::Compiler::Pass1::config{'max_errors'}) { }"}],[417,{"text":"elsif ($abort_immediately) { }"}],[426,{"text":"if $error_counter"}],[459,{"text":"if ($error_counter)"}],[465,{"text":"if @args"}],[508,{"text":"if ($input =~ /\\G(\\d+)/cg) { }"}],[518,{"text":"unless defined $result"}],[526,{"text":"if ($1 > 255 or $2 > 255 or $3 > 255 or $4 > 255)"}],[525,{"text":"if ($input =~ /\\G(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)/cg) { }"}],[538,{"text":"unless defined $result"}],[548,{"text":"unless defined $mask"}],[549,{"text":"unless match_ip($ip, $ip, $mask)"}],[575,{"text":"if ($input =~ /(\\G[\\w-]+)/cg) { }"}],[586,{"text":"if ($input =~ / ( \\G [\\w-]* [*] ) /cgx) { }"}],[597,{"text":"if ($input =~ /(\\G[^;,\\s\"\"'']+)/cg) { }"}],[608,{"text":"if ($input =~ /\\G([^;,\"\"''\\n]+)/cg) { }"}],[628,{"text":"if check($delimiter)"}],[632,{"text":"if check($delimiter)"}],[634,{"text":"unless $comma_seen"}],[641,{"text":"if $user_ref_error"}],[651,{"text":"unless $input =~ / \\G (\\w+) : /cgx"}],[654,{"text":"if ($input =~ m[ \\G ( [\\w-]+ (?: ( [\\@/] ) [\\w-]+ )? ) ]cgx) { }"}],[664,{"text":"unless $separator eq '@'"}],[667,{"text":"unless $separator eq '/'"}],[663,{"text":"if ($type eq 'router') { }"}],[663,{"text":"elsif ($type eq 'network' or $type eq 'interface') { }"}],[662,{"text":"if ($separator)"}],[709,{"text":"unless $$user_object{'active'}"}],[706,{"text":"if (check('user'))"}],[714,{"text":"unless $input =~ /\\G([\\w-]+):/cg"}],[720,{"text":"if ($interface || $type eq 'host' and check('managed')) { }"}],[720,{"text":"elsif ($type eq 'any' and check('ip')) { }"}],[732,{"text":"unless $input =~ / \\G ( $hostname_regex ) /cgox"}],[737,{"text":"unless $input =~ / \\G ( $network_regex ) /cgox"}],[719,{"text":"if ($input =~ / \\G \\[ /cgox) { }"}],[719,{"text":"elsif ($type eq 'host') { }"}],[719,{"text":"elsif ($type eq 'network') { }"}],[719,{"text":"elsif ($interface and $input =~ / \\G ( [\\w-]+ (?: \\@ [\\w-]+ ) ) /cgx or $input =~ / \\G ( [\\w-]+ ) /cgx) { }"}],[750,{"text":"unless $input =~ / \\G \\. /cgox"}],[753,{"text":"unless $selector =~ /^(auto|all)$/"}],[759,{"text":"if $ext"}],[760,{"text":"unless $input =~ / \\G ( $network_regex ) /cgox"}],[765,{"text":"if ($input =~ / \\G \\. /cgox)"}],[751,{"text":"if ($input =~ / \\G \\[ /cgox) { }"}],[749,{"text":"if ($interface)"}],[770,{"text":"$ext ? :"}],[776,{"text":"if ($input =~ /\\G($user_id_regex)/cog) { }"}],[788,{"text":"if ($input =~ /\\G($hostname_regex)/cog) { }"}],[787,{"text":"if ($input =~ /\\G host:/cgx) { }"}],[802,{"text":"if (check('!')) { }"}],[815,{"text":"if (@result == 1) { }"}],[835,{"text":"unless my $factor = $timeunits{$unit}"}],[841,{"text":"unless check('description')"}],[848,{"text":"if (store_description())"}],[857,{"text":"if ($input =~ /\\G(permit|deny)/cg) { }"}],[867,{"text":"if ($input =~ /\\G nat:([\\w-]+)/cgx) { }"}],[884,{"text":"if (check($token)) { }"}],[897,{"text":"if (wantarray) { }"}],[895,{"text":"if (check($token))"}],[916,{"text":"if check(';')"}],[920,{"text":"if check(';')"}],[922,{"text":"unless $comma_seen"}],[929,{"text":"if check(';')"}],[942,{"text":"if (check($token))"}],[951,{"text":"if (check($token))"}],[978,{"text":"if defined $$obj{$key}"}],[987,{"text":"unless check('radius_attributes')"}],[991,{"text":"if check('\\\\}')"}],[993,{"text":"check('=') ? :"}],[1001,{"text":"unless my $protocol = check_assign('routing', \\&read_identifier)"}],[1002,{"text":"unless my $routing = $routing_info{$protocol}"}],[1008,{"text":"unless check('managed')"}],[1015,{"text":"if ($value =~ /^(?:secondary|standard|full|primary|\n\f                           local|local_secondary|routing_only)$/x) { }"}],[1010,{"text":"if (check(';')) { }"}],[1010,{"text":"elsif (check('=')) { }"}],[1038,{"text":"unless my($model, @attributes) = check_assign_list('model', \\&read_name)"}],[1041,{"text":"unless ($info)"}],[1051,{"text":"unless $ext"}],[1052,{"text":"$ext ? :"}],[1054,{"text":"if (@ext_list)"}],[1073,{"text":"if (not $model) { }"}],[1073,{"text":"elsif (not $$model{'can_managed_host'}) { }"}],[1082,{"text":"unless ($hw_name)"}],[1088,{"text":"$$host{'server_name'} ? :"}],[1112,{"text":"if $private"}],[1113,{"text":"if (my($id) = $name =~ /^host:id:(.*)$/)"}],[1124,{"text":"if check('\\\\}')"}],[1129,{"text":"unless $ip1 <= $ip2"}],[1136,{"text":"unless $managed eq 'standard'"}],[1141,{"text":"if $$host{'model'}"}],[1166,{"text":"if $$host{'nat'}{$name}"}],[1158,{"text":"if ($type eq 'nat') { }"}],[1125,{"text":"if (my $ip = check_assign('ip', \\&read_ip)) { }"}],[1125,{"text":"elsif (my($ip1, $ip2) = check_assign_pair('range', '-', \\&read_ip)) { }"}],[1125,{"text":"elsif (my $managed = check_managed()) { }"}],[1125,{"text":"elsif (my $model = check_model()) { }"}],[1125,{"text":"elsif (my $hardware = check_assign('hardware', \\&read_name)) { }"}],[1125,{"text":"elsif (my $server_name = check_assign('server_name', \\&read_name)) { }"}],[1125,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[1125,{"text":"elsif (my $radius_attributes = check_radius_attributes()) { }"}],[1125,{"text":"elsif (my $pair = check_typed_name()) { }"}],[1178,{"text":"unless $$host{'ip'} xor $$host{'range'}"}],[1194,{"text":"if $ok{$key}"}],[1181,{"text":"if ($$host{'managed'})"}],[1205,{"text":"if $$host{'radius_attributes'}"}],[1201,{"text":"if ($$host{'id'}) { }"}],[1209,{"text":"if ($$host{'range'})"}],[1208,{"text":"if ($$host{'nat'})"}],[1229,{"text":"if check('\\\\}')"}],[1230,{"text":"if (my($ip, $mask) = check_assign('ip', \\&read_ip_prefix)) { }"}],[1230,{"text":"elsif (check_flag('hidden')) { }"}],[1230,{"text":"elsif (check_flag('identity')) { }"}],[1230,{"text":"elsif (check_flag('dynamic')) { }"}],[1230,{"text":"elsif (my $pair = check_assign('subnet_of', \\&read_typed_name)) { }"}],[1255,{"text":"if grep {$key eq $_;} 'name', 'hidden'"}],[1264,{"text":"if grep {$key eq $_;} 'name', 'identity'"}],[1270,{"text":"unless defined $$nat{'ip'}"}],[1253,{"text":"if ($$nat{'hidden'}) { }"}],[1253,{"text":"elsif ($$nat{'identity'}) { }"}],[1284,{"text":"if $private"}],[1285,{"text":"if ($net_name =~ m[^(.*)/])"}],[1292,{"text":"if check('\\\\}')"}],[1298,{"text":"if defined $$network{'ip'}"}],[1323,{"text":"if (is_host($host)) { }"}],[1323,{"text":"elsif (is_interface($host)) { }"}],[1342,{"text":"if ($other_net ne $network)"}],[1339,{"text":"if (my $other = $hosts{$host_name})"}],[1351,{"text":"if $$network{'nat'} and $$network{'nat'}{$nat_tag}"}],[1293,{"text":"if (my($ip, $mask) = check_assign('ip', \\&read_ip_prefix)) { }"}],[1293,{"text":"elsif (check_flag('unnumbered')) { }"}],[1293,{"text":"elsif (check_flag('has_subnets')) { }"}],[1293,{"text":"elsif (check_flag('crosslink')) { }"}],[1293,{"text":"elsif (my $pair = check_assign('subnet_of', \\&read_typed_name)) { }"}],[1293,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[1293,{"text":"elsif (my $radius_attributes = check_radius_attributes()) { }"}],[1293,{"text":"elsif (my $host_name = check_hostname()) { }"}],[1293,{"text":"elsif (my $nat_tag = check_nat_name()) { }"}],[1366,{"text":"unless defined $ip"}],[1373,{"text":"if $ok{$key}"}],[1374,{"text":"$key eq 'nat' ? :"}],[1374,{"text":"$key eq 'hosts' ? :"}],[1396,{"text":"if $ok{$key}"}],[1397,{"text":"$key eq 'hosts' ? :"}],[1406,{"text":"if $$hash{$nat_tag}{'identity'}"}],[1404,{"text":"if (my $hash = $$network{'nat'})"}],[1420,{"text":"unless (match_ip($host_ip, $ip, $mask))"}],[1427,{"text":"unless (match_ip($ip1, $ip, $mask) and match_ip($ip2, $ip, $mask))"}],[1419,{"text":"if (my $host_ip = $$host{'ip'}) { }"}],[1419,{"text":"elsif ($$host{'range'}) { }"}],[1443,{"text":"if (@{$$network{'hosts'};} and $$network{'crosslink'})"}],[1450,{"text":"if $$nat{'dynamic'}"}],[1451,{"text":"unless $$nat{'mask'} == $mask"}],[1446,{"text":"if ($$network{'nat'})"}],[1463,{"text":"unless @{$$network{'hosts'};} == $id_hosts_count"}],[1471,{"text":"if $$network{'radius_attributes'}"}],[1460,{"text":"if (my $id_hosts_count = grep({$$_{'id'};} @{$$network{'hosts'};})) { }"}],[1368,{"text":"if ($ip eq 'unnumbered') { }"}],[1368,{"text":"elsif ($$network{'bridged'}) { }"}],[1499,{"text":"unless (check('='))"}],[1510,{"text":"if check('\\\\}')"}],[1549,{"text":"unless $type eq 'crypto'"}],[1555,{"text":"unless $type eq 'crypto'"}],[1562,{"text":"if $level > 100"}],[1577,{"text":"if $$interface{'nat'}{$name2}"}],[1588,{"text":"if check('\\\\}')"}],[1589,{"text":"if (my $ip = check_assign('ip', \\&read_ip)) { }"}],[1596,{"text":"if ($$secondary{'ip'}) { }"}],[1569,{"text":"if ($type eq 'nat') { }"}],[1569,{"text":"elsif ($type eq 'secondary') { }"}],[1608,{"text":"if $virtual"}],[1619,{"text":"if check('\\\\}')"}],[1624,{"text":"unless $xxrp_info{$type}"}],[1629,{"text":"unless $id =~ /^\\d+$/"}],[1631,{"text":"unless $id < 256"}],[1620,{"text":"if (my $ip = check_assign('ip', \\&read_ip)) { }"}],[1620,{"text":"elsif (my $type = check_assign('type', \\&read_identifier)) { }"}],[1620,{"text":"elsif (my $id = check_assign('id', \\&read_identifier)) { }"}],[1638,{"text":"unless $$virtual{'ip'}"}],[1639,{"text":"if $$virtual{'redundancy_id'} and not $$virtual{'redundancy_type'}"}],[1644,{"text":"if $$interface{'bind_nat'}"}],[1657,{"text":"unless $$_[0] ne 'network'"}],[1657,{"text":"if (grep {ref $$_[1] unless $$_[0] ne 'network';} @pairs)"}],[1511,{"text":"if (my(@ip) = check_assign_list('ip', \\&read_ip)) { }"}],[1511,{"text":"elsif (check_flag('unnumbered')) { }"}],[1511,{"text":"elsif (check_flag('negotiated')) { }"}],[1511,{"text":"elsif (check_flag('loopback')) { }"}],[1511,{"text":"elsif (check_flag('vip')) { }"}],[1511,{"text":"elsif (check_flag('no_in_acl')) { }"}],[1511,{"text":"elsif (check_flag('dhcp_server')) { }"}],[1511,{"text":"elsif (my $pair = check_assign('subnet_of', \\&read_typed_name)) { }"}],[1511,{"text":"elsif (my(@pairs) = check_assign_list('hub', \\&read_typed_name)) { }"}],[1511,{"text":"elsif ($pair = check_assign('spoke', \\&read_typed_name)) { }"}],[1511,{"text":"elsif (my $id = check_assign('id', \\&read_user_id)) { }"}],[1511,{"text":"elsif (defined(my $level = check_assign('security_level', \\&read_int))) { }"}],[1511,{"text":"elsif ($pair = check_typed_name()) { }"}],[1511,{"text":"elsif (check('virtual')) { }"}],[1511,{"text":"elsif (my(@tags) = check_assign_list('bind_nat', \\&read_identifier)) { }"}],[1511,{"text":"elsif (my $hardware = check_assign('hardware', \\&read_name)) { }"}],[1511,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[1511,{"text":"elsif (my $routing = check_routing()) { }"}],[1511,{"text":"elsif (@pairs = check_assign_list('reroute_permit', \\&read_typed_name)) { }"}],[1511,{"text":"elsif (check_flag('disabled')) { }"}],[1511,{"text":"elsif (check_flag('no_check')) { }"}],[1677,{"text":"if ($name =~ m[/])"}],[1686,{"text":"if ($ip =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[1685,{"text":"if (my $ip = $$interface{'ip'})"}],[1684,{"text":"if ($virtual) { }"}],[1707,{"text":"if ($$interface{'ip'} =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[1706,{"text":"if ($$interface{'nat'})"}],[1713,{"text":"if $$interface{'hardware'}"}],[1711,{"text":"if ($$interface{'vip'})"}],[1718,{"text":"if ($$interface{'owner'} and not $$interface{'vip'})"}],[1732,{"text":"$$interface{'vip'} ? :"}],[1730,{"text":"if (keys %copy)"}],[1736,{"text":"$$interface{'vip'} ? :"}],[1735,{"text":"if ($$interface{'ip'} =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[1722,{"text":"if ($$interface{'loopback'}) { }"}],[1722,{"text":"elsif ($$interface{'subnet_of'}) { }"}],[1747,{"text":"if (my(@extra) = grep({not $ok{$_};} keys %$interface))"}],[1745,{"text":"if ($$interface{'ip'} eq 'bridged')"}],[1754,{"text":"if @secondary_interfaces"}],[1758,{"text":"if $$interface{'hub'}"}],[1765,{"text":"if $$interface{'id'}"}],[1752,{"text":"if (my $crypto = $$interface{'spoke'}) { }"}],[1770,{"text":"if ($$interface{'ip'} =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[1769,{"text":"if (my $crypto_list = $$interface{'hub'})"}],[1778,{"text":"if ($$interface{'ip'} =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[1777,{"text":"if (@secondary_interfaces)"}],[1787,{"text":"if $$interface{$key}"}],[1806,{"text":"if (@levels >= 2 and not equal(@levels)) { }"}],[1801,{"text":"if (my(@levels) = grep({defined $_;} map({$$_{'security_level'};} @{$$hardware{'interfaces'};}))) { }"}],[1801,{"text":"elsif ($hwname =~ /inside/) { }"}],[1801,{"text":"elsif ($hwname =~ /outside/) { }"}],[1801,{"text":"elsif (($level) = $hwname =~ /(\\d+)$/ and $level <= 100) { }"}],[1846,{"text":"unless delete $$interface{'no_in_acl'}"}],[1850,{"text":"if $$hardware{'no_in_acl'}"}],[1854,{"text":"unless 1 == grep({not $$_{'main_interface'};} @{$$hardware{'interfaces'};})"}],[1865,{"text":"unless $no_in_acl_counter"}],[1868,{"text":"unless 1 == $no_in_acl_counter"}],[1873,{"text":"unless $$router{'model'}{'has_out_acl'}"}],[1877,{"text":"unless $$_{'hub'}"}],[1877,{"text":"if (grep {$$_{'spoke'} unless $$_{'hub'};} @{$$router{'interfaces'};})"}],[1886,{"text":"unless $$hardware{'no_in_acl'}"}],[1908,{"text":"unless $vrf"}],[1905,{"text":"if (defined $vrf)"}],[1915,{"text":"if check('\\\\}')"}],[1917,{"text":"if $$router{'managed'}"}],[1967,{"text":"if defined $$router{'log'}{$name2}"}],[1969,{"text":"check('=') ? :"}],[1966,{"text":"if ($type eq 'log') { }"}],[1966,{"text":"elsif ($type ne 'interface') { }"}],[1983,{"text":"if ($interfaces{$iname})"}],[1997,{"text":"if $private"}],[1916,{"text":"if (my $managed = check_managed()) { }"}],[1916,{"text":"elsif (my(@filter_only) = check_assign_list('filter_only', \\&read_ip_prefix_pair)) { }"}],[1916,{"text":"elsif (my $model = check_model()) { }"}],[1916,{"text":"elsif (check_flag('no_group_code')) { }"}],[1916,{"text":"elsif (check_flag('no_crypto_filter')) { }"}],[1916,{"text":"elsif (check_flag('no_protect_self')) { }"}],[1916,{"text":"elsif (check_flag('log_deny')) { }"}],[1916,{"text":"elsif (my $routing = check_routing()) { }"}],[1916,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[1916,{"text":"elsif (my $radius_attributes = check_radius_attributes()) { }"}],[1916,{"text":"elsif (my $pair = check_assign('policy_distribution_point', \\&read_typed_name)) { }"}],[1916,{"text":"elsif (my(@list) = check_assign_list('general_permit', \\&read_typed_name_or_simple_protocol)) { }"}],[2009,{"text":"if ($$interface{'vip'} and not $model && $$model{'has_vip'})"}],[2017,{"text":"if ($error)"}],[2033,{"text":"unless ($model)"}],[2041,{"text":"if ($managed eq 'routing_only')"}],[2047,{"text":"if $$router{'vrf'} and not $$model{'can_vrf'}"}],[2058,{"text":"if ($$interface{'ip'} eq 'short')"}],[2069,{"text":"if ($$interface{'ip'} ne 'short')"}],[2066,{"text":"unless ($hw_name)"}],[2083,{"text":"unless aref_eq($$interface{'bind_nat'} || $bind_nat0, $$hardware{'bind_nat'} || $bind_nat0)"}],[2094,{"text":"if (my $nat = $$interface{'bind_nat'})"}],[2099,{"text":"if $hw_name eq 'VIP' and $$model{'has_vip'} and not $$interface{'vip'}"}],[2078,{"text":"if ($hardware = $hardware{$hw_name}) { }"}],[2109,{"text":"unless ($$interface{'loopback'})"}],[2122,{"text":"if $$routing{'name'} eq 'manual'"}],[2121,{"text":"if (my $routing = $$interface{'routing'})"}],[2130,{"text":"if ($all_routing)"}],[2137,{"text":"unless $rname =~ /^(?:manual|dynamic)$/"}],[2133,{"text":"if (my $routing = $$interface{'routing'} and $$interface{'ip'} eq 'unnumbered')"}],[2030,{"text":"if (my $managed = $$router{'managed'})"}],[2147,{"text":"unless $$router{'filter_only'}"}],[2149,{"text":"if $$model{'has_io_acl'}"}],[2146,{"text":"if ($managed =~ /^local/)"}],[2153,{"text":"if $$router{'log_deny'} and not $$model{'can_log_deny'}"}],[2163,{"text":"unless my $modifier = $$hash{$name2}"}],[2165,{"text":"if $$log_modifiers{$modifier}"}],[2170,{"text":"if ($valid) { }"}],[2159,{"text":"if (my $log_modifiers = $$model{'log_modifiers'}) { }"}],[2158,{"text":"if (my $hash = $$router{'log'})"}],[2185,{"text":"if $$router{'no_protect_self'} and not $$model{'need_protect'}"}],[2189,{"text":"if ($$model{'need_protect'})"}],[2195,{"text":"if (defined $$interface{'security_level'} and not $$model{'has_interface_level'})"}],[2202,{"text":"unless $$model{'crypto'}"}],[2201,{"text":"if ($$interface{'hub'} or $$interface{'spoke'})"}],[2206,{"text":"if ($$interface{'no_check'} and not $$interface{'hub'} && $$model{'do_auth'})"}],[2218,{"text":"unless $$interface{'ip'} eq 'bridged'"}],[2235,{"text":"unless $$layer3_intf{'hardware'}{'name'} eq 'device'"}],[2234,{"text":"if ($$model{'class'} eq 'ASA')"}],[2240,{"text":"if (my($no_ip) = $$layer3_intf{'ip'} =~ /^(unnumbered|negotiated|short|bridged)$/)"}],[2221,{"text":"if (exists $layer3_seen{$layer3_name}) { }"}],[2221,{"text":"elsif ($layer3_intf = $interfaces{$layer3_name}) { }"}],[2268,{"text":"unless my $main = $$interface{'main_interface'}"}],[2269,{"text":"if ($$main{'is_layer3'})"}],[2278,{"text":"if $changed"}],[2265,{"text":"if (keys %layer3_seen)"}],[2281,{"text":"if ($$model{'has_interface_level'})"}],[2288,{"text":"if grep {$$_{'bind_nat'};} @{$$router{'interfaces'};}"}],[2287,{"text":"if ($managed =~ /^local/)"}],[2294,{"text":"unless grep {$$_{'hub'};} @{$$router{'interfaces'};}"}],[2300,{"text":"if grep {$$_{'bind_nat'};} @{$$router{'interfaces'};}"}],[2307,{"text":"if $$router{'radius_attributes'}"}],[2292,{"text":"if ($$model{'do_auth'}) { }"}],[2310,{"text":"if ($$model{'no_crypto_filter'})"}],[2318,{"text":"if (delete $$router{'owner'})"}],[2322,{"text":"if ($$interface{'hub'})"}],[2326,{"text":"if (delete $$interface{'reroute_permit'})"}],[2332,{"text":"if ($$interface{'ip'} eq 'bridged')"}],[2338,{"text":"if ($bridged)"}],[2145,{"text":"if (my $managed = $$router{'managed'}) { }"}],[2356,{"text":"if ($$interface{'redundant'}) { }"}],[2384,{"text":"if (my $private = $$interface{'private'})"}],[2372,{"text":"unless ($networks{$net_name})"}],[2405,{"text":"if ($$interface{$key})"}],[2409,{"text":"if ($interfaces{$iname})"}],[2421,{"text":"if (my $private = $$interface{'private'})"}],[2349,{"text":"if ($$interface{'loopback'}) { }"}],[2349,{"text":"elsif (my $crypto = $$interface{'spoke'}) { }"}],[2430,{"text":"if ($$interface{'spoke'} || $$interface{'hub'} and not $$interface{'no_check'})"}],[2437,{"text":"if @move_locked"}],[2481,{"text":"unless 1 == @{$$hardware{'interfaces'};}"}],[2484,{"text":"if (my $hash = $$orig_router{'radius_attributes'})"}],[2473,{"text":"if ($$orig_router{'managed'})"}],[2499,{"text":"if $private"}],[2504,{"text":"if check('\\\\}')"}],[2520,{"text":"unless $$nat{'dynamic'}"}],[2521,{"text":"if $$aggregate{'nat'}{$nat_name}"}],[2505,{"text":"if (my($ip, $mask) = check_assign('ip', \\&read_ip_prefix)) { }"}],[2505,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[2505,{"text":"elsif (my $link = check_assign('link', \\&read_typed_name)) { }"}],[2505,{"text":"elsif (check_flag('has_unenforceable')) { }"}],[2505,{"text":"elsif (my $nat_name = check_nat_name()) { }"}],[2529,{"text":"unless $$aggregate{'link'}"}],[2535,{"text":"if grep {$key eq $_;} 'name', 'ip', 'mask', 'link', 'is_aggregate', 'private', 'nat'"}],[2532,{"text":"if ($ip) { }"}],[2551,{"text":"unless check('router_attributes')"}],[2555,{"text":"if check('\\\\}')"}],[2556,{"text":"if (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[2556,{"text":"elsif (my $pair = check_assign('policy_distribution_point', \\&read_typed_name)) { }"}],[2556,{"text":"elsif (my(@list) = check_assign_list('general_permit', \\&read_typed_name_or_simple_protocol)) { }"}],[2588,{"text":"if check('\\\\}')"}],[2590,{"text":"unless $$_[0] ne 'interface'"}],[2590,{"text":"if (grep {ref $$_[1] unless $$_[0] ne 'interface';} @elements)"}],[2599,{"text":"unless $$_[0] ne 'interface'"}],[2599,{"text":"if (grep {ref $$_[1] unless $$_[0] ne 'interface';} @elements)"}],[2609,{"text":"if ($$pair[0] ne 'network' or ref $$pair[1])"}],[2623,{"text":"unless $$nat{'dynamic'}"}],[2624,{"text":"if $$area{'nat'}{$nat_name}"}],[2589,{"text":"if (my(@elements) = check_assign_list('border', \\&read_intersection)) { }"}],[2589,{"text":"elsif (@elements = check_assign_list('inclusive_border', \\&read_intersection)) { }"}],[2589,{"text":"elsif (check_flag('auto_border')) { }"}],[2589,{"text":"elsif (my $pair = check_assign('anchor', \\&read_typed_name)) { }"}],[2589,{"text":"elsif (my $owner = check_assign('owner', \\&read_identifier)) { }"}],[2589,{"text":"elsif (my $router_attributes = check_router_attributes($name)) { }"}],[2589,{"text":"elsif (my $nat_name = check_nat_name()) { }"}],[2632,{"text":"if $$area{'border'} || $$area{'inclusive_border'} and $$area{'anchor'}"}],[2637,{"text":"unless $$area{'anchor'} or $$area{'border'} or $$area{'inclusive_border'}"}],[2649,{"text":"if $private"}],[2667,{"text":"if $port1 > 65535"}],[2668,{"text":"if $port1 == 0"}],[2671,{"text":"if $port2 > 65535"}],[2672,{"text":"if $port2 == 0"}],[2673,{"text":"if $port1 > $port2"}],[2675,{"text":"if ($port1 == 1 and $port2 == 65535) { }"}],[2670,{"text":"if (defined(my $port2 = check_int())) { }"}],[2669,{"text":"if (check('-')) { }"}],[2666,{"text":"if (defined(my $port1 = check_int())) { }"}],[2699,{"text":"if ($range ne $aref_tcp_any)"}],[2698,{"text":"if (check(':')) { }"}],[2713,{"text":"if $type > 255"}],[2716,{"text":"if $code > 255"}],[2715,{"text":"if (defined(my $code = check_int())) { }"}],[2726,{"text":"if ($type == 0 or $type == 3 or $type == 11)"}],[2714,{"text":"if (check('/')) { }"}],[2712,{"text":"if (defined(my $type = check_int())) { }"}],[2741,{"text":"if $nr > 255"}],[2742,{"text":"if $nr == 0"}],[2743,{"text":"if ($nr == 1) { }"}],[2743,{"text":"elsif ($nr == 4) { }"}],[2743,{"text":"elsif ($nr == 17) { }"}],[2740,{"text":"if (defined(my $nr = check_int())) { }"}],[2776,{"text":"if ($v1 == $v2) { }"}],[2776,{"text":"elsif ($v1 == 1 and $v2 == 65535) { }"}],[2790,{"text":"if $src_port"}],[2791,{"text":"if $dst_port"}],[2792,{"text":"if $port"}],[2796,{"text":"if (defined(my $code = $$protocol{'code'})) { }"}],[2795,{"text":"if (defined(my $type = $$protocol{'type'}))"}],[2771,{"text":"if ($proto eq 'ip') { }"}],[2771,{"text":"elsif ($proto eq 'tcp' or $proto eq 'udp') { }"}],[2771,{"text":"elsif ($proto eq 'icmp') { }"}],[2815,{"text":"if (my $cached = $protocols{$name}) { }"}],[2830,{"text":"if ($proto eq 'ip') { }"}],[2830,{"text":"elsif ($proto eq 'tcp') { }"}],[2830,{"text":"elsif ($proto eq 'udp') { }"}],[2830,{"text":"elsif ($proto eq 'icmp') { }"}],[2830,{"text":"elsif ($proto eq 'proto') { }"}],[2854,{"text":"if ($name) { }"}],[2867,{"text":"if ($flag =~ /^(?:reversed | stateless | oneway |\n\f                          src_net | dst_net |\n\f                          overlaps | no_check_supernet_rules )/x) { }"}],[2908,{"text":"if $private"}],[2913,{"text":"if check('user')"}],[2914,{"text":"if (my $sub_owner = check_assign('sub_owner', \\&read_identifier)) { }"}],[2914,{"text":"elsif (my(@other) = check_assign_list('overlaps', \\&read_typed_name)) { }"}],[2914,{"text":"elsif (my $visible = check_assign('visible', \\&read_owner_pattern)) { }"}],[2914,{"text":"elsif (check_flag('multi_owner')) { }"}],[2914,{"text":"elsif (check_flag('unknown_owner')) { }"}],[2914,{"text":"elsif (check_flag('has_unenforceable')) { }"}],[2914,{"text":"elsif (check_flag('disabled')) { }"}],[2942,{"text":"if (check('foreach'))"}],[2949,{"text":"if check('\\\\}')"}],[2956,{"text":"if (my(@list) = check_assign_list('log', \\&read_identifier))"}],[2960,{"text":"unless $src_user or $dst_user"}],[2962,{"text":"if ($$service{'foreach'} and not $src_user && $dst_user)"}],[2969,{"text":"$dst_user ? :"}],[2969,{"text":"$src_user ? :"}],[2977,{"text":"if $log"}],[2950,{"text":"if (my $action = check_permit_deny()) { }"}],[2993,{"text":"if $private"}],[3007,{"text":"if check('\\\\}')"}],[3009,{"text":"unless my $val_descr = $$attr_descr{$attribute}"}],[3015,{"text":"unless grep {$_ eq $val;} @$values"}],[3013,{"text":"if (my $values = $$val_descr{'values'}) { }"}],[3013,{"text":"elsif (my $fun = $$val_descr{'function'}) { }"}],[3030,{"text":"if (my $default = $$description{'default'}) { }"}],[3029,{"text":"unless (defined $$object{$attribute})"}],[3041,{"text":"if (exists $$map{$value})"}],[3039,{"text":"if (my $map = $$description{'map'})"}],[3128,{"text":"if $private"}],[3131,{"text":"if check('\\\\}')"}],[3136,{"text":"if $$crypto{'type'}"}],[3132,{"text":"if (check_flag('detailed_crypto_acl')) { }"}],[3132,{"text":"elsif (my $type = check_assign('type', \\&read_typed_name)) { }"}],[3144,{"text":"unless $$crypto{'type'}"}],[3157,{"text":"if check('\\\\}')"}],[3159,{"text":"if $$owner{'alias'}"}],[3164,{"text":"if $$owner{'admins'}"}],[3169,{"text":"if $$owner{'watchers'}"}],[3158,{"text":"if (my $alias = check_assign('alias', \\&read_string)) { }"}],[3158,{"text":"elsif (my(@admins) = check_assign_list('admins', \\&read_name)) { }"}],[3158,{"text":"elsif (my(@watchers) = check_assign_list('watchers', \\&read_name)) { }"}],[3158,{"text":"elsif (check_flag('extend_only')) { }"}],[3158,{"text":"elsif (check_flag('extend_unbounded')) { }"}],[3158,{"text":"elsif (check_flag('extend')) { }"}],[3158,{"text":"elsif (check_flag('show_all')) { }"}],[3190,{"text":"unless $$owner{'extend_only'} and $$owner{'watchers'}"}],[3189,{"text":"unless ($$owner{'admins'})"}],[3216,{"text":"unless my $pair = check_typed_name()"}],[3218,{"text":"unless my $descr = $global_type{$type}"}],[3223,{"text":"if (my $other = $$hash{$name})"}],[3245,{"text":"unless open my $fh, '<', $current_file"}],[3244,{"text":"if (defined $current_file) { }"}],[3270,{"text":"unless (defined $path and -d $path)"}],[3280,{"text":"unless opendir my $dh, $path"}],[3282,{"text":"if $file =~ /^\\./"}],[3283,{"text":"if $file =~ /$$Netspoc::Compiler::Pass1::config{'ignore_files'}/o"}],[3279,{"text":"if (-d $path) { }"}],[3300,{"text":"if ($private)"}],[3299,{"text":"if (my($name) = $path =~ m[([^/]*)\\.private$]) { }"}],[3313,{"text":"unless opendir my $dh, $path"}],[3319,{"text":"if $file =~ /^\\./"}],[3320,{"text":"if $file =~ /$$Netspoc::Compiler::Pass1::config{'ignore_files'}/o"}],[3323,{"text":"if $file =~ /^(config|raw)$/"}],[3365,{"text":"if $$rule{'stateless'}"}],[3366,{"text":"if $$rule{'stateless_icmp'}"}],[3367,{"text":"if $service"}],[3368,{"text":"$$rule{'deny'} ? :"}],[3373,{"text":"unless ref $$what eq 'ARRAY'"}],[3387,{"text":"$src_range ? :"}],[3418,{"text":"unless my $range = $$prt{$where}"}],[3421,{"text":"unless ($range_prt)"}],[3438,{"text":"defined $code ? :"}],[3438,{"text":"defined $type ? :"}],[3439,{"text":"unless $main_prt = $prt_hash{$proto}{$key}"}],[3443,{"text":"unless $main_prt = $prt_hash{$proto}"}],[3450,{"text":"unless $main_prt = $prt_hash{'proto'}{$key}"}],[3407,{"text":"if ($proto eq 'tcp' or $proto eq 'udp') { }"}],[3407,{"text":"elsif ($proto eq 'icmp') { }"}],[3407,{"text":"elsif ($proto eq 'ip') { }"}],[3453,{"text":"if ($main_prt)"}],[3469,{"text":"if (my $prt = $$hash{''})"}],[3476,{"text":"if (not defined $$prt{'type'}) { }"}],[3476,{"text":"elsif (defined $$prt{'code'}) { }"}],[3510,{"text":"unless $$a{'range'}[0] <=> $$b{'range'}[0]"}],[3528,{"text":"if $i == @sorted"}],[3534,{"text":"if ($a2 + 1 == $b1)"}],[3543,{"text":"if $a2 < $b1"}],[3555,{"text":"unless $i"}],[3548,{"text":"if ($a2 >= $b2)"}],[3574,{"text":"if ($i == @sorted)"}],[3582,{"text":"if ($a1 > $b1)"}],[3592,{"text":"if ($a2 < $b2)"}],[3598,{"text":"if ($a2 == $b2)"}],[3588,{"text":"if ($a1 == $b1)"}],[3640,{"text":"unless @sorted"}],[3648,{"text":"unless $a1 == 1 and $a2 == 65535"}],[3653,{"text":"if &$check_subrange($a, $a1, $a2, 1)"}],[3661,{"text":"if (not $prt) { }"}],[3661,{"text":"elsif (my $split = $$prt{'split'}) { }"}],[3720,{"text":"$$_{'prt'} ? :"}],[3765,{"text":"if (my $owner = $owners{$value})"}],[3764,{"text":"if (my $value = $$obj{$key})"}],[3780,{"text":"if ($$owner{'extend_only'})"}],[3779,{"text":"if (my $owner = link_to_owner($obj, $key))"}],[3801,{"text":"unless ($names)"}],[3806,{"text":"if ($$owner{'watching_owners'})"}],[3809,{"text":"if ($names eq 'recursive')"}],[3819,{"text":"unless ($owner_b)"}],[3817,{"text":"if (my($o_name) = $name =~ /^owner:(.*)$/) { }"}],[3851,{"text":"if $$owner{'alias'}"}],[3853,{"text":"if $$other{'alias'}"}],[3849,{"text":"if (my $other = $alias2owner{$alias}) { }"}],[3873,{"text":"unless $email =~ m[^ [\\w.!\\#$%&''*+/=?^_``{|}~-]+ \\@ [\\w.-]+ $]x"}],[3871,{"text":"unless do {\n\tuse bytes;\n$email eq 'guest' unless $email =~ m[^ [\\w.!\\#$%&''*+/=?^_``{|}~-]+ \\@ [\\w.-]+ $]x\n}"}],[3890,{"text":"if (my(@emails) = find_duplicates(@{$$owner{$attr};}))"}],[3896,{"text":"if (my(@duplicates) = find_duplicates(@{$$owner{'admins'};}, @{$$owner{'watchers'};}))"}],[3888,{"text":"if (find_duplicates(@{$$owner{'admins'};}, @{$$owner{'watchers'};}))"}],[3915,{"text":"if (my $router_attributes = $$area{'router_attributes'})"}],[3921,{"text":"unless $$router{'model'}{'has_vip'}"}],[3934,{"text":"unless my $pair = $$obj{'policy_distribution_point'}"}],[3936,{"text":"if ($type ne 'host')"}],[3945,{"text":"unless ($host)"}],[3959,{"text":"unless my $list = $$obj{'general_permit'}"}],[3965,{"text":"ref $a eq 'ARRAY' ? :"}],[3965,{"text":"ref $b eq 'ARRAY' ? :"}],[3983,{"text":"unless $range = $$prt{'range'}"}],[3978,{"text":"if (ref $prt eq 'ARRAY') { }"}],[3987,{"text":"if (my $flags = $$orig_prt{'flags'})"}],[3990,{"text":"if ($src_range or $range and $range ne $aref_tcp_any)"}],[3993,{"text":"if (@reason)"}],[4010,{"text":"if (is_network($obj)) { }"}],[4008,{"text":"if (@elements == 1) { }"}],[4030,{"text":"unless $$area{$attr}"}],[4035,{"text":"unless $$router{'managed'}"}],[4040,{"text":"if (my $main_interface = $$obj{'main_interface'})"}],[4033,{"text":"if (is_interface($obj)) { }"}],[4005,{"text":"if ($$area{'anchor'}) { }"}],[4054,{"text":"if (my $router_attributes = $$area{'router_attributes'})"}],[4072,{"text":"if ($$interface{'disabled'}) { }"}],[4069,{"text":"unless ($network)"}],[4094,{"text":"unless $private1 eq $private2"}],[4093,{"text":"if (my $private2 = $$interface{'private'}) { }"}],[4092,{"text":"if (my $private1 = $$network{'private'})"}],[4129,{"text":"unless $network_ip eq 'unnumbered'"}],[4150,{"text":"unless (match_ip($ip, $network_ip, $mask))"}],[4155,{"text":"unless ($$network{'loopback'})"}],[4165,{"text":"if ($ip == $network_ip)"}],[4169,{"text":"if ($ip == $broadcast)"}],[4154,{"text":"if ($mask == 4294967295) { }"}],[4122,{"text":"if ($ip =~ /^(?:short|tunnel)$/) { }"}],[4122,{"text":"elsif ($ip eq 'unnumbered') { }"}],[4122,{"text":"elsif ($network_ip eq 'unnumbered') { }"}],[4122,{"text":"elsif ($ip eq 'negotiated') { }"}],[4122,{"text":"elsif ($ip eq 'bridged') { }"}],[4193,{"text":"ref $parent ? :"}],[4193,{"text":"!$parent ? :"}],[4197,{"text":"unless $$object{'subnet_of'}"}],[4199,{"text":"if ($type ne 'network')"}],[4208,{"text":"unless ($network)"}],[4225,{"text":"if ($ip eq 'unnumbered')"}],[4236,{"text":"unless (match_ip($sub_ip, $ip, $mask))"}],[4248,{"text":"unless my $nat = $$obj{'nat'}"}],[4266,{"text":"unless $$router{'managed'}"}],[4279,{"text":"unless (is_interface($obj))"}],[4294,{"text":"unless $$router{'managed'}"}],[4297,{"text":"if $$obj{'main_interface'}"}],[4305,{"text":"if $private eq $obj_p"}],[4304,{"text":"if (my $obj_p = $$obj{'private'})"}],[4311,{"text":"if (my $obj_p = $$obj{'private'})"}],[4303,{"text":"if ($private) { }"}],[4317,{"text":"if ($no_private)"}],[4321,{"text":"if ($changed)"}],[4325,{"text":"if ($count == 1) { }"}],[4325,{"text":"elsif ($count == 0) { }"}],[4340,{"text":"unless $$interface{'spoke'} or $$interface{'hub'}"}],[4344,{"text":"if $$interface{'no_check'}"}],[4348,{"text":"unless $real_intf"}],[4349,{"text":"unless $real_intf eq $interface"}],[4378,{"text":"if $$virtual1{'disabled'}"}],[4386,{"text":"if ($type1 ne $type2)"}],[4391,{"text":"unless ($id1 eq ($$virtual2{'redundancy_id'} || ''))"}],[4409,{"text":"if (my $virtual2 = $net2id2type2virtual{$net}{$id1}{$type1}) { }"}],[4408,{"text":"if ($id1)"}],[4383,{"text":"if (my $interfaces = $net2ip2virtual{$net}{$ip}) { }"}],[4433,{"text":"if @$interfaces <= 2"}],[4438,{"text":"if $$interface{'main_interface'}"}],[4439,{"text":"unless my $restricts = $$interface{'path_restrict'}"}],[4441,{"text":"if $seen{$restrict}"}],[4445,{"text":"if @restrict_routers == @virt_routers"}],[4450,{"text":"if (grep {$_ eq $router;} @restrict_routers)"}],[4474,{"text":"if ($$router{'managed'} or $$router{'routing_only'})"}],[4492,{"text":"unless my $group = $$interfaces[0]{'redundancy_interfaces'}"}],[4493,{"text":"unless $$_{'redundancy_interfaces'}"}],[4500,{"text":"if ($$network{'ip'} eq 'unnumbered' and $$network{'interfaces'} and @{$$network{'interfaces'};} > 2)"}],[4523,{"text":"if (1 < @{$$interface{'router'}{'interfaces'};})"}],[4530,{"text":"if ($$router{'managed'} || $$router{'routing_only'} and not $$interface{'routing'})"}],[4536,{"text":"unless ($$old_intf{'redundant'} and $$interface{'redundant'})"}],[4535,{"text":"if (my $old_intf = $ip2obj{$ip}) { }"}],[4528,{"text":"unless ($ip =~ /^(?:unnumbered|negotiated|tunnel|bridged)$/)"}],[4520,{"text":"if ($ip eq 'short') { }"}],[4548,{"text":"if ($short_intf and $route_intf)"}],[4557,{"text":"if (my $other_device = $ip2obj{$ip}) { }"}],[4567,{"text":"if (my $other_device = $range2obj{$from}{$to}) { }"}],[4556,{"text":"if (my $ip = $$host{'ip'}) { }"}],[4556,{"text":"elsif (my $range = $$host{'range'}) { }"}],[4580,{"text":"unless is_host($other_device)"}],[4579,{"text":"if (my $other_device = $ip2obj{$ip})"}],[4577,{"text":"if (my $range = $$host{'range'})"}],[4633,{"text":"if (not $network or $$network{'disabled'})"}],[4643,{"text":"if $interface eq $in_interface"}],[4646,{"text":"if ($$interface{'disabled'})"}],[4655,{"text":"if $out_interface eq $interface"}],[4683,{"text":"unless my $prefix = $$network{'bridged'}"}],[4688,{"text":"unless $$network{'disabled'}"}],[4687,{"text":"if (my $network = $networks{$prefix})"}],[4696,{"text":"unless @group"}],[4705,{"text":"unless $ip == $ip1 and $mask == $mask1"}],[4710,{"text":"if $$in_intf{'ip'} ne 'bridged'"}],[4712,{"text":"if $seen{$router}"}],[4716,{"text":"unless match_ip($$layer3_intf{'ip'}, $ip, $mask)"}],[4715,{"text":"if (my $layer3_intf = $$in_intf{'layer3_interface'})"}],[4721,{"text":"if $out_intf eq $in_intf"}],[4722,{"text":"if $$out_intf{'ip'} ne 'bridged'"}],[4724,{"text":"unless $$href{$next_net}"}],[4728,{"text":"unless $count > 1"}],[4733,{"text":"unless $$href{$network} eq 'connected'"}],[4747,{"text":"if $$interface{'router'}{'disabled'}"}],[4749,{"text":"if ($$interface{'router'}{'disabled'})"}],[4764,{"text":"if ($$router{'managed'} or $$router{'routing_only'})"}],[4777,{"text":"unless my $borders = $$area{$attr}"}],[4778,{"text":"if (my(@active_borders) = grep({not $$_{'disabled'};} @$borders))"}],[4772,{"text":"if (my $anchor = $$area{'anchor'}) { }"}],[4784,{"text":"if ($ok) { }"}],[4793,{"text":"if $$router{'disabled'}"}],[4795,{"text":"if ($$router{'managed'}) { }"}],[4795,{"text":"elsif ($$router{'routing_only'}) { }"}],[4807,{"text":"if $$router{'orig_router'}"}],[4812,{"text":"if @$aref == 1"}],[4813,{"text":"$$_{'managed'} || $$_{'routing_only'} ? :"}],[4815,{"text":"unless equal(map({$$_{'managed'} || $$_{'routing_only'} ? $$_{'model'}{'name'} : ();} @$aref))"}],[4829,{"text":"if (my $other = $hardware{$name}) { }"}],[4854,{"text":"if $$interface{'disabled'}"}],[4856,{"text":"unless $seen{$network}++"}],[4862,{"text":"if $$network{'disabled'}"}],[4864,{"text":"if (keys %networks > 1) { }"}],[4863,{"text":"unless ($seen{$network})"}],[4895,{"text":"if (($low & $mask) == 0 and $low + $mask <= $high)"}],[4927,{"text":"unless ($$nat2{$name} and $$nat{$name} eq $$nat2{$name})"}],[4923,{"text":"if (keys %$nat == keys %$nat2) { }"}],[4917,{"text":"if ($nat xor $nat2) { }"}],[4917,{"text":"elsif ($nat and $nat2) { }"}],[4940,{"text":"if $nat_error"}],[4943,{"text":"unless owner_eq($host, $other_subnet)"}],[4951,{"text":"if $$network{'ip'} =~ /^(?:unnumbered|tunnel)$/"}],[4964,{"text":"unless $user"}],[4963,{"text":"if (my($user, $dom) = $id =~ /^(.*?)(\\@.*)$/) { }"}],[4962,{"text":"if ($id)"}],[4979,{"text":"if (@ip_mask > 1) { }"}],[4979,{"text":"elsif ($ip_mask[0][1] == 4294967295) { }"}],[4979,{"text":"elsif ($id =~ /^.+\\@/) { }"}],[4978,{"text":"if ($id)"}],[4960,{"text":"if (my $ip = $$host{'ip'}) { }"}],[4960,{"text":"elsif ($$host{'range'}) { }"}],[5010,{"text":"if $nat"}],[5011,{"text":"if $private"}],[5012,{"text":"if $owner"}],[5013,{"text":"if ($id)"}],[4998,{"text":"if (my $other_subnet = $inv_prefix_aref[$inv_prefix]{$ip}) { }"}],[5028,{"text":"unless my $ip2subnet = $inv_prefix_aref[$i]"}],[5036,{"text":"if (my $up = $inv_prefix_aref[$j]{$ip})"}],[5104,{"text":"if $private"}],[5103,{"text":"if (my $private = $$subnet{'private'})"}],[5081,{"text":"if ($up_inv_prefix >= $network_inv_prefix) { }"}],[5081,{"text":"elsif ($up_inv_prefix < @inv_prefix_aref and $up = $inv_prefix_aref[$up_inv_prefix]{$ip}) { }"}],[5077,{"text":"if (my $neighbor = $$ip2subnet{$next_ip})"}],[5057,{"text":"if (not $$subnet{'nat'} || $$subnet{'id'} and $ip % $modulo == 0)"}],[5051,{"text":"if (my $ip2subnet = $inv_prefix_aref[$i])"}],[5124,{"text":"if $$router{'managed'} or $$router{'routing_only'}"}],[5141,{"text":"unless ($hash{$up})"}],[5139,{"text":"if ($neighbor = $$subnet{'neighbor'} and $hash{$neighbor})"}],[5149,{"text":"if (@extra) { }"}],[5165,{"text":"unless $$a{'mask'} <=> $$b{'mask'}"}],[5187,{"text":"if (my $orig_router = $$router{'orig_router'}) { }"}],[5187,{"text":"elsif (my $orig_interfaces = $$router{'orig_interfaces'}) { }"}],[5206,{"text":"if (is_router($object)) { }"}],[5219,{"text":"if $$object{'disabled'}"}],[5204,{"text":"unless ($result)"}],[5246,{"text":"if $$obj{'disabled'}"}],[5260,{"text":"unless ($other)"}],[5272,{"text":"if (!$$other{'network'} eq $network)"}],[5271,{"text":"if (not $other and $other = $$info{'i'}{$router})"}],[5257,{"text":"if (is_router($auto)) { }"}],[5249,{"text":"if ($type eq 'Interface') { }"}],[5249,{"text":"elsif ($type eq 'Autointerface') { }"}],[5280,{"text":"if ($other)"}],[5291,{"text":"if (ref $val) { }"}],[5317,{"text":"$$element[0] eq '!' ? :"}],[5326,{"text":"if ($$element[0] eq '!') { }"}],[5333,{"text":"unless @non_compl >= 1"}],[5344,{"text":"if ($$result{$element})"}],[5351,{"text":"if $$element{'disabled'}"}],[5352,{"text":"unless delete $$result{$element}"}],[5369,{"text":"ref $elements eq 'ARRAY' ? :"}],[5374,{"text":"unless ref $ext"}],[5380,{"text":"if $$object{'disabled'}"}],[5390,{"text":"unless $$object{'mask'} == 0"}],[5398,{"text":"unless $$_{'router'}{'managed'}"}],[5385,{"text":"if ($$object{'is_aggregate'}) { }"}],[5385,{"text":"elsif ($managed) { }"}],[5409,{"text":"if ($$object{'is_aggregate'}) { }"}],[5384,{"text":"if ($selector eq 'all') { }"}],[5421,{"text":"if ($managed and not $$router{'managed'} || $$router{'routing_only'}) { }"}],[5421,{"text":"elsif ($selector eq 'all') { }"}],[5452,{"text":"unless ($seen{$router})"}],[5460,{"text":"unless $$_{'managed'}"}],[5467,{"text":"$r ? :"}],[5457,{"text":"if ($managed) { }"}],[5470,{"text":"if ($selector eq 'all') { }"}],[5480,{"text":"if ($managed and not $$obj{'managed'} || $$obj{'routing_only'}) { }"}],[5480,{"text":"elsif ($selector eq 'all') { }"}],[5479,{"text":"if (is_router($obj)) { }"}],[5383,{"text":"if ($type eq 'Network') { }"}],[5383,{"text":"elsif ($type eq 'Interface') { }"}],[5383,{"text":"elsif ($type eq 'Area') { }"}],[5383,{"text":"elsif ($type eq 'Autointerface') { }"}],[5511,{"text":"if $managed"}],[5512,{"text":"if ($selector eq 'all') { }"}],[5508,{"text":"if (my $router = $routers{$name}) { }"}],[5373,{"text":"if (ref $name) { }"}],[5373,{"text":"elsif (ref $ext) { }"}],[5373,{"text":"elsif (my $interface = $interfaces{\"$name.$ext\"}) { }"}],[5538,{"text":"$clean_autogrp ? :"}],[5551,{"text":"if ($type eq 'Area') { }"}],[5551,{"text":"elsif ($type eq 'Network' and $$object{'is_aggregate'}) { }"}],[5572,{"text":"if (not $$object{'is_aggregate'}) { }"}],[5590,{"text":"$$_{'is_aggregate'} ? :"}],[5568,{"text":"if ($type eq 'Host' or $type eq 'Interface') { }"}],[5568,{"text":"elsif ($type eq 'Network') { }"}],[5568,{"text":"elsif (my $aggregates = &$get_aggregates($object, 0, 0)) { }"}],[5608,{"text":"if ($$object{'is_managed_host'}) { }"}],[5619,{"text":"if (my $managed_hosts = $$network{'managed_hosts'})"}],[5604,{"text":"if ($type eq 'Host') { }"}],[5604,{"text":"elsif ($type eq 'Interface') { }"}],[5604,{"text":"elsif (my $networks = &$get_networks($object)) { }"}],[5629,{"text":"if ($managed)"}],[5635,{"text":"if $ext"}],[5654,{"text":"if (@$interfaces > 1)"}],[5650,{"text":"if ($$intf{'router'}{'managed'}) { }"}],[5647,{"text":"if ($$_{'loopback'}) { }"}],[5667,{"text":"$clean_autogrp ? :"}],[5638,{"text":"if (my $networks = &$get_networks($object)) { }"}],[5682,{"text":"$ext ? :"}],[5685,{"text":"if (my $aggregates = &$get_aggregates($object, $ip, $mask)) { }"}],[5685,{"text":"elsif (my $networks = &$get_networks($object)) { }"}],[5599,{"text":"if ($type eq 'host') { }"}],[5599,{"text":"elsif ($type eq 'network') { }"}],[5599,{"text":"elsif ($type eq 'any') { }"}],[5713,{"text":"if $ext"}],[5721,{"text":"$clean_autogrp ? :"}],[5753,{"text":"unless $private1 eq $private2"}],[5752,{"text":"if (my $private2 = $$element{'private'})"}],[5765,{"text":"if ($unique{$obj}++)"}],[5770,{"text":"if (@duplicate)"}],[5727,{"text":"if ($$object{'recursive'}) { }"}],[5727,{"text":"elsif (not $elements) { }"}],[5718,{"text":"if (is_group($object)) { }"}],[5718,{"text":"elsif ($$object{'is_aggregate'} and $$object{'zone'}{'zone_cluster'}) { }"}],[5312,{"text":"if ($type eq '&') { }"}],[5312,{"text":"elsif ($type eq '!') { }"}],[5312,{"text":"elsif ($type eq 'user') { }"}],[5312,{"text":"elsif ($type eq 'interface') { }"}],[5312,{"text":"elsif (ref $name) { }"}],[5312,{"text":"elsif (my $object = $name2object{$type}{$name}) { }"}],[5809,{"text":"if ($seen{$obj}++)"}],[5814,{"text":"if (@duplicate)"}],[5831,{"text":"if ($$object{'disabled'})"}],[5836,{"text":"if $changed"}],[5858,{"text":"if ($$object{'is_tunnel'}) { }"}],[5858,{"text":"elsif ($$object{'has_id_hosts'}) { }"}],[5851,{"text":"if ($$object{'ip'} eq 'unnumbered') { }"}],[5851,{"text":"elsif ($$object{'crosslink'}) { }"}],[5851,{"text":"elsif ($$object{'is_aggregate'}) { }"}],[5867,{"text":"if ($$object{'ip'} =~ /^(short|unnumbered)$/)"}],[5850,{"text":"if (is_network($object)) { }"}],[5850,{"text":"elsif (is_interface($object)) { }"}],[5850,{"text":"elsif (is_area($object)) { }"}],[5874,{"text":"if ($ignore)"}],[5880,{"text":"if $changed"}],[5887,{"text":"$print_type eq 'warn' ? :"}],[5890,{"text":"if $$value{'is_used'}"}],[5894,{"text":"if (my $conf = $$Netspoc::Compiler::Pass1::config{'check_unused_groups'})"}],[5899,{"text":"if (my $conf = $$Netspoc::Compiler::Pass1::config{'check_unused_protocols'})"}],[5922,{"text":"if (ref $pair eq 'HASH')"}],[5929,{"text":"if (my $prt = $protocols{$name}) { }"}],[5943,{"text":"if ($elements eq 'recursive') { }"}],[5943,{"text":"elsif (not $$prtgroup{'is_used'}) { }"}],[5941,{"text":"if (my $prtgroup = $protocolgroups{$name}) { }"}],[5928,{"text":"if ($type eq 'protocol') { }"}],[5928,{"text":"elsif ($type eq 'protocolgroup') { }"}],[5982,{"text":"unless ($proto eq 'tcp' or $proto eq 'udp')"}],[5998,{"text":"unless ($aref_list)"}],[5996,{"text":"if ($src_range or $$prt{'flags'} or $$dst_range{'name'} ne $$prt{'name'}) { }"}],[6061,{"text":"if ($$interface{'ip'} eq 'short') { }"}],[6061,{"text":"elsif ($$interface{'ip'} eq 'unnumbered') { }"}],[6077,{"text":"if (my($result0) = grep({aref_eq($result, $_);} values %path2result)) { }"}],[6058,{"text":"unless ($result)"}],[6089,{"text":"@$_ ? :"}],[6103,{"text":"unless is_autointerface($src)"}],[6108,{"text":"if (1 == @$tuple_list)"}],[6139,{"text":"if (ref $prt eq 'ARRAY') { }"}],[6139,{"text":"elsif (my $main_prt = $$prt{'main'}) { }"}],[6146,{"text":"$orig_prt ? :"}],[6148,{"text":"if ($src_range) { }"}],[6147,{"text":"if ($orig_prt)"}],[6160,{"text":"$src_net || $dst_net ? :"}],[6161,{"text":"if $_ ne 'src_net'"}],[6161,{"text":"if (keys %$flags and grep {$_ ne 'dst_net' if $_ ne 'src_net';} keys %$flags or $src_range) { }"}],[6185,{"text":"$deny ? :"}],[6189,{"text":"if (@$log) { }"}],[6187,{"text":"if ($log)"}],[6199,{"text":"unless @$prt_list"}],[6202,{"text":"$foreach ? :"}],[6213,{"text":"unless @$src_list"}],[6214,{"text":"if $$service{'disabled'}"}],[6216,{"text":"unless @$dst_list"}],[6219,{"text":"unless @$src_list or @extra_src_dst"}],[6223,{"text":"if (@$src_list and @$dst_list) { }"}],[6223,{"text":"elsif (not @extra_src_dst) { }"}],[6243,{"text":"if $deny"}],[6244,{"text":"if $log"}],[6245,{"text":"if $src_dst_net"}],[6235,{"text":"if ($simple_prt_list)"}],[6250,{"text":"$$flags{'reversed'} ? :"}],[6261,{"text":"if $deny"}],[6262,{"text":"if $log"}],[6263,{"text":"if $src_range"}],[6264,{"text":"if $$flags{'reversed'}"}],[6265,{"text":"if $$flags{'stateless'}"}],[6266,{"text":"if $$flags{'oneway'}"}],[6267,{"text":"if $$flags{'no_check_supernet_rules'}"}],[6269,{"text":"if $$flags{'stateless_icmp'}"}],[6271,{"text":"if $src_dst_net"}],[6299,{"text":"if (!$type eq 'service') { }"}],[6299,{"text":"elsif (my $other = $services{$oname}) { }"}],[6295,{"text":"if (my $overlaps = $$service{'overlaps'})"}],[6320,{"text":"unless (grep {/^$prefix/;} keys %owners)"}],[6319,{"text":"if ($prefix)"}],[6318,{"text":"if (my($prefix) = $visible =~ /^ (\\S*) [*] $/x)"}],[6317,{"text":"if (my $visible = $$service{'visible'})"}],[6345,{"text":"if (my $cluster = $$zone{'zone_cluster'})"}],[6351,{"text":"if $$zone{'owner'}"}],[6358,{"text":"if $$network{'ip'} eq 'tunnel'"}],[6360,{"text":"unless $net_owner"}],[6362,{"text":"if $net_owner ne $owner"}],[6361,{"text":"if ($owner) { }"}],[6368,{"text":"if ($owner)"}],[6380,{"text":"unless my(@implicit_owner_zones) = grep({$zone_got_net_owners{$_};} @$cluster)"}],[6382,{"text":"unless (@implicit_owner_zones == @$cluster and equal(map({$$_{'owner'};} @implicit_owner_zones)))"}],[6400,{"text":"unless my(@areas) = values %{$$zone{'areas'};}"}],[6423,{"text":"if (my $super = $$area{'subset_of'})"}],[6431,{"text":"if ($zone2area{$zone} eq $area)"}],[6445,{"text":"unless ($$router{'managed'} or $$router{'routing_only'})"}],[6456,{"text":"unless my $subnets = $$network{'networks'}"}],[6493,{"text":"unless ($zone_got_net_owners{$upper_node})"}],[6502,{"text":"if ($$upper_owner{'extend'})"}],[6492,{"text":"if ($owner eq $upper_owner) { }"}],[6491,{"text":"if ($upper_owner)"}],[6508,{"text":"if $extend"}],[6509,{"text":"if $extend_only"}],[6486,{"text":"if (not $owner) { }"}],[6513,{"text":"if (my $upper_extend = $$extend_only[0])"}],[6512,{"text":"unless ($owner and $$owner{'extend_only'})"}],[6518,{"text":"if ($owner and $$owner{'extend_only'}) { }"}],[6518,{"text":"elsif ($owner) { }"}],[6527,{"text":"unless my $childs = $tree{$node}"}],[6546,{"text":"if $zone_got_net_owners{$node}"}],[6550,{"text":"$owner_list eq $ext ? :"}],[6555,{"text":"if $$e_owner{'extend_unbounded'}"}],[6556,{"text":"if grep {$e_owner eq $_;} @$other"}],[6548,{"text":"if ($node1) { }"}],[6572,{"text":"if ($combined and @$combined)"}],[6579,{"text":"if ($node_owner ne $owner)"}],[6583,{"text":"if (@invalid)"}],[6575,{"text":"if ($$owner{'show_all'})"}],[6598,{"text":"unless my $attributes = $$area{'router_attributes'}"}],[6599,{"text":"unless my $owner = $$attributes{'owner'}"}],[6603,{"text":"if ($r_owner eq $owner)"}],[6602,{"text":"if (my $r_owner = $$router{'owner'}) { }"}],[6617,{"text":"unless my $owner = $$router{'owner'}"}],[6632,{"text":"unless $$interface{'loopback'}"}],[6633,{"text":"unless my $owner = $$interface{'owner'}"}],[6636,{"text":"if $managed"}],[6647,{"text":"if $$aggregate{'owner'}"}],[6650,{"text":"unless $$up{'is_aggregate'}"}],[6652,{"text":"$up ? :"}],[6665,{"text":"$$Netspoc::Compiler::Pass1::config{'check_service_unknown_owner'} eq 'warn' ? :"}],[6673,{"text":"if ($unknown2services{$up} and $unknown2services{$obj} eq $unknown2services{$up})"}],[6691,{"text":"unless my $rules = $service_rules{$action}"}],[6710,{"text":"$has_user eq 'src' ? :"}],[6706,{"text":"if ($has_user eq 'both') { }"}],[6706,{"text":"elsif ($$rule{'reversed'}) { }"}],[6715,{"text":"if $what eq $has_user"}],[6733,{"text":"if ($owner) { }"}],[6748,{"text":"if keys %$service_owners == 1 and $$service_owners{$sub_owner}"}],[6746,{"text":"if (my $sub_owner = $$service{'sub_owner'})"}],[6753,{"text":"$$info{'is_coupling'} ? :"}],[6766,{"text":"$$Netspoc::Compiler::Pass1::config{'check_service_multi_owner'} eq 'warn' ? :"}],[6766,{"text":"$$Netspoc::Compiler::Pass1::config{'check_service_multi_owner'} ? :"}],[6757,{"text":"if ($$service{'multi_owner'}) { }"}],[6756,{"text":"if ($multi_count > 1 xor $$service{'multi_owner'})"}],[6782,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_service_unknown_owner'})"}],[6778,{"text":"if ($$service{'unknown_owner'}) { }"}],[6775,{"text":"if ($unknown_owners and keys %$unknown_owners xor $$service{'unknown_owner'})"}],[6795,{"text":"unless delete $$owner{'is_used'}"}],[6814,{"text":"if ($$obj{'id'})"}],[6821,{"text":"if ($$obj{'router'}{'managed'} or $$obj{'loopback'})"}],[6809,{"text":"if ($type eq 'Network') { }"}],[6809,{"text":"elsif ($type eq 'Host') { }"}],[6809,{"text":"elsif ($type eq 'Interface') { }"}],[6830,{"text":"if $$network{'ip'} eq 'unnumbered'"}],[6839,{"text":"unless my $rules = $service_rules{$action}"}],[6843,{"text":"if ($src_net)"}],[6846,{"text":"if ($dst_net)"}],[6841,{"text":"if (my $src_dst_net = delete $$rule{'src_dst_net'})"}],[6858,{"text":"unless (is_host($obj))"}],[6872,{"text":"unless ($$network{'has_id_hosts'} or $subnet_warning_seen{$subnet}++)"}],[6870,{"text":"if ($$subnet{'mask'} == $$subnet{'network'}{'mask'}) { }"}],[6870,{"text":"elsif (my $host = $subnet2host{$subnet}) { }"}],[6930,{"text":"if ($old_rule)"}],[6953,{"text":"if ($type eq 'Autointerface')"}],[6965,{"text":"if ($$obj{'router'}{'managed'}) { }"}],[6975,{"text":"if ($$obj{'managed'}) { }"}],[6958,{"text":"if ($type eq 'Network') { }"}],[6958,{"text":"elsif ($type eq 'Subnet') { }"}],[6958,{"text":"elsif ($type eq 'Interface') { }"}],[6958,{"text":"elsif ($type eq 'Router') { }"}],[6958,{"text":"elsif ($type eq 'Zone') { }"}],[6958,{"text":"elsif ($type eq 'Host') { }"}],[7001,{"text":"unless my $managed_hosts = $$object{'managed_hosts'}"}],[7004,{"text":"if (@extra)"}],[7022,{"text":"if ($$zone{'has_unenforceable'})"}],[7033,{"text":"if $src eq $dst"}],[7039,{"text":"if is_autointerface($src) or is_autointerface($dst)"}],[7049,{"text":"$$src{'ip'} > $$dst{'ip'} ? :"}],[7050,{"text":"if ($$a{'ip'} + complement_32bit($$a{'mask'}) + 1 == $$b{'ip'})"}],[7048,{"text":"if ($$src{'network'} eq $$dst{'network'})"}],[7061,{"text":"if zone_eq($$src{'zone'}, $$dst{'zone'}) and $$src{'ip'} == $$dst{'ip'} and $$src{'mask'} == $$dst{'mask'}"}],[7069,{"text":"if zone_eq($$src{'zone'}, get_zone($dst))"}],[7072,{"text":"if zone_eq($$dst{'zone'}, get_zone($src))"}],[7035,{"text":"if (is_router($zone)) { }"}],[7035,{"text":"elsif (is_subnet($src) and is_subnet($dst)) { }"}],[7035,{"text":"elsif ($$src{'is_aggregate'} and $$dst{'is_aggregate'}) { }"}],[7035,{"text":"elsif ($$src{'is_aggregate'} and $$src{'mask'} == 0) { }"}],[7035,{"text":"elsif ($$dst{'is_aggregate'} and $$dst{'mask'} == 0) { }"}],[7035,{"text":"elsif ($$dst{'managed_hosts'}) { }"}],[7089,{"text":"if ($$service{'has_unenforceable'} and not $$service{'seen_unenforceable'} && $$service{'seen_enforceable'})"}],[7095,{"text":"unless $$Netspoc::Compiler::Pass1::config{'check_unenforceable'}"}],[7096,{"text":"if $$service{'disabled'}"}],[7098,{"text":"$$Netspoc::Compiler::Pass1::config{'check_unenforceable'} eq 'warn' ? :"}],[7106,{"text":"if ($$service{'seen_unenforceable'} or $$service{'silent_unenforceable'})"}],[7103,{"text":"unless (delete $$service{'seen_enforceable'})"}],[7113,{"text":"if $$service{'has_unenforceable'}"}],[7115,{"text":"if (my $hash = delete $$service{'seen_unenforceable'})"}],[7131,{"text":"unless $$zone{'has_unenforceable'}"}],[7132,{"text":"if $$zone{'seen_unenforceable'}"}],[7134,{"text":"$agg00 ? :"}],[7141,{"text":"unless @deleted_rules"}],[7149,{"text":"if $$prt1{'flags'}{'overlaps'} and $$prt2{'flags'}{'overlaps'}"}],[7155,{"text":"if ($oservice eq $overlap)"}],[7153,{"text":"if (my $overlaps = $$service{'overlaps'})"}],[7163,{"text":"if ($service eq $overlap)"}],[7161,{"text":"if (my $overlaps = $$oservice{'overlaps'})"}],[7178,{"text":"$action eq 'warn' ? :"}],[7177,{"text":"if (my $action = $$Netspoc::Compiler::Pass1::config{'check_duplicate_rules'})"}],[7199,{"text":"unless $$rule{'rule'}"}],[7200,{"text":"unless $$other{'rule'}"}],[7204,{"text":"if $$prt1{'flags'}{'overlaps'} and $$prt2{'flags'}{'overlaps'}"}],[7211,{"text":"if ($$router{'managed'} or $$router{'routing_only'})"}],[7209,{"text":"if (is_interface($src))"}],[7218,{"text":"unless ($oservice)"}],[7224,{"text":"if ($oservice eq $overlap)"}],[7222,{"text":"if (my $overlaps = $$service{'overlaps'})"}],[7235,{"text":"unless @deleted_rules"}],[7251,{"text":"$action eq 'warn' ? :"}],[7250,{"text":"if (my $action = $$Netspoc::Compiler::Pass1::config{'check_redundant_rules'})"}],[7278,{"text":"if $$service{'disabled'}"}],[7282,{"text":"if $$overlap{'disabled'}"}],[7283,{"text":"unless $$used{$overlap}"}],[7279,{"text":"if (my $overlaps = $$service{'overlaps'})"}],[7297,{"text":"unless my $log = $$router{'log'}"}],[7308,{"text":"if $known_log{$tag}"}],[7330,{"text":"unless my $rules = $service_rules{$action}"}],[7345,{"text":"if (zone_eq($src_zone, $dst_zone))"}],[7357,{"text":"unless $src_p and $src_p eq $private or $dst_p and $dst_p eq $private"}],[7365,{"text":"if $$src{'private'}"}],[7370,{"text":"if $$dst{'private'}"}],[7354,{"text":"if ($private) { }"}],[7424,{"text":"unless $p1 <= 22 and 22 <= $p2"}],[7435,{"text":"if ($pdp_src = $host2pdp_src{$host})"}],[7447,{"text":"unless my $pdp = $$router{'policy_distribution_point'}"}],[7448,{"text":"if $$router{'orig_router'}"}],[7457,{"text":"unless my $sub_rule_tree = $rule_tree{$stateless}{$deny}{$src_range}{$src}"}],[7465,{"text":"if $$interface{'vip'}"}],[7468,{"text":"unless $$sub_rule_tree{$interface}{$prt}"}],[7487,{"text":"if ($found_interfaces{$front})"}],[7494,{"text":"unless (@result)"}],[7501,{"text":"unless @result"}],[7476,{"text":"if (keys %found_interfaces == 1) { }"}],[7513,{"text":"if $seen{$router}"}],[7514,{"text":"unless $$router{'policy_distribution_point'}"}],[7515,{"text":"if $$router{'orig_router'}"}],[7518,{"text":"unless ($$member{'admin_ip'})"}],[7526,{"text":"unless !$$a{'admin_ip'} <=> !$$b{'admin_ip'}"}],[7535,{"text":"unless $$router{'admin_ip'}"}],[7516,{"text":"if (my $vrf_members = $$router{'vrf_members'}) { }"}],[7542,{"text":"if ($count > 4)"}],[7540,{"text":"if (@unreachable)"}],[7568,{"text":"if $$network{'nat_domain'}"}],[7576,{"text":"if $interface eq $in_interface"}],[7577,{"text":"if $$interface{'main_interface'}"}],[7588,{"text":"if aref_eq($nat_tags, $entry_nat_tags)"}],[7591,{"text":"if $$router{'nat_err_seen'}{\"$names1 $names2\"}++"}],[7587,{"text":"if (my $entry_nat_tags = $$router{'active_path'})"}],[7606,{"text":"if $out_interface eq $interface"}],[7607,{"text":"if $$out_interface{'main_interface'}"}],[7612,{"text":"if (aref_eq($out_nat_tags, $nat_tags)) { }"}],[7612,{"text":"elsif (not $$router{'nat_tags'}{$domain}) { }"}],[7640,{"text":"if ($$domain{'active_path'})"}],[7649,{"text":"if $$nat_set{$nat_tag}"}],[7656,{"text":"if ($$nat_set{$nat_tag2})"}],[7653,{"text":"if (my $aref = $$nat_tags2multi{$nat_tag})"}],[7673,{"text":"unless my $nat = $$network{'nat'}"}],[7674,{"text":"unless $$nat{$nat_tag}"}],[7692,{"text":"if $router eq $in_router"}],[7697,{"text":"if grep {$_ eq $nat_tag;} @$in_nat_tags"}],[7702,{"text":"if $out_domain eq $domain"}],[7709,{"text":"if ($$router{'active_path'})"}],[7706,{"text":"if (grep {$_ eq $nat_tag;} @$out_nat_tags)"}],[7723,{"text":"if $out_domain eq $domain"}],[7731,{"text":"if $nat_tag2 eq $nat_tag"}],[7732,{"text":"unless $$href{$nat_tag2}"}],[7753,{"text":"unless ($$next_info{'dynamic'})"}],[7744,{"text":"if ($$nat_info{'hidden'}) { }"}],[7744,{"text":"elsif ($$nat_info{'dynamic'}) { }"}],[7728,{"text":"if (my $aref = $$nat_tags2multi{$nat_tag})"}],[7768,{"text":"if (my $err_path = distribute_nat1($out_domain, $nat_tag, $nat_tags2multi, $router))"}],[7784,{"text":"if (my $err_path = distribute_nat1($domain, $nat_tag, $nat_tags2multi, $in_router))"}],[7802,{"text":"unless my $href = $$network{'nat'}"}],[7805,{"text":"unless ($$nat_network{'hidden'})"}],[7838,{"text":"unless my $href = $$network{'nat'}"}],[7846,{"text":"if $err_shown"}],[7873,{"text":"unless keys_eq($href, $href2)"}],[7871,{"text":"if ($has_non_hidden{$nat_tag})"}],[7881,{"text":"if keys_eq($href, $href2)"}],[7889,{"text":"if $nat_tag2 eq $nat_tag"}],[7893,{"text":"if $all_hidden{$href2}"}],[7897,{"text":"if ($$href2{$nat_tag2})"}],[7905,{"text":"unless ($$href2{$nat_tag2})"}],[7896,{"text":"if ($has_non_hidden{$nat_tag2}) { }"}],[7885,{"text":"if (grep {$has_non_hidden{$_};} %$href) { }"}],[7925,{"text":"if ($common_size eq keys %$href) { }"}],[7925,{"text":"elsif ($common_size eq keys %$href2) { }"}],[7867,{"text":"if (my $aref = $nat_tags2multi{$nat_tag})"}],[7949,{"text":"if @$aref > 1"}],[7951,{"text":"if keys %$href > 1"}],[7957,{"text":"if $$network{'is_aggregate'}"}],[7958,{"text":"if $$network{'nat_domain'}"}],[7984,{"text":"unless my $aref = $nat_tags2multi{$nat_tag}"}],[7986,{"text":"if $$href{$_}"}],[7987,{"text":"unless @tags >= 2"}],[7981,{"text":"if (@$nat_tags >= 2)"}],[8004,{"text":"if ($nat_definitions{$nat_tag}) { }"}],[8032,{"text":"unless (match_ip($obj_ip, $ip, $mask))"}],[8027,{"text":"if ($nat_network = $$network{'nat'}{$nat_tag} and $$nat_network{'dynamic'}) { }"}],[8024,{"text":"if ($$obj{'nat'})"}],[8048,{"text":"unless $nat_definitions{$name} eq 'used'"}],[8055,{"text":"unless my $nat = $$network{'nat'}"}],[8058,{"text":"unless $$nat_info{'dynamic'}"}],[8063,{"text":"if $intf_nat and $$intf_nat{$nat_tag}"}],[8066,{"text":"unless $$router{'need_protect'}"}],[8068,{"text":"unless my $bind = $$bind_intf{'bind_nat'}"}],[8069,{"text":"unless grep {$_ eq $nat_tag;} @$bind"}],[8093,{"text":"if $partitions{$domain}"}],[8099,{"text":"if $out_domain eq $domain"}],[8115,{"text":"unless my $href = $$network{'nat'}"}],[8145,{"text":"unless $$router{'managed'} or $$router{'semi_managed'}"}],[8149,{"text":"if $$router{'managed'} or $$router{'routing_only'}"}],[8165,{"text":"if $$tunnel{'disabled'}"}],[8168,{"text":"if $seen{$real_intf}++"}],[8169,{"text":"unless $$real_intf{'router'}{'managed'}"}],[8171,{"text":"unless keys %$tunnel_set"}],[8177,{"text":"if ref $hardware"}],[8193,{"text":"if $$no_nat_set{$tag}"}],[8191,{"text":"if (my $href = $$network{'nat'} and $no_nat_set)"}],[8209,{"text":"if $$network{'is_aggregate'} or $$subnet{'is_aggregate'}"}],[8224,{"text":"if (grep {$_ eq $nat_tag2;} @$nat_tags and $$object{'ip'} == $$subnet{'ip'} and $$subnet{'mask'} == 4294967295)"}],[8221,{"text":"if (my $nat_tags = $$object{'bind_nat'} and my($nat_tag2) = $$subnet{'name'} =~ /^nat:(.*)\\(/)"}],[8213,{"text":"if (match_ip($ip1, $sub_ip, $sub_mask) or $ip2 and match_ip($ip2, $sub_ip, $sub_mask) || $ip1 <= $sub_ip && $sub_ip <= $ip2)"}],[8237,{"text":"if $ip =~ /^(?:unnumbered|negotiated|tunnel|short|bridged)$/"}],[8241,{"text":"if (my $ip = $$host{'ip'}) { }"}],[8241,{"text":"elsif (my $range = $$host{'range'}) { }"}],[8270,{"text":"if (grep {$_ eq $nat_tag1;} @$nat_tags)"}],[8269,{"text":"if (my $nat_tags = $$all_intf{'bind_nat'})"}],[8309,{"text":"if $seen{$no_nat_set}++"}],[8318,{"text":"if $$network{'ip'} =~ /^(?:unnumbered|tunnel)$/"}],[8323,{"text":"if $$no_nat_set{$tag}"}],[8321,{"text":"if (my $href = $$network{'nat'})"}],[8331,{"text":"unless my $other = $$network{'up'}"}],[8332,{"text":"if get_nat_network($other, $no_nat_set)->{'hidden'}"}],[8330,{"text":"if ($$nat_network{'hidden'})"}],[8346,{"text":"if (my $other_net = $mask_ip_hash{$mask}{$ip}) { }"}],[8365,{"text":"unless @mask_list"}],[8378,{"text":"unless my $bignet = $mask_ip_hash{$m}{$i}"}],[8387,{"text":"unless $$subnet{'networks'}"}],[8389,{"text":"$$subnet{'is_aggregate'} ? :"}],[8400,{"text":"if ($other ne $bignet)"}],[8399,{"text":"if (my $other = $$subnet{'up'}) { }"}],[8381,{"text":"if ($interface eq $first_intf) { }"}],[8428,{"text":"if (my $other = $$subnet{'up'})"}],[8427,{"text":"if ($interface ne $first_intf)"}],[8451,{"text":"unless $network"}],[8452,{"text":"if (my $max_net = $max_up_net{$network})"}],[8456,{"text":"unless ($$network{'is_aggregate'})"}],[8455,{"text":"if (my $max_net = &$set_max_net($$network{'up'}))"}],[8463,{"text":"if ($$network{'is_aggregate'})"}],[8475,{"text":"unless my $max = $max_up_net{$network}"}],[8486,{"text":"if (my $aref = $net2zone_nat_tags{$network})"}],[8502,{"text":"unless keys %$nat == keys %$up_nat"}],[8504,{"text":"unless my $up_nat_info = $$up_nat{$tag}"}],[8507,{"text":"unless $$up_nat_info{'hidden'}"}],[8513,{"text":"if $$up_nat_info{'hidden'}"}],[8515,{"text":"unless match_ip($$up_nat_info{'ip'}, $ip, $mask)"}],[8516,{"text":"unless $$up_nat_info{'mask'} >= $mask"}],[8506,{"text":"if ($$nat_info{'hidden'}) { }"}],[8519,{"text":"unless ($$up{'is_aggregate'})"}],[8524,{"text":"if ($max_routing)"}],[8566,{"text":"if $$network{'ip'} =~ /^(?:unnumbered|tunnel)$/"}],[8568,{"text":"if $$nat_network{'hidden'}"}],[8577,{"text":"if ($$old_net{'zone'} eq $$network{'zone'}) { }"}],[8595,{"text":"unless nat_to_loopback_ok($old_net, $nat_network)"}],[8598,{"text":"unless nat_to_loopback_ok($network, $nat_old_net)"}],[8576,{"text":"if ($$old_net{'is_aggregate'} or $$network{'is_aggregate'}) { }"}],[8576,{"text":"elsif ($$nat_old_net{'dynamic'} and $$nat_network{'dynamic'}) { }"}],[8576,{"text":"elsif ($$old_net{'loopback'} and $$nat_network{'dynamic'}) { }"}],[8576,{"text":"elsif ($$nat_old_net{'dynamic'} and $$network{'loopback'}) { }"}],[8576,{"text":"elsif (($$network{'bridged'} || 0) eq ($$old_net{'bridged'} || 1)) { }"}],[8608,{"text":"if ($error) { }"}],[8573,{"text":"if (my $old_net = $mask_ip_hash{$mask}{$ip}) { }"}],[8643,{"text":"unless @mask_list"}],[8658,{"text":"unless my $bignet = $mask_ip_hash{$m}{$i}"}],[8670,{"text":"if ($$subnet{'has_other_subnet'})"}],[8669,{"text":"if ($$bignet{'zone'} eq $$subnet{'zone'}) { }"}],[8682,{"text":"if ($seen{$nat_bignet}{$nat_subnet})"}],[8713,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_subnets'} eq 'warn') { }"}],[8692,{"text":"unless ($$bignet{'is_aggregate'} or $$subnet{'is_aggregate'} or $$bignet{'has_subnets'} or $$nat_subnet{'subnet_of'} and $$nat_subnet{'subnet_of'} eq $bignet or $$nat_subnet{'is_layer3'})"}],[8687,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_subnets'})"}],[8737,{"text":"unless my $max = $$network{'max_routing_net'}"}],[8738,{"text":"unless ($$max{'has_other_subnet'})"}],[8749,{"text":"unless ($$up{'is_aggregate'})"}],[8745,{"text":"if ($$up{'has_other_subnet'}) { }"}],[8755,{"text":"if $max_secondary"}],[8791,{"text":"unless $$network{'crosslink'}"}],[8792,{"text":"if $$network{'disabled'}"}],[8794,{"text":"if $out_intf eq $in_intf"}],[8796,{"text":"if $cluster{$router2}"}],[8804,{"text":"if $seen{$router}"}],[8837,{"text":"unless $$network{'crosslink'}"}],[8838,{"text":"if $$network{'disabled'}"}],[8847,{"text":"if $$interface{'main_interface'}"}],[8852,{"text":"unless ($$router{'managed'})"}],[8859,{"text":"unless 1 == grep({not $$_{'main_interface'};} @{$$hardware{'interfaces'};})"}],[8866,{"text":"unless my $strength = $crosslink_strength{$managed}"}],[8870,{"text":"if ($$router{'need_protect'})"}],[8874,{"text":"if ($$hardware{'need_out_acl'})"}],[8889,{"text":"if ($weakest == $crosslink_strength{'local'} and $strength2intf{$crosslink_strength{'secondary'}})"}],[8883,{"text":"if (my($weakest) = (sort numerically keys %strength2intf))"}],[8901,{"text":"unless not $out_acl_count or $out_acl_count == @{$$network{'interfaces'};}"}],[8904,{"text":"unless equal(map({$$_{'zone'};} @no_in_acl_intf))"}],[8939,{"text":"unless $$router0{'managed'} =~ /^local/"}],[8940,{"text":"if $$router0{'local_mark'}"}],[8956,{"text":"if ($mask >= $m)"}],[8954,{"text":"unless ($$bignet{'is_aggregate'})"}],[8980,{"text":"unless $k eq $k0"}],[8971,{"text":"if ($filter_only ne $$router{'filter_only'})"}],[8996,{"text":"$zone_cluster ? :"}],[8997,{"text":"if $$zone{'disabled'}"}],[8998,{"text":"if $$zone{'local_mark'}"}],[9013,{"text":"if ($mask > $m)"}],[9009,{"text":"if ($mask >= $m and match_ip($ip, $i, $m))"}],[9026,{"text":"if $out_intf eq $in_intf"}],[9028,{"text":"unless my $managed = $$router2{'managed'}"}],[9029,{"text":"unless $managed =~ /^local/"}],[9030,{"text":"if $$router2{'local_mark'}"}],[9043,{"text":"if $matched{\"$i/$m\"}"}],[9068,{"text":"if (my $subnetworks = $$network{'networks'})"}],[9073,{"text":"if $$nat_network{'hidden'}"}],[9074,{"text":"if $$nat_network{'ip'} eq 'unnumbered'"}],[9078,{"text":"unless $mask > $m and match_ip($ip, $i, $m)"}],[9086,{"text":"if $$obj{'filter_at'}{$mark}"}],[9114,{"text":"unless my $group = $$interface{'reroute_permit'}"}],[9121,{"text":"if (not zone_eq($net_zone, $zone)) { }"}],[9119,{"text":"if (is_network($obj)) { }"}],[9154,{"text":"unless my $managed_hosts = $$network{'managed_hosts'}"}],[9166,{"text":"if $$network{'mask'} > $mask"}],[9167,{"text":"unless my $managed_hosts = $$network{'managed_hosts'}"}],[9152,{"text":"if (@$networks) { }"}],[9204,{"text":"if $$zone{'is_tunnel'}"}],[9205,{"text":"if $$zone{'has_id_hosts'}"}],[9207,{"text":"if ($$zone{'disabled'}) { }"}],[9236,{"text":"unless my $subnets = $$network{'networks'}"}],[9250,{"text":"unless match_ip($i, $ip, $mask)"}],[9254,{"text":"if $$up{'mask'} >= $mask"}],[9253,{"text":"if (my $up = $$obj{'up'})"}],[9261,{"text":"$$obj{'is_aggregate'} ? :"}],[9270,{"text":"unless match_ip($ip, $i, $m)"}],[9299,{"text":"if ($type ne 'network')"}],[9307,{"text":"unless ($network)"}],[9313,{"text":"if ($$network{'disabled'})"}],[9326,{"text":"unless $private1 eq $private2"}],[9334,{"text":"$cluster ? :"}],[9335,{"text":"if (my $other = $$zone2{'ipmask2aggregate'}{$key})"}],[9342,{"text":"if ($cluster)"}],[9355,{"text":"$cluster ? :"}],[9354,{"text":"if (my $v = delete $$aggregate{$attr})"}],[9352,{"text":"if ($mask == 0)"}],[9391,{"text":"if $$zone{'ipmask2aggregate'}{$key}"}],[9405,{"text":"if ($implicit) { }"}],[9431,{"text":"if $$_{'mask'} == $mask"}],[9430,{"text":"$cluster ? :"}],[9435,{"text":"if @networks > 1"}],[9443,{"text":"if $cluster"}],[9451,{"text":"if $prefix != 0"}],[9459,{"text":"if (my $private = $$zone{'private'})"}],[9463,{"text":"if $cluster"}],[9430,{"text":"if (my(@networks) = grep({$$_{'ip'} == $ip if $$_{'mask'} == $mask;} map({@{$$_{'networks'};};} $cluster ? @$cluster : $zone))) { }"}],[9424,{"text":"unless ($$zone{'ipmask2aggregate'}{$key})"}],[9466,{"text":"if ($cluster) { }"}],[9480,{"text":"unless $$_{'ipmask2aggregate'}{$key}"}],[9493,{"text":"if ($$network{'zone'})"}],[9499,{"text":"unless ($$network{'ip'} =~ /^(?:unnumbered|tunnel)$/)"}],[9506,{"text":"if $$network{'ip'} eq 'tunnel'"}],[9507,{"text":"if $$network{'has_id_hosts'}"}],[9513,{"text":"if ($private1 ne $private2)"}],[9511,{"text":"if ($$zone{'private'})"}],[9530,{"text":"if $interface eq $in_interface"}],[9541,{"text":"if $$router{'zone'}"}],[9547,{"text":"if $out_interface eq $interface"}],[9548,{"text":"if $$out_interface{'disabled'}"}],[9534,{"text":"if ($$router{'managed'} or $$router{'semi_managed'}) { }"}],[9566,{"text":"unless $$zone{'is_tunnel'}"}],[9573,{"text":"if $interface eq $in_interface"}],[9574,{"text":"if $$interface{'main_interface'}"}],[9576,{"text":"if $$router{'managed'}"}],[9577,{"text":"if $$router{'active_path'}"}],[9582,{"text":"if $out_interface eq $interface"}],[9584,{"text":"if $$next{'zone_cluster'}"}],[9585,{"text":"if $$out_interface{'main_interface'}"}],[9589,{"text":"unless $private1 eq $private2"}],[9624,{"text":"if $$obj{'areas'}{$area}"}],[9632,{"text":"unless ($$obj{'is_tunnel'})"}],[9631,{"text":"if ($is_zone) { }"}],[9631,{"text":"elsif ($$obj{'managed'} or $$obj{'routing_only'}) { }"}],[9646,{"text":"if $interface eq $in_interface"}],[9649,{"text":"if $$interface{'main_interface'}"}],[9656,{"text":"if ($$is_inclusive{$area} xor not $is_zone)"}],[9668,{"text":"$is_zone ? :"}],[9667,{"text":"if ($$interface{'is_border'})"}],[9652,{"text":"if ($$lookup{$interface}) { }"}],[9652,{"text":"elsif ($auto_border) { }"}],[9677,{"text":"$is_zone ? :"}],[9678,{"text":"if (my $err_path = set_area1($next, $area, $interface))"}],[9693,{"text":"unless my $attributes = $$area{'router_attributes'}"}],[9694,{"text":"if $$attributes{'owner'} and keys %$attributes == 1"}],[9700,{"text":"if $key eq 'owner'"}],[9705,{"text":"if ($r_val eq $val or ref $r_val eq 'ARRAY' and ref $val eq 'ARRAY' and aref_eq($r_val, $val))"}],[9704,{"text":"if (my $r_val = $$router{$key}) { }"}],[9735,{"text":"if defined $$nat1{$attr} xor defined $$nat2{$attr}"}],[9736,{"text":"unless defined $$nat1{$attr}"}],[9737,{"text":"if $$nat1{$attr} ne $$nat2{$attr}"}],[9750,{"text":"if (nat_equal($nat1, $nat2))"}],[9756,{"text":"if ($$nat2{'identity'})"}],[9767,{"text":"unless my $hash = $$area{'nat'}"}],[9777,{"text":"if (my $z_nat = $$zone{'nat'}{$nat_tag})"}],[9815,{"text":"is_network($net_or_zone) ? :"}],[9828,{"text":"unless $mask2 > $mask1"}],[9829,{"text":"unless match_ip($ip2, $ip1, $mask1)"}],[9859,{"text":"unless ($$nat{'dynamic'})"}],[9832,{"text":"if (my $n_nat = $$network{'nat'}{$nat_tag}) { }"}],[9832,{"text":"elsif ($$network{'ip'} eq 'bridged' and not $$nat{'identity'}) { }"}],[9883,{"text":"$$zone{'nat'} ? :"}],[9902,{"text":"unless my $href = $$network{'nat'}"}],[9903,{"text":"if ($$network{'is_aggregate'})"}],[9909,{"text":"unless $$nat_network{'identity'}"}],[9911,{"text":"unless $$nat_network{'is_used'}"}],[9931,{"text":"if $$network{'zone'}"}],[9943,{"text":"if $$network{'loopback'} and @{$$zone{'networks'};} == 1"}],[9946,{"text":"if (@{$$zone{'networks'};})"}],[9951,{"text":"if (my $unmanaged = $$zone{'unmanaged_routers'})"}],[9956,{"text":"if ($$zone{'private'} and $$zone{'private'} eq 'public')"}],[9973,{"text":"if $$zone{'zone_cluster'}"}],[9980,{"text":"if 1 >= @$cluster"}],[9998,{"text":"unless my $border = $$area{$attribute}"}],[10003,{"text":"if ($attribute eq 'inclusive_border')"}],[10025,{"text":"if $in_interface"}],[10028,{"text":"$$is_inclusive{$area} ? :"}],[10029,{"text":"$$err_obj{'areas'}{$area} ? :"}],[10022,{"text":"if (my $err_path = set_area1($obj, $area, $in_interface))"}],[10061,{"text":"unless my $borders = $$area{$attr}"}],[10063,{"text":"if $start"}],[10067,{"text":"$attr eq 'border' ? :"}],[10075,{"text":"if $err"}],[10079,{"text":"unless my $borders = $$area{$attr}"}],[10080,{"text":"unless my(@bad_intf) = grep({$$lookup{$_} ne 'found';} @$borders)"}],[10048,{"text":"if (my $network = $$area{'anchor'}) { }"}],[10092,{"text":"unless @{$$area{'zones'};}"}],[10108,{"text":"unless $$zone{'areas'}"}],[10112,{"text":"unless @{$$a{'zones'};} <=> @{$$b{'zones'};}"}],[10114,{"text":"unless my(@areas) = (sort {$$a{'name'} cmp $$b{'name'} unless @{$$a{'zones'};} <=> @{$$b{'zones'};};} values %{$$zone{'areas'};})"}],[10122,{"text":"if $seen{$small}{$next}"}],[10127,{"text":"unless ($$zone{'areas'}{$next})"}],[10136,{"text":"if (@{$$small{'zones'};} == @{$$next{'zones'};}) { }"}],[10135,{"text":"if ($ok)"}],[10174,{"text":"unless @{$$a{'zones'};} <=> @{$$b{'zones'};}"}],[10187,{"text":"if $next eq $big"}],[10198,{"text":"unless my $big = $$area{'subset_of'}"}],[10202,{"text":"if $$router{'areas'}{$big}"}],[10253,{"text":"unless my $related = $$interface{'redundancy_interfaces'}"}],[10257,{"text":"unless $$router{'managed'} or $$router{'semi_managed'}"}],[10259,{"text":"if $seen{$related}"}],[10265,{"text":"unless ($$v{'router'}{'loop'})"}],[10271,{"text":"if $err"}],[10277,{"text":"unless equal(map({$$_{'loop'};} @$related))"}],[10298,{"text":"unless @$elements"}],[10305,{"text":"if $$interface{'disabled'}"}],[10313,{"text":"unless ($loop)"}],[10325,{"text":"unless ($cluster eq $prev_cluster)"}],[10324,{"text":"if ($prev_cluster) { }"}],[10343,{"text":"if (1 == @$elements)"}],[10341,{"text":"if ($deleted)"}],[10349,{"text":"if ($invalid)"}],[10356,{"text":"unless $$_{'router'}{'managed'}"}],[10356,{"text":"if grep {$$_{'router'}{'routing_only'} unless $$_{'router'}{'managed'};} @$elements"}],[10361,{"text":"unless $$_{'zone_cluster'}"}],[10361,{"text":"unless equal(map({$_ unless $$_{'zone_cluster'};} map({$$_{'zone'};} @$elements)))"}],[10378,{"text":"if $zone2 eq $zone"}],[10380,{"text":"if $cluster2 eq $zone_cluster"}],[10379,{"text":"if (my $cluster2 = $$zone2{'zone_cluster'})"}],[10383,{"text":"if ($loop eq $loop2)"}],[10382,{"text":"if (my $loop2 = $$zone2{'loop'})"}],[10428,{"text":"if $$obj{'reachable_part'}{$mark}"}],[10429,{"text":"if $$obj{'active_path'}"}],[10443,{"text":"if $interface eq $in_interface"}],[10444,{"text":"if $$interface{'main_interface'}"}],[10448,{"text":"$is_zone ? :"}],[10454,{"text":"unless $$interface{'loop'}"}],[10455,{"text":"$is_zone ? :"}],[10447,{"text":"if (my $reached = $$lookup{$interface}) { }"}],[10496,{"text":"if $mark eq 'none'"}],[10486,{"text":"if ($$reached{'zone'} eq $$reached{'router'} and $$reached{'zone'} ne 'none') { }"}],[10510,{"text":"unless aref_delete($$interface{'path_restrict'}, $restrict)"}],[10515,{"text":"unless (@{$$interface{'path_restrict'};})"}],[10506,{"text":"if (not $has_interior) { }"}],[10552,{"text":"if $$reached{$direction}"}],[10556,{"text":"unless ($$obj{'loop'})"}],[10571,{"text":"if ($mark > $start_mark + 1)"}],[10604,{"text":"if ($$obj{'active_path'})"}],[10624,{"text":"if $interface eq $to_zone1"}],[10625,{"text":"if $$interface{'loop'}"}],[10628,{"text":"is_router($obj) ? :"}],[10633,{"text":"if $max > $max_distance"}],[10655,{"text":"if ($$loop{'distance'} < $$loop2{'distance'}) { }"}],[10652,{"text":"if ($loop ne $loop2)"}],[10641,{"text":"if ($obj eq $loop_obj) { }"}],[10641,{"text":"elsif (my $loop2 = $$obj{'loop'}) { }"}],[10636,{"text":"if ($loop) { }"}],[10678,{"text":"if ($$obj{'loop'} and $$obj{'loop'}{'exit'} ne $obj) { }"}],[10708,{"text":"if ($$exit{'loop'} eq $loop) { }"}],[10699,{"text":"if (my $marker = $$loop{'cluster_exit'}) { }"}],[10729,{"text":"unless @zones"}],[10730,{"text":"unless $$_{'managed'}"}],[10735,{"text":"if $$obj{'to_zone1'} or $$obj{'loop'}"}],[10756,{"text":"unless $$_{'managed'}"}],[10758,{"text":"unless my $loop = $$obj{'loop'}"}],[10778,{"text":"if (my $loop = $$interface{'loop'})"}],[10836,{"text":"if ($$main{'path_restrict'} or $$main{'reachable_at'}) { }"}],[10827,{"text":"if ($$router{'managed'} or $$router{'semi_managed'}) { }"}],[10850,{"text":"if ($$obj{'managed'} or $$obj{'semi_managed'}) { }"}],[10871,{"text":"if (is_network($object)) { }"}],[10871,{"text":"elsif ($$object{'managed'} or $$object{'semi_managed'}) { }"}],[10819,{"text":"if ($type eq 'Network') { }"}],[10819,{"text":"elsif ($type eq 'Subnet') { }"}],[10819,{"text":"elsif ($type eq 'Interface') { }"}],[10819,{"text":"elsif ($type eq 'Router') { }"}],[10819,{"text":"elsif ($type eq 'Zone') { }"}],[10819,{"text":"elsif ($type eq 'Host') { }"}],[10819,{"text":"elsif ($type eq 'Autointerface') { }"}],[10926,{"text":"if ($$restrict{'active_path'})"}],[10924,{"text":"if ($pathrestriction)"}],[10948,{"text":"unless ($$has_mark{$mark})"}],[10966,{"text":"if (intersect($reachable, $reachable2))"}],[10963,{"text":"if (my $reachable2 = $$reachable_at2{$$end_intf{'router'}})"}],[10962,{"text":"if (my $reachable_at2 = $$end_intf{'reachable_at'})"}],[10945,{"text":"if ($$other{'loop'}) { }"}],[10941,{"text":"if (my $reachable = $$reachable_at{$obj})"}],[10939,{"text":"if ($reachable_at and $end_intf and $end_intf ne $in_intf)"}],[10978,{"text":"if ($$obj{'active_path'})"}],[10985,{"text":"if ($obj eq $end)"}],[10998,{"text":"$end_intf ? :"}],[11001,{"text":"unless ($$has_mark{$mark})"}],[10997,{"text":"if (my $reachable = $$reachable_at{$obj})"}],[10996,{"text":"if ($reachable_at)"}],[11016,{"text":"if ($pathrestriction)"}],[11024,{"text":"is_router($obj) ? :"}],[11031,{"text":"unless my $allowed = $$navi{$$obj{'loop'}}"}],[11036,{"text":"if $interface eq $in_intf"}],[11037,{"text":"if $$interface{'main_interface'}"}],[11038,{"text":"unless my $loop = $$interface{'loop'}"}],[11039,{"text":"unless $$allowed{$loop}"}],[11045,{"text":"if (cluster_path_mark1($next, $interface, $end, $end_intf, $path_tuples, $loop_leave, $navi))"}],[11063,{"text":"if ($pathrestriction)"}],[11092,{"text":"if ($navi = $$from{'navi'}{$to} and scalar keys %$navi)"}],[11107,{"text":"if $from eq $to"}],[11106,{"text":"if ($from_loop eq $to_loop) { }"}],[11106,{"text":"elsif ($$from_loop{'distance'} >= $$to_loop{'distance'}) { }"}],[11167,{"text":"if $$from_in{'path'}{$to_store}"}],[11179,{"text":"if (is_interface($from_store) and $$from_store{'router'} eq $from || $$from_store{'zone'} eq $from) { }"}],[11179,{"text":"elsif ($from_in and $$from_in{'path_restrict'} || $$from_in{'reachable_at'}) { }"}],[11194,{"text":"if (is_interface($to_store) and $$to_store{'router'} eq $to || $$to_store{'zone'} eq $to) { }"}],[11194,{"text":"elsif ($to_out and $$to_out{'path_restrict'} || $$to_out{'reachable_at'}) { }"}],[11213,{"text":"if ($from_in and not $$from_in{'loop'} and my $restrictions = $$from_in{'path_restrict'} and not $start_intf)"}],[11232,{"text":"if ($$restrict{'active_path'})"}],[11224,{"text":"if ($to_out and not $$to_out{'loop'} and my $restrictions = $$to_out{'path_restrict'} and not $end_intf)"}],[11244,{"text":"$end_intf ? :"}],[11248,{"text":"if ($start_intf and $$start_intf{'zone'} eq $end_node)"}],[11255,{"text":"unless my $reachable_at = $$intf{'reachable_at'}"}],[11262,{"text":"$start_intf ? :"}],[11263,{"text":"unless my $reachable = $$reachable_at{$start_node}"}],[11271,{"text":"if ($start_intf) { }"}],[11268,{"text":"unless ($$has_mark{$mark})"}],[11284,{"text":"if ($success and $start_intf)"}],[11294,{"text":"unless $intf"}],[11297,{"text":"if $interface eq $intf"}],[11295,{"text":"if (my $interfaces = $$intf{'redundancy_interfaces'})"}],[11315,{"text":"unless $intf"}],[11319,{"text":"unless $router eq $from or $router eq $to"}],[11322,{"text":"unless my $removed = delete $$intf{'path_restrict'}"}],[11327,{"text":"if $interface eq $intf"}],[11337,{"text":"if (intersect($orig, $removed)) { }"}],[11332,{"text":"if ($orig) { }"}],[11356,{"text":"unless $success"}],[11369,{"text":"if ($$start_store{'loop_enter'}{$end_store})"}],[11380,{"text":"unless my $navi = cluster_navigation($from, $to)"}],[11385,{"text":"is_router($from) ? :"}],[11386,{"text":"unless my $allowed = $$navi{$$from{'loop'}}"}],[11392,{"text":"if $$interface{'main_interface'}"}],[11394,{"text":"unless $loop"}],[11397,{"text":"unless ($$allowed{$loop})"}],[11401,{"text":"if $$interface{'loopback'} and $get_next eq 'zone'"}],[11409,{"text":"if (cluster_path_mark1($next, $interface, $to, $end_intf, $path_tuples, $loop_leave, $navi))"}],[11424,{"text":"unless $success"}],[11429,{"text":"unless my $in_intf = $key2obj{$in_intf_ref}"}],[11433,{"text":"unless my $out_intf = $key2obj{$out_intf_ref}"}],[11459,{"text":"unless $intf"}],[11460,{"text":"unless $$intf{'saved_path_restrict'}"}],[11463,{"text":"if (my $orig = delete $$interface{'saved_path_restrict'}) { }"}],[11474,{"text":"if (my $orig = delete $$start_intf{'saved_reachable_at_zone'})"}],[11473,{"text":"if ($start_intf)"}],[11482,{"text":"unless $intf"}],[11485,{"text":"if $interface eq $intf"}],[11483,{"text":"if (my $interfaces = $$intf{'redundancy_interfaces'})"}],[11493,{"text":"if ($intf and not $$intf{'loop'} and my $restrictions = $$intf{'path_restrict'})"}],[11505,{"text":"if ($success)"}],[11540,{"text":"$$from_store{'loop'} ? :"}],[11548,{"text":"if ($from eq $to)"}],[11556,{"text":"if ($from_loop and $to_loop and $$from_loop{'cluster_exit'} eq $$to_loop{'cluster_exit'})"}],[11568,{"text":"if $$from_in{'path'}{$to_store}"}],[11577,{"text":"unless $from_loop"}],[11584,{"text":"unless $from_out"}],[11587,{"text":"unless cluster_path_mark($from, $exit, $from_in, $from_out, $from_store, $to_store)"}],[11574,{"text":"unless ($from_out)"}],[11611,{"text":"unless $to_loop"}],[11618,{"text":"unless $to_in"}],[11621,{"text":"unless cluster_path_mark($entry, $to, $to_in, $to_out, $from_store, $to_store)"}],[11608,{"text":"unless ($to_in)"}],[11565,{"text":"if ($$from{'distance'} >= $$to{'distance'}) { }"}],[11662,{"text":"if (is_router($loop_entry) or is_interface($loop_entry) and $$loop_entry{'router'} eq $$loop_entry{'loop_enter'}{$loop_exit}[0]{'router'} xor $call_at_zone)"}],[11691,{"text":"if $at_router xor $call_at_zone"}],[11700,{"text":"if ($exit_at_router xor $call_at_zone)"}],[11731,{"text":"$$from_store{'loop'} ? :"}],[11745,{"text":"unless $from and $to"}],[11746,{"text":"if $from eq $to"}],[11750,{"text":"unless (path_mark($from, $to, $from_store, $to_store))"}],[11749,{"text":"unless (exists $$path_store{'path'}{$to_store})"}],[11786,{"text":"unless ($loop_out)"}],[11775,{"text":"if ($$from{'loop'} and $$from_store{'loop_exit'} and my $loop_exit = $$from_store{'loop_exit'}{$to_store}) { }"}],[11816,{"text":"unless ($loop_out)"}],[11830,{"text":"if ($call_it)"}],[11835,{"text":"unless ($out)"}],[11804,{"text":"if ($in and $$in{'loop_entry'} and my $loop_entry = $$in{'loop_entry'}{$to_store}) { }"}],[11871,{"text":"if $interface eq $in_intf"}],[11872,{"text":"if $$interface{'zone'}"}],[11873,{"text":"if $$interface{'orig_main'}"}],[11875,{"text":"if $active_path{$router}"}],[11882,{"text":"if $out_intf eq $interface"}],[11883,{"text":"if $$out_intf{'orig_main'}"}],[11908,{"text":"is_autointerface($src) ? :"}],[11910,{"text":"is_autointerface($dst) ? :"}],[11917,{"text":"if $from eq $to"}],[11919,{"text":"unless (path_mark($from, $to, $from_store, $to_store))"}],[11918,{"text":"unless ($$from_store{'path'}{$to_store})"}],[11932,{"text":"if ($$from_store{'loop_exit'} and my $exit = $$from_store{'loop_exit'}{$to_store}) { }"}],[11948,{"text":"unless ($border2obj2auto{$border})"}],[11945,{"text":"unless (is_router($from))"}],[11965,{"text":"if (my $orig = $$interface{'orig_main'}) { }"}],[11965,{"text":"elsif (my $layer3_intf = $$interface{'layer3_interface'}) { }"}],[11976,{"text":"if ($bridged_count > 1)"}],[11981,{"text":"$managed ? :"}],[11994,{"text":"unless my $isakmp = $isakmp{$name}"}],[11993,{"text":"if ($type eq 'isakmp') { }"}],[12014,{"text":"unless my $ipsec = $ipsec{$name2}"}],[12013,{"text":"if ($type eq 'ipsec') { }"}],[12040,{"text":"if $use_ah"}],[12041,{"text":"if $use_esp"}],[12042,{"text":"if (@prt)"}],[12038,{"text":"if (not $nat_traversal or $nat_traversal ne 'on')"}],[12052,{"text":"if ($nat_traversal)"}],[12079,{"text":"unless $real_hubs and @$real_hubs"}],[12082,{"text":"unless $real_spokes and @$real_spokes"}],[12091,{"text":"if $crypto_name eq $name"}],[12099,{"text":"unless $$router{'managed'}"}],[12103,{"text":"if $$router{'model'}{'do_auth'} and not $need_id"}],[12109,{"text":"if (my $orig_router = $$router{'orig_router'})"}],[12112,{"text":"unless $hub_seen{$router}++"}],[12133,{"text":"if (my $orig_router = $$router{'orig_router'})"}],[12152,{"text":"if $$real_hub{'bind_nat'}"}],[12162,{"text":"if (my $aref = $$router{'orig_interfaces'})"}],[12168,{"text":"unless ($$model{'do_auth'} or $$model{'can_dyn_crypto'})"}],[12166,{"text":"if ($$real_spoke{'ip'} =~ /^(?:negotiated|short|unnumbered)$/)"}],[12177,{"text":"unless $s_p and $s_p eq $private or $h_p and $h_p eq $private"}],[12186,{"text":"if $$real_spoke{'private'}"}],[12190,{"text":"if $$real_hub{'private'}"}],[12174,{"text":"if ($private) { }"}],[12202,{"text":"if ($$network{'has_id_hosts'}) { }"}],[12202,{"text":"elsif ($$interface{'ip'} ne 'tunnel') { }"}],[12209,{"text":"if ($has_id_hosts and @other)"}],[12216,{"text":"if ($$router{'managed'} and $$crypto{'detailed_crypto_acl'})"}],[12225,{"text":"if (@hubs > 1)"}],[12251,{"text":"unless 1 == @{$$zone{'interfaces'};}"}],[12259,{"text":"unless 1 == @{$$network{'interfaces'};}"}],[12249,{"text":"if ($managed) { }"}],[12293,{"text":"unless my $attributes = $$obj{'radius_attributes'}"}],[12296,{"text":"unless $spec"}],[12299,{"text":"unless $value =~ /^(?:tunnelall|tunnelspecified)$/"}],[12308,{"text":"unless $$obj{'range'}"}],[12313,{"text":"if grep {$$_{'ip'};} @{$$obj{'hosts'};}"}],[12307,{"text":"if (is_host($obj)) { }"}],[12307,{"text":"elsif (is_network($obj)) { }"}],[12297,{"text":"if ($key eq 'split-tunnel-policy') { }"}],[12297,{"text":"elsif ($key eq 'trust-point') { }"}],[12326,{"text":"if $id =~ /@/"}],[12332,{"text":"if &$has_attr($host)"}],[12333,{"text":"if &$has_attr($$host{'network'})"}],[12336,{"text":"if &$has_attr($$peer{'router'})"}],[12339,{"text":"if ($missing)"}],[12350,{"text":"unless $$isakmp{'trust_point'}"}],[12349,{"text":"if ($$isakmp{'authentication'} eq 'rsasig')"}],[12372,{"text":"if $$tunnel{'disabled'}"}],[12374,{"text":"if $$tunnel_intf{'is_hub'}"}],[12384,{"text":"if $interface eq $tunnel_intf"}],[12386,{"text":"if ($managed and $$router{'model'}{'crypto'} eq 'EZVPN')"}],[12385,{"text":"if ($$interface{'ip'} eq 'tunnel')"}],[12394,{"text":"if (my $intf2 = $id2interface{$id})"}],[12393,{"text":"if (my $id = $$interface{'id'})"}],[12392,{"text":"if ($$interface{'spoke'})"}],[12406,{"text":"if $managed"}],[12413,{"text":"if @all_networks > 1"}],[12426,{"text":"if (my $other = $$peer{'id_rules'}{$id})"}],[12404,{"text":"if ($$network{'has_id_hosts'}) { }"}],[12456,{"text":"if $has_id_hosts and $has_other_network"}],[12463,{"text":"unless $has_id_hosts or $has_other_network"}],[12474,{"text":"unless $need_id"}],[12483,{"text":"unless $do_auth"}],[12473,{"text":"if ($$tunnel_intf{'id'}) { }"}],[12473,{"text":"elsif ($encrypted[0]{'has_id_hosts'}) { }"}],[12473,{"text":"elsif ($do_auth) { }"}],[12473,{"text":"elsif ($need_id) { }"}],[12513,{"text":"if (is_host($obj))"}],[12507,{"text":"if (grep {$$_{'router'}{'model'}{'crypto'} eq 'ASA_VPN';} @$peers)"}],[12519,{"text":"if ($managed and $$router{'model'}{'crypto'} eq 'ASA')"}],[12541,{"text":"if $$intf1{'ip'} eq 'negotiated'"}],[12527,{"text":"if ($real_spoke and not $$real_spoke{'ip'} =~ /^(?:short|unnumbered)$/)"}],[12558,{"text":"unless my $crypto = $$model{'crypto'}"}],[12559,{"text":"unless $crypto eq 'ASA_VPN'"}],[12562,{"text":"unless @id_rules_interfaces >= 2"}],[12568,{"text":"if (my $src2 = $id2src{$id}) { }"}],[12589,{"text":"unless my $trust_point = delete $$router{'radius_attributes'}{'trust-point'}"}],[12597,{"text":"unless my $crypto = $$interface{'crypto'}"}],[12585,{"text":"if ($crypto_type eq 'ASA_VPN') { }"}],[12585,{"text":"elsif ($crypto_type eq 'ASA') { }"}],[12669,{"text":"unless $in_intf"}],[12673,{"text":"unless $$router{'managed'}"}],[12677,{"text":"if $$out_intf{'zone'} ne $zone"}],[12683,{"text":"if $$dst{'hidden'}"}],[12680,{"text":"unless ($$dst{'is_aggregate'})"}],[12700,{"text":"if $$net1{'mask'} < $$net2{'mask'}"}],[12703,{"text":"unless $net1 = $$net1{'up'}"}],[12705,{"text":"if $net1 eq $net2"}],[12706,{"text":"unless $net2 = $$net2{'up'}"}],[12726,{"text":"if $$nat_other{'hidden'}"}],[12729,{"text":"if (my $aggregate = $$zone{'ipmask2aggregate'}{$key})"}],[12732,{"text":"if (my $result = $$zone{'ipmask2net'}{$key})"}],[12741,{"text":"if $$nat_network{'hidden'}"}],[12743,{"text":"if $i =~ /^(?:unnumbered|tunnel)$/"}],[12750,{"text":"unless ($result)"}],[12756,{"text":"if (my $super = find_supernet($result, $network)) { }"}],[12745,{"text":"if ($m >= $mask and match_ip($i, $ip, $mask) or $m < $mask and match_ip($ip, $i, $m))"}],[12781,{"text":"unless ($net_or_count)"}],[12787,{"text":"unless (ref $net_or_count)"}],[12823,{"text":"$where eq 'src' ? :"}],[12833,{"text":"if $$dst{'hidden'}"}],[12830,{"text":"unless ($$dst{'is_aggregate'})"}],[12837,{"text":"if $supernet_rule_tree{$stateless}{$src}{$src_range}{$prt}{$interface}{$ipmask}{$zone}"}],[12827,{"text":"if ($where eq 'dst')"}],[12842,{"text":"unless $networks"}],[12853,{"text":"$where eq 'src' ? :"}],[12854,{"text":"if ($rule_tree{$stateless}{$deny}{$src_range}{$src}{$dst}{$prt})"}],[12844,{"text":"if (not ref $networks) { }"}],[12864,{"text":"if $missing_supernet{$interface}{$service}"}],[12868,{"text":"$reversed ? :"}],[12869,{"text":"$$Netspoc::Compiler::Pass1::config{'check_supernet_rules'} eq 'warn' ? :"}],[12905,{"text":"unless $out_intf"}],[12909,{"text":"unless my $managed = $$router{'managed'}"}],[12915,{"text":"if ($$dst{'has_other_subnet'} and $out_zone eq $dst_zone)"}],[12929,{"text":"unless my $src_filter_at = $$src_net{'filter_at'}"}],[12930,{"text":"unless my $dst_filter_at = $$dst_net{'filter_at'}"}],[12931,{"text":"unless $$src_filter_at{$mark} and $$dst_filter_at{$mark}"}],[12926,{"text":"if (my $mark = $$router{'local_mark'})"}],[12942,{"text":"if ($no_acl_zone eq $dst_zone) { }"}],[12942,{"text":"elsif ($in_zone eq $no_acl_zone) { }"}],[12942,{"text":"elsif ($$no_acl_intf{'main_interface'}) { }"}],[12938,{"text":"if ($no_acl_intf = $$router{'no_in_acl'})"}],[12978,{"text":"$managed =~ /^(?:secondary|local.*)$/ ? :"}],[12976,{"text":"unless ($m2)"}],[12992,{"text":"if ($no_acl_zone eq $dst_zone) { }"}],[12992,{"text":"elsif ($no_acl_zone eq $src_zone) { }"}],[12992,{"text":"elsif ($$no_acl_intf{'main_interface'}) { }"}],[13015,{"text":"if $intf eq $in_intf"}],[13016,{"text":"if $$intf{'loopback'} and not $$intf{'vip'}"}],[13021,{"text":"if $zone eq $src_zone"}],[13022,{"text":"if $zone eq $dst_zone"}],[13023,{"text":"if $$intf{'main_interface'}"}],[12988,{"text":"if (my $no_acl_intf = $$router{'no_in_acl'}) { }"}],[12983,{"text":"if ($proto eq 'tcp' || $proto eq 'udp' || $proto eq 'ip' and $m1 == $m2)"}],[12960,{"text":"if ($$router{'model'}{'stateless'} and not $$rule{'oneway'})"}],[13032,{"text":"if $src_zone eq $in_zone"}],[13059,{"text":"unless $in_intf"}],[13063,{"text":"unless $$router{'managed'}"}],[13073,{"text":"unless my $src_filter_at = $$src_net{'filter_at'}"}],[13074,{"text":"unless my $dst_filter_at = $$dst_net{'filter_at'}"}],[13075,{"text":"unless $$src_filter_at{$mark} and $$dst_filter_at{$mark}"}],[13070,{"text":"if (my $mark = $$router{'local_mark'})"}],[13086,{"text":"if ($no_acl_zone eq $src_zone) { }"}],[13086,{"text":"elsif ($no_acl_zone eq $dst_zone) { }"}],[13086,{"text":"elsif ($$no_acl_intf{'main_interface'}) { }"}],[13082,{"text":"if (my $no_acl_intf = $$router{'no_in_acl'})"}],[13107,{"text":"$$router{'model'}{'has_io_acl'} ? :"}],[13115,{"text":"if $intf eq $in_intf"}],[13116,{"text":"if $$intf{'loopback'} and not $$intf{'vip'}"}],[13120,{"text":"if $zone eq $src_zone"}],[13121,{"text":"if $zone eq $dst_zone"}],[13122,{"text":"if $$intf{'main_interface'}"}],[13132,{"text":"unless keys %supernet_rule_tree"}],[13172,{"text":"if ($prt1 eq $prt2)"}],[13175,{"text":"if (defined(my $prt = $smaller_prt{$prt1}{$prt2}))"}],[13181,{"text":"if ($prt eq $prt2)"}],[13189,{"text":"if ($prt eq $prt1)"}],[13229,{"text":"if $$rule{'deleted'}"}],[13230,{"text":"if $$rule{'deny'}"}],[13231,{"text":"if $$rule{'no_check_supernet_rules'}"}],[13233,{"text":"unless $$dst{'has_other_subnet'}"}],[13236,{"text":"if $$dst{'mask'} != 0"}],[13240,{"text":"if @{$$dst{'zone'}{'interfaces'};} <= 1"}],[13251,{"text":"unless my $hash = $rule_tree{$stateless2}"}],[13252,{"text":"unless $hash = $$hash{$deny}"}],[13255,{"text":"unless my $smaller_src_range = find_smaller_prt($src_range1, $src_range2)"}],[13259,{"text":"unless $hash = $$hash{$src2}"}],[13263,{"text":"if $src1 eq $dst2_str"}],[13269,{"text":"if ($obj2zone{$src1} || get_zone($src1)) eq ($obj2zone{$dst2} || get_zone($dst2))"}],[13274,{"text":"if $$rule2{'no_check_supernet_rules'}"}],[13284,{"text":"unless $smaller_prt"}],[13313,{"text":"if (my $other_rule = $$hash{$prt})"}],[13325,{"text":"unless $prt = $$prt{'up'}"}],[13309,{"text":"if (my $hash = $$hash{$dst})"}],[13329,{"text":"unless $dst = $$dst{'up'}"}],[13303,{"text":"if (my $hash = $$hash{$src})"}],[13333,{"text":"unless $src = $$src{'up'}"}],[13299,{"text":"if (my $hash = $$hash{$src_range})"}],[13336,{"text":"unless $src_range = $$src_range{'up'}"}],[13296,{"text":"if (my $hash = $$hash{$deny})"}],[13340,{"text":"if $deny"}],[13293,{"text":"if (my $hash = $rule_tree{$stateless})"}],[13344,{"text":"unless $stateless"}],[13354,{"text":"if ($smaller_src_range ne $prt_ip)"}],[13366,{"text":"if $new"}],[13395,{"text":"$$Netspoc::Compiler::Pass1::config{'check_transient_supernet_rules'} eq 'warn' ? :"}],[13376,{"text":"if ($missing_count)"}],[13459,{"text":"unless $$router{'model'}{'stateless'} or $$router{'managed'} =~ /^(?:secondary|local.*)$/"}],[13457,{"text":"if ($$router{'managed'})"}],[13462,{"text":"if $$router{'active_path'}"}],[13465,{"text":"if $out_interface eq $in_interface"}],[13467,{"text":"if $$next_zone{'stateful_mark'}"}],[13479,{"text":"if not $$_{'deleted'}"}],[13476,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_supernet_rules'} or $$Netspoc::Compiler::Pass1::config{'check_transient_supernet_rules'})"}],[13489,{"text":"unless ($$zone{'stateful_mark'})"}],[13494,{"text":"if $$rule{'deleted'}"}],[13495,{"text":"if $$rule{'no_check_supernet_rules'}"}],[13496,{"text":"if ($$rule{'src'}{'has_other_subnet'})"}],[13499,{"text":"if ($$rule{'dst'}{'has_other_subnet'})"}],[13484,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_supernet_rules'})"}],[13506,{"text":"if ($$Netspoc::Compiler::Pass1::config{'check_transient_supernet_rules'})"}],[13531,{"text":"if $$rule{'oneway'}"}],[13538,{"text":"unless $proto eq 'tcp' or $proto eq 'udp' or $proto eq 'ip'"}],[13545,{"text":"if $proto eq 'tcp' and $deny"}],[13548,{"text":"unless @new_prt_group"}],[13566,{"text":"unless $out_intf"}],[13571,{"text":"unless $$router{'managed'}"}],[13585,{"text":"if $use_nonlocal_exit"}],[13574,{"text":"if ($$model{'stateless'} or not $in_intf and $$model{'stateless_self'})"}],[13554,{"text":"unless (defined $has_stateless_router)"}],[13593,{"text":"unless $has_stateless_router"}],[13609,{"text":"if $tcp_seen"}],[13617,{"text":"if ($$new_src_range{'range'} eq $aref_tcp_any)"}],[13621,{"text":"unless ($new_prt)"}],[13606,{"text":"if ($proto eq 'tcp') { }"}],[13606,{"text":"elsif ($proto eq 'udp') { }"}],[13606,{"text":"elsif ($proto eq 'ip') { }"}],[13649,{"text":"if $src_range ne $prt_ip"}],[13650,{"text":"if $deny"}],[13699,{"text":"if $$in_interface{'main_interface'}"}],[13702,{"text":"unless $managed =~ /^(?:secondary|local.*)$/"}],[13701,{"text":"if (my $managed = $$router{'managed'})"}],[13704,{"text":"if $$router{'secondary_mark'}"}],[13707,{"text":"if $out_interface eq $in_interface"}],[13708,{"text":"if $$out_interface{'main_interface'}"}],[13710,{"text":"if $$next_zone{'secondary_mark'}"}],[13727,{"text":"if $$in_interface{'main_interface'}"}],[13730,{"text":"if $managed eq 'primary'"}],[13729,{"text":"if (my $managed = $$router{'managed'})"}],[13732,{"text":"if $$router{'primary_mark'}"}],[13735,{"text":"if $out_interface eq $in_interface"}],[13736,{"text":"if $$out_interface{'main_interface'}"}],[13738,{"text":"if $$next_zone{'primary_mark'}"}],[13755,{"text":"if $$in_interface{'main_interface'}"}],[13758,{"text":"if $managed ne 'local_secondary'"}],[13757,{"text":"if (my $managed = $$router{'managed'})"}],[13760,{"text":"if $$router{'local_secondary_mark'}"}],[13763,{"text":"if $out_interface eq $in_interface"}],[13764,{"text":"if $$out_interface{'main_interface'}"}],[13766,{"text":"if $$next_zone{'local_secondary_mark'}"}],[13776,{"text":"if ($type eq 'Zone') { }"}],[13776,{"text":"elsif ($type eq 'Interface') { }"}],[13789,{"text":"if (1 == @$src_zones and 1 == @$dst_zones)"}],[13799,{"text":"unless $$_{$mark}"}],[13800,{"text":"unless $$_{$mark}"}],[13811,{"text":"unless ($$zone{'secondary_mark'})"}],[13814,{"text":"unless ($$zone{'primary_mark'})"}],[13817,{"text":"unless ($$zone{'local_secondary_mark'})"}],[13834,{"text":"if (have_different_marks($src_zones, $dst_zones, 'secondary_mark')) { }"}],[13834,{"text":"elsif (have_set_and_equal_marks($src_zones, $dst_zones, 'local_mark') and have_different_marks($src_zones, $dst_zones, 'local_secondary_mark')) { }"}],[13843,{"text":"if (have_different_marks($src_zones, $dst_zones, 'primary_mark'))"}],[13869,{"text":"unless my $href = $$network{'nat'}"}],[13872,{"text":"unless $$nat_network{'dynamic'}"}],[13873,{"text":"if $$nat_network{'hidden'}"}],[13875,{"text":"if $$obj{'nat'} and $$obj{'nat'}{$nat_tag}"}],[13884,{"text":"unless my $dynamic_nets = $zone2dynamic{$zone}"}],[13888,{"text":"if $managed eq 'primary' or $managed eq 'full'"}],[13908,{"text":"unless my $href = $$network{'nat'}"}],[13911,{"text":"if $$nat_network{'dynamic'}"}],[13919,{"text":"unless my $nat_domain = $$network{'nat_domain'}"}],[13930,{"text":"if $$result{$key}"}],[13940,{"text":"$in_intf ? :"}],[13941,{"text":"$out_intf ? :"}],[13945,{"text":"unless $$no_nat_set1{$nat_tag}"}],[13943,{"text":"if ($no_nat_set1)"}],[13949,{"text":"unless $$no_nat_set2{$nat_tag}"}],[13947,{"text":"if ($no_nat_set2)"}],[13962,{"text":"if $$rule{'deleted'}"}],[13966,{"text":"unless my $nat_hash = $$network{'nat'}"}],[13967,{"text":"$where eq 'src' ? :"}],[13975,{"text":"$nat_domain ? :"}],[13979,{"text":"$$network{'has_dynamic_host'} ? :"}],[13980,{"text":"if $seen{$cache_obj}{$no_nat_set}++"}],[13986,{"text":"if $$no_nat_set{$nat_tag}"}],[13992,{"text":"unless $hidden_seen++"}],[13991,{"text":"if ($$nat_network{'hidden'})"}],[13997,{"text":"unless ($$nat_network{'dynamic'})"}],[14010,{"text":"if $obj eq $network"}],[14013,{"text":"if $$obj{'nat'}{$nat_tag}"}],[14025,{"text":"unless $nat_tag"}],[14026,{"text":"if $$obj{'nat'}{$nat_tag}"}],[14027,{"text":"$where eq 'src' ? :"}],[14033,{"text":"$reversed ? :"}],[14031,{"text":"if (not $intf or zone_eq($$network{'zone'}, $$intf{'zone'}))"}],[14050,{"text":"if ($proto eq 'udp' or $proto eq 'ip')"}],[14042,{"text":"if ($$router{'model'}{'stateless'})"}],[14057,{"text":"unless $nat_seen"}],[14059,{"text":"if $hidden_seen"}],[14071,{"text":"unless $$nat_network{'dynamic'}"}],[14074,{"text":"unless $dyn_nat_hash"}],[14081,{"text":"unless ($active_nat_at)"}],[14089,{"text":"unless my $interfaces = $$active_nat_at{$nat_tag}"}],[14091,{"text":"unless $is_hidden or $static_seen"}],[14094,{"text":"$is_hidden ? :"}],[14095,{"text":"$where eq 'dst' ? :"}],[14187,{"text":"if ($cmp_rule ne $chg_rule and $cmp_log eq $chg_log)"}],[14173,{"text":"if (my $cmp_rule = $$cmp_hash{$prt})"}],[14213,{"text":"unless $prt = $$prt{'up'}"}],[14149,{"text":"if (my $cmp_hash = $$cmp_hash{$dst})"}],[14220,{"text":"unless $dst = $$dst{'up'}"}],[14139,{"text":"if (my $cmp_hash = $$cmp_hash{$src})"}],[14225,{"text":"unless $src = $$src{'up'}"}],[14132,{"text":"if (my $cmp_hash = $$cmp_hash{$src_range})"}],[14229,{"text":"unless $src_range = $$src_range{'up'}"}],[14126,{"text":"if (my $cmp_hash = $$cmp_hash{$deny})"}],[14233,{"text":"if $deny"}],[14123,{"text":"if (my $cmp_hash = $$cmp_hash{$stateless})"}],[14238,{"text":"unless $stateless"}],[14266,{"text":"unless $element0"}],[14270,{"text":"if (grep {$path0 ne ($obj2path{$_} || get_path($_));} @$group) { }"}],[14305,{"text":"if (zone_eq($src_zone, $dst_zone))"}],[14317,{"text":"unless my $rules = $service_rules{$action}"}],[14342,{"text":"unless $out_intf"}],[14345,{"text":"unless $in_intf"}],[14348,{"text":"unless $$router{'managed'}"}],[14350,{"text":"unless $$model{'has_interface_level'}"}],[14376,{"text":"if ($$in_hw{'level'} > $$out_hw{'level'})"}],[14384,{"text":"unless my $nat_info = $$dst{'nat'}"}],[14385,{"text":"unless grep {$$nat_info{$_};} @$nat_tags"}],[14370,{"text":"if ($identity_nat) { }"}],[14370,{"text":"elsif (my $nat_tags = $$in_hw{'bind_nat'}) { }"}],[14395,{"text":"unless my $nat_tags = $$out_hw{'bind_nat'}"}],[14397,{"text":"unless my $nat_info = $$src{'nat'}"}],[14402,{"text":"unless $$nat_info{$_}"}],[14402,{"text":"unless my($nat_net) = map({() unless $$nat_info{$_};} @$nat_tags)"}],[14413,{"text":"if ($$nat_net{'dynamic'} and $$in_hw{'level'} < $$out_hw{'level'})"}],[14407,{"text":"if ($identity_nat)"}],[14427,{"text":"if ($$obj{'is_aggregate'}) { }"}],[14426,{"text":"if ($type eq 'Network') { }"}],[14426,{"text":"elsif ($type eq 'Subnet' or $type eq 'Interface') { }"}],[14447,{"text":"if fast_mode()"}],[14456,{"text":"unless ($info)"}],[14463,{"text":"if ($$info{'nat_path'})"}],[14473,{"text":"unless my $nat_path = $$info{'nat_path'}"}],[14505,{"text":"if ($$obj{'is_aggregate'}) { }"}],[14505,{"text":"elsif (my $max = $$obj{'max_routing_net'}) { }"}],[14517,{"text":"if (my $max = $$net{'max_routing_net'}) { }"}],[14504,{"text":"if ($type eq 'Network') { }"}],[14504,{"text":"elsif ($type eq 'Subnet' or $type eq 'Interface') { }"}],[14551,{"text":"if $$in_interface{'main_interface'}"}],[14553,{"text":"if $border_networks{$network}"}],[14558,{"text":"if $$out_interface{'zone'}"}],[14559,{"text":"if $$out_interface{'main_interface'}"}],[14563,{"text":"unless keys %hop_interfaces"}],[14572,{"text":"if $$router{'active_path'}"}],[14577,{"text":"if $$interface{'main_interface'}"}],[14580,{"text":"if ($hop_interfaces{$interface})"}],[14586,{"text":"if $interface eq $in_intf"}],[14590,{"text":"if $$cluster{$network}"}],[14595,{"text":"if $out_intf eq $interface"}],[14596,{"text":"if $$out_intf{'main_interface'}"}],[14604,{"text":"if $hop2cluster{$interface}"}],[14617,{"text":"if $hop2networks{$hop}"}],[14626,{"text":"if $border eq $in_border"}],[14631,{"text":"unless $hop_interfaces{$out_hop}"}],[14632,{"text":"if $hop2cluster{$out_hop} eq $cluster"}],[14653,{"text":"if $$interface{'main_interface'}"}],[14654,{"text":"if ($$interface{'zone'}) { }"}],[14663,{"text":"if (1 == @hop_intf or is_redundany_group(\\@hop_intf))"}],[14684,{"text":"if $network eq $border"}],[14706,{"text":"if $$in_intf{'routing'}"}],[14713,{"text":"if ($in_net eq $out_net) { }"}],[14743,{"text":"if $$interface{'routing'}"}],[14749,{"text":"if $network eq $intf_net"}],[14750,{"text":"unless my $hops = $$route_in_zone{'default'} || $$route_in_zone{$network}"}],[14784,{"text":"if ($in_intf and $out_intf) { }"}],[14784,{"text":"elsif (not $in_intf) { }"}],[14820,{"text":"$what eq 'src' ? :"}],[14815,{"text":"if ($src_zone eq $dst_zone and $is_intf)"}],[14840,{"text":"$is_intf eq 'dst' ? :"}],[14840,{"text":"$is_intf eq 'src' ? :"}],[14832,{"text":"if ($pseudo_rule = $$routing_tree{$src_zone}{$dst_zone}) { }"}],[14832,{"text":"elsif ($pseudo_rule = $$routing_tree{$dst_zone}{$src_zone}) { }"}],[14871,{"text":"$what eq 'src' ? :"}],[14875,{"text":"unless $$router{'managed'} or $$router{'routing_only'}"}],[14878,{"text":"$what eq 'src' ? :"}],[14869,{"text":"if ($is_intf)"}],[14908,{"text":"if (is_zone($dst_path)) { }"}],[14905,{"text":"if (is_zone($src_path)) { }"}],[14905,{"text":"elsif (is_zone($dst_path)) { }"}],[14985,{"text":"if $$src_intf{'router'} eq $$entry{'router'}"}],[14987,{"text":"if (grep {$$_{'router'} eq $$entry{'router'};} @$redun_intf)"}],[14986,{"text":"if (my $redun_intf = $$src_intf{'redundancy_interfaces'})"}],[15010,{"text":"if $$dst_intf{'router'} eq $$exit{'router'}"}],[15012,{"text":"if (grep {$$_{'router'} eq $$exit{'router'};} @$redun_intf)"}],[15011,{"text":"if (my $redun_intf = $$dst_intf{'redundancy_interfaces'})"}],[15069,{"text":"if $interface eq $hop"}],[15074,{"text":"if ($$hop2{'ip'} eq 'bridge') { }"}],[15073,{"text":"if ($network eq $network2)"}],[15094,{"text":"unless $$interface{'network'}{'bridged'}"}],[15096,{"text":"if $$hop{'ip'} ne 'bridged'"}],[15114,{"text":"unless $$interface{'ip'} eq 'tunnel'"}],[15118,{"text":"if $$real_intf{'routing'}"}],[15129,{"text":"if (not $$real_peer{'ip'} =~ /^(?:short|negotiated)$/) { }"}],[15147,{"text":"unless my $hops = $$route_in_zone{'default'} || $$route_in_zone{$peer_net}"}],[15165,{"text":"unless $in_intf"}],[15166,{"text":"unless $in_intf eq $real_intf"}],[15167,{"text":"unless $out_intf"}],[15168,{"text":"unless $$out_intf{'network'}"}],[15180,{"text":"unless my $hops = $$route_in_zone{'default'} || $$route_in_zone{$hop_net}"}],[15176,{"text":"if ($hop_net eq $real_net) { }"}],[15128,{"text":"if ($real_net eq $peer_net) { }"}],[15128,{"text":"elsif ($$real_net{'zone'} eq $$peer_net{'zone'}) { }"}],[15192,{"text":"unless $$_{'redundancy_interfaces'}"}],[15192,{"text":"if (@hops > 1 and equal(map({$_ unless $$_{'redundancy_interfaces'};} @hops)) or @hops == 1) { }"}],[15228,{"text":"if ($peer_net ne $real_net)"}],[15248,{"text":"if $$interface{'loop'} and $$interface{'routing'}"}],[15249,{"text":"if $$interface{'ip'} eq 'bridged'"}],[15260,{"text":"unless ($$interface{'routing'} or $$interface2{'routing'})"}],[15255,{"text":"if ($interface2 ne $interface)"}],[15254,{"text":"if (my $interface2 = $net2intf{$network}) { }"}],[15276,{"text":"if ($group)"}],[15285,{"text":"if ($group and $group2 and $group eq $group2) { }"}],[15279,{"text":"if (my $hop2 = $net2hop{$network}) { }"}],[15274,{"text":"unless ($$interface{'routing'})"}],[15309,{"text":"if @$hops == @{$$hop1{'redundancy_interfaces'};}"}],[15315,{"text":"if (@$hops == 1 and my $phys_hop = $$hop1{'orig_main'}) { }"}],[15350,{"text":"$$router{'vrf_members'} ? :"}],[15370,{"text":"if $$interface{'ip'} eq 'bridged'"}],[15371,{"text":"if ($$interface{'routing'})"}],[15379,{"text":"if ($asa_crypto and $$interface{'hub'})"}],[15392,{"text":"if $$nat_network{'hidden'}"}],[15394,{"text":"if ($ip == 0 and $mask == 0)"}],[15404,{"text":"unless @interfaces"}],[15420,{"text":"if $$interface{'hub'}"}],[15417,{"text":"if ($asa_crypto)"}],[15429,{"text":"unless my $ip2net = $inv_prefix_aref[$inv_prefix]"}],[15435,{"text":"unless $ip % $modulo == 0"}],[15440,{"text":"unless my $right = $$ip2net{$next_ip}"}],[15445,{"text":"unless $hop_left eq $hop_right"}],[15449,{"text":"if $inv_prefix_aref[$combined_inv_prefix]{$ip}"}],[15486,{"text":"unless my $ip2net = $mask2ip2net{$m}"}],[15487,{"text":"unless my $big = $mask2ip2net{$m}{$i}"}],[15491,{"text":"if ($net2hop_info{$big} eq $hop_info)"}],[15475,{"text":"unless ($asa_crypto and $$interface{'hub'})"}],[15524,{"text":"unless $intf2hop2nets{$interface}{$hop}"}],[15526,{"text":"if ($count > $max)"}],[15533,{"text":"if ($max_intf and $max_hop)"}],[15513,{"text":"if ($do_auto_default_route)"}],[15548,{"text":"$vrf ? :"}],[15548,{"text":"if $type eq 'IOS'"}],[15556,{"text":"$$interface{'ip'} =~ /^(?:unnumbered|negotiated|tunnel)$/ ? :"}],[15567,{"text":"if ($vrf and not $nxos_prefix)"}],[15562,{"text":"if ($type eq 'IOS') { }"}],[15562,{"text":"elsif ($type eq 'NX-OS') { }"}],[15562,{"text":"elsif ($type eq 'PIX') { }"}],[15562,{"text":"elsif ($type eq 'iproute') { }"}],[15562,{"text":"elsif ($type eq 'none') { }"}],[15611,{"text":"unless my $src_nat = $$in_hw{'src_nat'}"}],[15616,{"text":"unless my $net_hash = $$src_nat{$out_hw}"}],[15621,{"text":"unless $$a{'ip'} <=> $$b{'ip'} or $$a{'mask'} <=> $$b{'mask'}"}],[15644,{"text":"if $in_hidden or $out_hidden"}],[15648,{"text":"if ($out_dynamic and $in_dynamic and $out_dynamic eq $in_dynamic)"}],[15662,{"text":"if (my $out_host_ip = $$host{'nat'}{$out_dynamic})"}],[15656,{"text":"if ($out_dynamic) { }"}],[15710,{"text":"if $global_index and $nat_index"}],[15728,{"text":"$out_ip == $max ? :"}],[15719,{"text":"if ($out_ip == $out_intf_ip and $out_mask == 4294967295) { }"}],[15713,{"text":"unless ($global_index)"}],[15742,{"text":"if $$in_hw{'level'} < $$out_hw{'level'}"}],[15737,{"text":"if (not $nat_index)"}],[15757,{"text":"if ($$in_hw{'level'} > $$out_hw{'level'} or $$in_hw{'need_identity_nat'} or $in_ip != $out_ip)"}],[15774,{"text":"unless $$in_hw{'need_nat_0'}"}],[15784,{"text":"unless my $src_nat = $$in_hw{'src_nat'}"}],[15789,{"text":"unless my $net_hash = $$src_nat{$out_hw}"}],[15796,{"text":"unless my $identical = $$network{'is_identical'}"}],[15799,{"text":"if ($in and $out and $in eq $out)"}],[15816,{"text":"if ($$net_hash{$net} and $net2 = $$network{'is_in'}{$in_nat} and $$net_hash{$net2}) { }"}],[15838,{"text":"unless $$model{'has_interface_level'}"}],[15857,{"text":"unless $in_intf"}],[15859,{"text":"unless my $managed = $$router{'managed'}"}],[15868,{"text":"unless ($$model{'stateless'} or not $out_intf and $$model{'stateless_self'})"}],[15867,{"text":"if ($$rule{'stateless'})"}],[15879,{"text":"if $$rule{'stateless_icmp'} and not $$model{'stateless_icmp'}"}],[15882,{"text":"if $$in_intf{'loopback'}"}],[15893,{"text":"unless my $filter_at = $$net{'filter_at'}"}],[15898,{"text":"unless my(@matching_src) = grep({&$match($_);} @$src_list)"}],[15899,{"text":"unless my(@matching_dst) = grep({&$match($_);} @$dst_list)"}],[15905,{"text":"if (@$src_list != @matching_src)"}],[15908,{"text":"if (@$dst_list != @matching_dst)"}],[15888,{"text":"if (my $mark = $$router{'local_mark'})"}],[15919,{"text":"if $$model{'filter'} eq 'PIX'"}],[15925,{"text":"unless ($$in_intf{'hardware'}{'no_in_acl'})"}],[15916,{"text":"if (not $out_intf) { }"}],[15916,{"text":"elsif ($$out_intf{'hardware'}{'need_out_acl'}) { }"}],[15944,{"text":"unless my $id = $$src{'id'}"}],[15949,{"text":"unless $$src{'has_id_hosts'}"}],[15943,{"text":"if (is_subnet($src)) { }"}],[15943,{"text":"elsif (is_network($src)) { }"}],[15966,{"text":"if (@$src_list != @$id_src_list)"}],[15939,{"text":"if (my $id2rules = $$in_intf{'id_rules'})"}],[15973,{"text":"if ($$router{'no_crypto_filter'})"}],[15978,{"text":"unless ($$in_intf{'id_rules'})"}],[15933,{"text":"if ($$in_intf{'ip'} eq 'tunnel') { }"}],[15933,{"text":"elsif ($key eq 'out_rules') { }"}],[15933,{"text":"elsif ($key eq 'rules' and $$model{'has_io_acl'}) { }"}],[16021,{"text":"if ($$hardware{'need_out_acl'})"}],[16014,{"text":"if ($has_io_acl) { }"}],[16007,{"text":"if ($$hardware{'crosslink'})"}],[16042,{"text":"if ($has_io_acl) { }"}],[16033,{"text":"if ($$interface{'reroute_permit'})"}],[16057,{"text":"if (my $dst_range = $$prt{'dst_range'})"}],[16055,{"text":"unless ($$routing{'name'} =~ /^(?:manual|dynamic)$/)"}],[16054,{"text":"if (my $routing = $$interface{'routing'})"}],[16091,{"text":"if (my $dst_range = $$prt{'dst_range'})"}],[16087,{"text":"if (my $type = $$interface{'redundancy_type'})"}],[16103,{"text":"if ($$interface{'dhcp_server'})"}],[16119,{"text":"$$_{'main_prt'} ? :"}],[16119,{"text":"ref $_ eq 'ARRAY' ? :"}],[16134,{"text":"unless my $general_permit = $$router{'general_permit'}"}],[16138,{"text":"if $$in_intf{'main_interface'}"}],[16144,{"text":"$id_rules ? :"}],[16153,{"text":"if $out_intf eq $in_intf"}],[16154,{"text":"if $$out_intf{'ip'} eq 'tunnel'"}],[16164,{"text":"if $out_intf eq $in_intf"}],[16176,{"text":"if ($$out_hw{'need_out_acl'})"}],[16169,{"text":"if ($need_protect)"}],[16181,{"text":"if $$out_intf{'main_interface'}"}],[16188,{"text":"if $$in_intf{'ip'} eq 'bridged'"}],[16142,{"text":"if ($$in_intf{'is_hub'}) { }"}],[16197,{"text":"if fast_mode()"}],[16232,{"text":"if ($$obj{'ip'} eq 'unnumbered') { }"}],[16242,{"text":"if (my $ip = $$obj{'nat'}{$nat_tag}) { }"}],[16241,{"text":"if (my $nat_tag = $$network{'dynamic'}) { }"}],[16261,{"text":"if ($$obj{'ip'} =~ /^(unnumbered|short)$/)"}],[16272,{"text":"if (my $ip = $$obj{'nat'}{$nat_tag}) { }"}],[16267,{"text":"if ($$obj{'ip'} eq 'negotiated') { }"}],[16267,{"text":"elsif (my $nat_tag = $$network{'dynamic'}) { }"}],[16229,{"text":"if ($type eq 'Network') { }"}],[16229,{"text":"elsif ($type eq 'Subnet') { }"}],[16229,{"text":"elsif ($type eq 'Interface') { }"}],[16311,{"text":"$prefix_code == 32 ? :"}],[16339,{"text":"if $$rule{'deny'}"}],[16346,{"text":"if $$dst_network{'mask'} == 0"}],[16350,{"text":"unless $$a{'ip'} <=> $$b{'ip'}"}],[16407,{"text":"if $asa_vpn_attr_need_value{$key}"}],[16406,{"text":"if (defined $value)"}],[16418,{"text":"unless $$interface{'ip'} eq 'tunnel'"}],[16454,{"text":"if ($$split_tunnel_nets[$i] ne $$cached_nets[$i])"}],[16449,{"text":"if (my $href = $split_t_cache{@$split_tunnel_nets})"}],[16467,{"text":"if (@$split_tunnel_nets) { }"}],[16464,{"text":"unless ($acl_name)"}],[16436,{"text":"if (not defined $split_tunnel_policy) { }"}],[16436,{"text":"elsif ($split_tunnel_policy eq 'tunnelall') { }"}],[16436,{"text":"elsif ($split_tunnel_policy eq 'tunnelspecified') { }"}],[16521,{"text":"if (%$attributes)"}],[16530,{"text":"if $group_policy_name"}],[16541,{"text":"if ($id =~ /^@/)"}],[16559,{"text":"defined $value ? :"}],[16557,{"text":"if ($spec and $$spec{'tg_general'})"}],[16513,{"text":"if ($$src{'mask'} == 4294967295) { }"}],[16627,{"text":"unless my $id = $$interface{'peers'}[0]{'id'}"}],[16632,{"text":"if (keys %$attributes)"}],[16640,{"text":"if $group_policy_name"}],[16421,{"text":"if (my $hash = $$interface{'id_rules'}) { }"}],[16647,{"text":"if (keys %cert_group_map or keys %single_cert_map)"}],[16668,{"text":"if $$model{'filter'} ne 'iptables'"}],[16701,{"text":"if $$model{'filter'} ne 'iptables'"}],[16716,{"text":"if $$hardware{'loopback'}"}],[16766,{"text":"if $$hardware{'loopback'}"}],[16769,{"text":"if $$hardware{'name'} eq 'device' and $$model{'class'} eq 'ASA'"}],[16779,{"text":"if $suffix eq 'out' and not $$hardware{'need_out_acl'}"}],[16786,{"text":"unless @$rules != 1"}],[16783,{"text":"unless (grep {my $rules = $$hardware{$_} || [];\n$$rules[0] ne $permit_any_rule unless @$rules != 1;} 'rules', 'intf_rules')"}],[16782,{"text":"unless ($$model{'need_acl'})"}],[16809,{"text":"if ($$router{'need_protect'})"}],[16812,{"text":"if ($$hardware{'no_in_acl'}) { }"}],[16828,{"text":"if $$zone{'zone_cluster'}"}],[16841,{"text":"unless @redundant == @interfaces and equal(@redundant)"}],[16834,{"text":"if (@interfaces > 1)"}],[16846,{"text":"if ($intf_ok == @{$$hardware{'interfaces'};})"}],[16819,{"text":"if ($managed_local)"}],[16803,{"text":"if ($suffix eq 'in') { }"}],[16863,{"text":"if ($filter eq 'IOS' or $filter eq 'NX-OS') { }"}],[16863,{"text":"elsif ($filter eq 'ACE') { }"}],[16863,{"text":"elsif ($filter eq 'PIX') { }"}],[16893,{"text":"if ($filter eq 'iptables') { }"}],[16912,{"text":"unless @tunnel_intf == 1"}],[16917,{"text":"if $_ ne $wan_intf"}],[16958,{"text":"if $$tunnel_intf{'crypto'}{'detailed_crypto_acl'}"}],[17001,{"text":"$is_hub ? :"}],[17003,{"text":"$detailed ? :"}],[17005,{"text":"unless $is_hub"}],[17027,{"text":"if $$router{'no_crypto_filter'}"}],[17055,{"text":"if ($crypto_filter_name)"}],[17061,{"text":"if ($$isakmp{'ike_version'} == 2) { }"}],[17060,{"text":"if ($crypto_type eq 'ASA') { }"}],[17072,{"text":"if (my $pfs_group = $$ipsec{'pfs_group'})"}],[17079,{"text":"unless ($lifetime == 3600 and $crypto_type eq 'IOS')"}],[17076,{"text":"if (my $lifetime = $$ipsec{'lifetime'})"}],[17098,{"text":"if ($$isakmp{'ike_version'} == 2) { }"}],[17096,{"text":"if ($authentication eq 'rsasig') { }"}],[17159,{"text":"if ($crypto_type eq 'IOS') { }"}],[17159,{"text":"elsif ($crypto_type eq 'ASA') { }"}],[17168,{"text":"if ($crypto_type eq 'IOS') { }"}],[17168,{"text":"elsif ($crypto_type eq 'ASA') { }"}],[17195,{"text":"if (my $id = $$peer{'id'})"}],[17187,{"text":"if ($crypto_type eq 'ASA')"}],[17208,{"text":"unless $crypto_type eq 'ASA'"}],[17267,{"text":"unless @ipsec"}],[17275,{"text":"if ($crypto_type eq 'EZVPN')"}],[17283,{"text":"if ($crypto_type =~ /^ASA/)"}],[17288,{"text":"if ($crypto_type eq 'ASA_VPN')"}],[17295,{"text":"if ($crypto_type eq 'ASA_EZVPN')"}],[17299,{"text":"unless $crypto_type =~ /^(:?IOS|ASA)$/"}],[17306,{"text":"unless $crypto_type eq 'IOS'"}],[17316,{"text":"unless ($authentication eq 'rsa-sig')"}],[17322,{"text":"$crypto_type eq 'ASA' ? :"}],[17321,{"text":"if ($encryption =~ /^aes(\\d+)$/)"}],[17334,{"text":"unless ($lifetime == 86400)"}],[17351,{"text":"if (my $ah = $$ipsec{'ah'})"}],[17355,{"text":"if (not my $esp = $$ipsec{'esp_encryption'}) { }"}],[17355,{"text":"elsif ($esp =~ /^(aes|des|3des)$/) { }"}],[17355,{"text":"elsif ($esp =~ /^aes(192|256)$/) { }"}],[17365,{"text":"if (my $esp_ah = $$ipsec{'esp_authentication'})"}],[17374,{"text":"if (my $ah = $$ipsec{'ah'})"}],[17384,{"text":"$crypto_type eq 'ASA' ? :"}],[17377,{"text":"if (not my $esp = $$ipsec{'esp_encryption'}) { }"}],[17377,{"text":"elsif ($esp =~ /^(aes|des|3des)$/) { }"}],[17377,{"text":"elsif ($esp =~ /^aes(192|256)$/) { }"}],[17387,{"text":"if (my $esp_ah = $$ipsec{'esp_authentication'})"}],[17390,{"text":"$crypto_type eq 'ASA' ? :"}],[17349,{"text":"if ($crypto_type eq 'ASA' and $$isakmp{'ike_version'} == 2) { }"}],[17402,{"text":"unless $$interface{'ip'} eq 'tunnel'"}],[17404,{"text":"if ($ip =~ /^(?:negotiated|short|unnumbered)$/) { }"}],[17420,{"text":"if (my $interfaces = $hardware2crypto{$hardware})"}],[17425,{"text":"if (my $interfaces = $hardware2dyn_crypto{$hardware})"}],[17432,{"text":"unless $have_crypto_map"}],[17433,{"text":"if ($crypto_type eq 'IOS') { }"}],[17433,{"text":"elsif ($crypto_type eq 'ASA') { }"}],[17446,{"text":"unless $$model{'print_interface'}"}],[17451,{"text":"if $name eq 'VIP' and $$model{'has_vip'}"}],[17470,{"text":"if $secondary"}],[17476,{"text":"if $secondary"}],[17457,{"text":"if ($ip eq 'tunnel') { }"}],[17457,{"text":"elsif ($ip eq 'unnumbered') { }"}],[17457,{"text":"elsif ($ip eq 'negotiated') { }"}],[17457,{"text":"elsif ($$model{'use_prefix'}) { }"}],[17482,{"text":"if ($class eq 'NX-OS') { }"}],[17481,{"text":"if (my $vrf = $$router{'vrf'})"}],[17493,{"text":"if ($class eq 'IOS' and $stateful and not $$hardware{'loopback'})"}],[17496,{"text":"if (my $other = $$hardware{'subcmd'})"}],[17501,{"text":"if $class eq 'ACE'"}],[17522,{"text":"if (my $result = $prt2code{$prt})"}],[17530,{"text":"if $$prt{'established'}"}],[17533,{"text":"if (defined(my $type = $$prt{'type'}))"}],[17536,{"text":"if (defined(my $code = $$prt{'code'}))"}],[17528,{"text":"if ($proto eq 'tcp' or $proto eq 'udp') { }"}],[17528,{"text":"elsif ($proto eq 'icmp') { }"}],[17577,{"text":"if ($$model{'has_vip'})"}],[17572,{"text":"unless ($need_protect)"}],[17559,{"text":"if ($$router{'need_protect'} or $$router{'crosslink_interfaces'})"}],[17583,{"text":"unless my $aref = delete $$router{'acl_list'}"}],[17597,{"text":"if ($need_protect and delete $$acl{'protect_self'})"}],[17607,{"text":"unless my $rules = $$acl{$what}"}],[17612,{"text":"if $deny"}],[17623,{"text":"if ($normalized eq ':subst') { }"}],[17620,{"text":"if (my $modifier = $$active_log{$tag}) { }"}],[17619,{"text":"if (exists $$active_log{$tag})"}],[17617,{"text":"if ($active_log and my $log = $$rule{'log'})"}],[17639,{"text":"if ($log_code) { }"}],[17639,{"text":"elsif ($$router{'log_deny'} and $deny) { }"}],[17665,{"text":"if $$obj{'id'}"}],[17664,{"text":"if ($type eq 'Subnet')"}],[17670,{"text":"if ($$obj{'has_id_hosts'})"}],[17660,{"text":"if ($do_auth)"}],[17679,{"text":"if $$net{'has_other_subnet'}"}],[17683,{"text":"if ($$no_opt{$net})"}],[17680,{"text":"if (my $no_opt = $$router{'no_secondary_opt'})"}],[17689,{"text":"if (my $max = $$subst{'max_secondary_net'})"}],[17694,{"text":"if $$subst{'mask'} == 4294967295"}],[17704,{"text":"if ($$obj{'has_other_subnet'})"}],[17709,{"text":"unless my $max = $$obj{'max_secondary_net'}"}],[17677,{"text":"if ($type eq 'Subnet' or $type eq 'Interface') { }"}],[17646,{"text":"if ($secondary_filter and $$rule{'some_non_secondary'} or $standard_filter and $$rule{'some_primary'})"}],[17723,{"text":"if (my $src_range = $$rule{'src_range'})"}],[17742,{"text":"if (values %opt_addr)"}],[17748,{"text":"if (values %no_opt_addrs)"}],[17762,{"text":"if (my $filter_only = $$router{'filter_only'})"}],[17768,{"text":"unless ($$router{'no_group_code'})"}],[17767,{"text":"if ($$model{'can_objectgroup'})"}],[17773,{"text":"if ($$router{'log_deny'})"}],[17785,{"text":"unless mkdir $dir"}],[17789,{"text":"unless -d $dir"}],[17800,{"text":"unless mkdir $prev"}],[17802,{"text":"unless system('mv', @old_files, $prev) == 0"}],[17794,{"text":"if (my $count = @old_files)"}],[17792,{"text":"unless (-d $prev)"}],[17784,{"text":"if (not -e $dir) { }"}],[17822,{"text":"if $seen{$router}"}],[17825,{"text":"if $$router{'orig_router'}"}],[17838,{"text":"unless open my $code_fd, '>', $config_file"}],[17846,{"text":"if (my $orig_interfaces = $$router{'orig_interfaces'})"}],[17853,{"text":"if (my $members = $$router{'vrf_members'}) { }"}],[17866,{"text":"$ips ? :"}],[17868,{"text":"if (@ips)"}],[17863,{"text":"if ($$router{'policy_distribution_point'})"}],[17878,{"text":"if ($$router{'managed'}) { }"}],[17893,{"text":"unless close $code_fd"}],[17899,{"text":"unless open my $acl_fd, '>', $acl_file"}],[17902,{"text":"unless close $acl_fd"}],[17910,{"text":"unless defined $in_path and -d $in_path"}],[17911,{"text":"unless defined $out_dir"}],[17921,{"text":"unless -d $raw_dir"}],[17931,{"text":"unless opendir my $dh, $raw_dir"}],[17933,{"text":"if $file =~ /^\\./"}],[17934,{"text":"if $file =~ /$$Netspoc::Compiler::Pass1::config{'ignore_files'}/o"}],[17939,{"text":"unless (-f $raw_path)"}],[17943,{"text":"unless ($device_names{$file})"}],[17948,{"text":"unless system(\"cp -f $raw_path $copy\") == 0"}],[18175,{"text":"if ($out_dir)"}]],"start":{"545":{"read_ip_prefix":[{"branch":20,"statement":135,"pod":27,"time":null,"condition":5,"subroutine":37}]},"9993":{"prepare_area_borders":[{"branch":1323,"statement":4429,"pod":217,"time":null,"condition":226,"subroutine":251}]},"12328":{"__ANON__":[{"statement":5329,"branch":1586,"pod":251,"time":null,"condition":303,"subroutine":286}]},"8936":{"get_managed_local_clusters":[{"condition":202,"subroutine":222,"statement":3966,"branch":1200,"time":null,"pod":192}]},"4004":{"link_areas":[{"statement":1672,"branch":552,"time":null,"pod":121,"condition":73,"subroutine":135}]},"17205":{"print_dynamic_crypto_map":[{"branch":2139,"statement":7535,"pod":329,"time":null,"condition":423,"subroutine":376}]},"3351":{"is_subnet":[{"condition":64,"subroutine":114,"branch":485,"statement":1399,"time":null,"pod":101}]},"10914":{"cluster_path_mark1":[{"time":null,"pod":235,"statement":4779,"branch":1418,"subroutine":269,"condition":239}]},"4681":{"check_bridged_networks":[{"condition":86,"subroutine":149,"statement":1981,"branch":634,"pod":134,"time":null}]},"16001":{"add_router_acls":[{"pod":305,"time":null,"branch":2037,"statement":6954,"subroutine":351,"condition":412}]},"16297":{"ios_route_code":[{"condition":412,"subroutine":356,"statement":7082,"branch":2072,"time":null,"pod":310}]},"11850":{"single_path_walk":[{"subroutine":275,"condition":282,"time":null,"pod":241,"branch":1521,"statement":5087}]},"562":{"gen_ip":[{"statement":144,"branch":22,"pod":29,"time":null,"condition":5,"subroutine":39}]},"16133":{"distribute_general_permit":[{"pod":307,"time":null,"statement":7008,"branch":2050,"subroutine":353,"condition":412}]},"986":{"check_radius_attributes":[{"condition":13,"subroutine":67,"statement":323,"branch":76,"pod":57,"time":null}]},"9563":{"set_zone_cluster":[{"condition":212,"subroutine":237,"branch":1271,"statement":4263,"time":null,"pod":203}]},"3117":{"read_ipsec":[{"branch":450,"statement":1285,"time":null,"pod":90,"condition":61,"subroutine":101}]},"356":{"aref_eq":[{"statement":64,"branch":5,"pod":8,"time":null,"condition":null,"subroutine":18}]},"3797":{"expand_watchers":[{"condition":70,"subroutine":131,"branch":526,"statement":1557,"pod":117,"time":null}]},"3353":{"is_zone":[{"branch":485,"statement":1401,"time":null,"pod":103,"condition":64,"subroutine":116}]},"6948":{"get_zone":[{"pod":162,"time":null,"branch":951,"statement":3072,"subroutine":185,"condition":144}]},"9193":{"link_aggregate_to_zone":[{"subroutine":229,"condition":207,"pod":196,"time":null,"statement":4097,"branch":1228}]},"8555":{"find_subnets_in_nat_domain":[{"condition":187,"subroutine":218,"branch":1158,"statement":3818,"time":null,"pod":189}]},"3079":{"read_isakmp":[{"branch":450,"statement":1283,"time":null,"pod":89,"condition":61,"subroutine":100}]},"13584":{"BEGIN":[{"condition":null,"subroutine":9,"statement":27,"branch":null,"time":null,"pod":null}]},"450":{"syntax_err":[{"pod":18,"time":null,"branch":13,"statement":99,"subroutine":28,"condition":null}]},"524":{"check_ip":[{"subroutine":35,"condition":2,"pod":25,"time":null,"branch":17,"statement":126}]},"16197":{"rules_distribution":[{"time":null,"pod":308,"statement":7041,"branch":2061,"subroutine":354,"condition":412}]},"8092":{"__ANON__":[{"time":null,"pod":183,"statement":3642,"branch":1109,"subroutine":208,"condition":178}]},"17047":{"print_crypto_map_attributes":[{"condition":422,"subroutine":372,"branch":2125,"statement":7461,"pod":325,"time":null}]},"10046":{"set_areas":[{"condition":226,"subroutine":253,"statement":4451,"branch":1329,"pod":219,"time":null}]},"13661":{"gen_reverse_rules":[{"condition":342,"subroutine":304,"statement":5861,"branch":1760,"time":null,"pod":267}]},"8089":{"invert_nat_set":[{"branch":1104,"statement":3600,"pod":182,"time":null,"condition":175,"subroutine":207}]},"537":{"read_ip":[{"pod":26,"time":null,"statement":132,"branch":19,"subroutine":36,"condition":5}]},"493":{"check":[{"condition":null,"subroutine":31,"statement":113,"branch":15,"time":null,"pod":21}]},"16325":{"print_acl_placeholder":[{"subroutine":359,"condition":412,"time":null,"pod":313,"statement":7097,"branch":2073}]},"2547":{"check_router_attributes":[{"statement":1028,"branch":358,"pod":71,"time":null,"condition":46,"subroutine":81}]},"4599":{"link_topology":[{"condition":85,"subroutine":147,"statement":1947,"branch":630,"pod":132,"time":null}]},"12292":{"verify_asa_vpn_attributes":[{"subroutine":284,"condition":302,"time":null,"pod":249,"branch":1572,"statement":5299}]},"4119":{"check_interface_ip":[{"subroutine":137,"condition":73,"pod":123,"time":null,"statement":1722,"branch":565}]},"13939":{"__ANON__":[{"subroutine":315,"condition":356,"time":null,"pod":278,"statement":6100,"branch":1836}]},"876":{"split_typed_name":[{"condition":13,"subroutine":57,"statement":268,"branch":66,"time":null,"pod":47}]},"4499":{"check_ip_addresses":[{"time":null,"pod":131,"statement":1902,"branch":615,"subroutine":146,"condition":79}]},"16994":{"print_crypto_acl":[{"condition":422,"subroutine":370,"statement":7434,"branch":2121,"pod":323,"time":null}]},"3352":{"is_area":[{"condition":64,"subroutine":115,"statement":1400,"branch":485,"pod":102,"time":null}]},"15089":{"check_and_convert_routes":[{"condition":376,"subroutine":338,"statement":6518,"branch":1930,"time":null,"pod":297}]},"3350":{"is_host":[{"statement":1398,"branch":485,"time":null,"pod":100,"condition":64,"subroutine":113}]},"10251":{"check_virtual_interfaces":[{"branch":1348,"statement":4547,"pod":224,"time":null,"condition":227,"subroutine":258}]},"14300":{"remove_unenforceable_rules":[{"pod":281,"time":null,"statement":6170,"branch":1851,"subroutine":320,"condition":362}]},"2881":{"read_typed_name_or_simple_protocol":[{"condition":57,"subroutine":94,"statement":1191,"branch":422,"pod":83,"time":null}]},"7085":{"show_unenforceable":[{"statement":3120,"branch":977,"time":null,"pod":165,"condition":152,"subroutine":188}]},"5917":{"expand_protocols":[{"statement":2568,"branch":814,"pod":149,"time":null,"condition":111,"subroutine":167}]},"2739":{"read_proto_nr":[{"time":null,"pod":78,"branch":398,"statement":1121,"subroutine":88,"condition":54}]},"8162":{"adjust_crypto_nat":[{"time":null,"pod":183,"statement":3642,"branch":1109,"subroutine":209,"condition":178}]},"332":{"max":[{"branch":3,"statement":54,"time":null,"pod":6,"condition":null,"subroutine":16}]},"7276":{"warn_unused_overlaps":[{"condition":158,"subroutine":193,"statement":3237,"branch":1007,"pod":170,"time":null}]},"3124":{"read_crypto":[{"subroutine":102,"condition":61,"time":null,"pod":91,"branch":450,"statement":1287}]},"5978":{"split_protocols":[{"subroutine":168,"condition":111,"pod":150,"time":null,"statement":2595,"branch":821}]},"912":{"read_list":[{"pod":50,"time":null,"branch":69,"statement":286,"subroutine":60,"condition":13}]},"13170":{"find_smaller_prt":[{"subroutine":298,"condition":326,"time":null,"pod":262,"statement":5648,"branch":1694}]},"14016":{"__ANON__":[{"subroutine":316,"condition":356,"time":null,"pod":278,"statement":6100,"branch":1836}]},"840":{"add_description":[{"time":null,"pod":44,"statement":253,"branch":62,"subroutine":54,"condition":13}]},"11865":{"__ANON__":[{"condition":284,"subroutine":277,"branch":1527,"statement":5122,"time":null,"pod":243}]},"3933":{"link_policy_distribution_point":[{"subroutine":133,"condition":71,"pod":119,"time":null,"branch":541,"statement":1635}]},"9490":{"set_zone1":[{"pod":202,"time":null,"branch":1260,"statement":4229,"subroutine":236,"condition":210}]},"12901":{"check_supernet_src_rule":[{"branch":1652,"statement":5557,"time":null,"pod":259,"condition":316,"subroutine":295}]},"416":{"check_abort":[{"subroutine":23,"condition":null,"time":null,"pod":13,"statement":83,"branch":10}]},"775":{"read_user_id":[{"condition":13,"subroutine":49,"branch":56,"statement":230,"time":null,"pod":39}]},"706":{"read_extended_name":[{"condition":8,"subroutine":48,"statement":195,"branch":37,"pod":38,"time":null}]},"9477":{"get_cluster_aggregates":[{"condition":210,"subroutine":235,"statement":4224,"branch":1259,"pod":201,"time":null}]},"7141":{"show_deleted_rules1":[{"pod":167,"time":null,"statement":3148,"branch":988,"subroutine":190,"condition":155}]},"6803":{"apply_src_dst_modifier":[{"subroutine":182,"condition":138,"time":null,"pod":159,"branch":936,"statement":3004}]},"10230":{"set_zone":[{"time":null,"pod":223,"statement":4534,"branch":1348,"subroutine":257,"condition":227}]},"7391":{"print_rulecount":[{"branch":1019,"statement":3290,"time":null,"pod":175,"condition":165,"subroutine":198}]},"13224":{"check_for_transient_supernet_rule":[{"condition":326,"subroutine":299,"statement":5668,"branch":1698,"pod":263,"time":null}]},"7320":{"normalize_log":[{"subroutine":196,"condition":158,"pod":173,"time":null,"branch":1013,"statement":3257}]},"6414":{"__ANON__":[{"subroutine":175,"condition":131,"time":null,"pod":157,"branch":917,"statement":2938}]},"4273":{"link_pathrestrictions":[{"subroutine":143,"condition":73,"pod":128,"time":null,"statement":1788,"branch":585}]},"12723":{"find_zone_network":[{"branch":1630,"statement":5483,"pod":256,"time":null,"condition":310,"subroutine":292}]},"15065":{"fix_bridged_hops":[{"condition":376,"subroutine":337,"branch":1927,"statement":6502,"time":null,"pod":296}]},"17090":{"print_tunnel_group":[{"condition":423,"subroutine":373,"branch":2131,"statement":7477,"pod":326,"time":null}]},"7130":{"warn_useless_unenforceable":[{"pod":166,"time":null,"branch":985,"statement":3141,"subroutine":189,"condition":155}]},"9421":{"get_any":[{"condition":210,"subroutine":234,"branch":1249,"statement":4199,"pod":200,"time":null}]},"7783":{"distribute_nat":[{"subroutine":204,"condition":173,"time":null,"pod":180,"branch":1068,"statement":3469}]},"9901":{"cleanup_after_inheritance":[{"condition":224,"subroutine":247,"statement":4392,"branch":1312,"time":null,"pod":213}]},"8208":{"check_subnets":[{"condition":179,"subroutine":211,"statement":3667,"branch":1116,"time":null,"pod":185}]},"7306":{"check_log":[{"time":null,"pod":172,"branch":1012,"statement":3251,"subroutine":195,"condition":158}]},"5893":{"check_unused_groups":[{"condition":111,"subroutine":166,"statement":2559,"branch":812,"pod":148,"time":null}]},"4906":{"owner_eq":[{"subroutine":152,"condition":90,"time":null,"pod":137,"branch":669,"statement":2102}]},"17255":{"print_crypto":[{"subroutine":377,"condition":423,"pod":330,"time":null,"branch":2140,"statement":7559}]},"8281":{"by_name":[{"branch":1125,"statement":3707,"time":null,"pod":187,"condition":186,"subroutine":214}]},"10756":{"process_loops":[{"statement":4730,"branch":1403,"time":null,"pod":232,"condition":234,"subroutine":266}]},"431":{"set_abort_immediately":[{"time":null,"pod":15,"statement":89,"branch":13,"subroutine":25,"condition":null}]},"15604":{"print_nat1":[{"branch":1989,"statement":6763,"pod":300,"time":null,"condition":392,"subroutine":342}]},"13056":{"check_supernet_dst_rule":[{"subroutine":296,"condition":323,"pod":260,"time":null,"statement":5604,"branch":1677}]},"16712":{"print_iptables_acls":[{"time":null,"pod":318,"statement":7297,"branch":2099,"subroutine":365,"condition":416}]},"8288":{"find_subnets_in_zone":[{"subroutine":215,"condition":186,"pod":188,"time":null,"statement":3708,"branch":1125}]},"15164":{"__ANON__":[{"subroutine":339,"condition":386,"time":null,"pod":298,"branch":1958,"statement":6628}]},"6998":{"add_managed_hosts":[{"subroutine":186,"condition":144,"time":null,"pod":163,"branch":960,"statement":3091}]},"2990":{"read_pathrestriction":[{"subroutine":98,"condition":61,"time":null,"pod":87,"statement":1245,"branch":440}]},"9874":{"inherit_nat_in_zone":[{"condition":224,"subroutine":246,"branch":1311,"statement":4382,"pod":212,"time":null}]},"5548":{"__ANON__":[{"condition":111,"subroutine":160,"statement":2507,"branch":795,"pod":145,"time":null}]},"574":{"read_identifier":[{"time":null,"pod":31,"branch":22,"statement":148,"subroutine":41,"condition":5}]},"3332":{"show_read_statistics":[{"branch":485,"statement":1385,"time":null,"pod":96,"condition":64,"subroutine":109}]},"3713":{"order_protocols":[{"time":null,"pod":114,"branch":521,"statement":1529,"subroutine":128,"condition":69}]},"6918":{"add_rules":[{"condition":140,"subroutine":184,"branch":950,"statement":3057,"time":null,"pod":161}]},"14742":{"add_end_routes":[{"condition":369,"subroutine":331,"statement":6380,"branch":1903,"pod":290,"time":null}]},"6484":{"__ANON__":[{"pod":157,"time":null,"statement":2938,"branch":917,"subroutine":178,"condition":131}]},"10696":{"set_loop_cluster":[{"condition":233,"subroutine":264,"branch":1398,"statement":4712,"pod":230,"time":null}]},"17873":{"__ANON__":[{"condition":439,"subroutine":384,"statement":7896,"branch":2242,"time":null,"pod":337}]},"13798":{"have_set_and_equal_marks":[{"statement":5934,"branch":1784,"time":null,"pod":273,"condition":343,"subroutine":310}]},"13750":{"mark_local_secondary":[{"subroutine":307,"condition":342,"pod":270,"time":null,"branch":1774,"statement":5901}]},"16400":{"__ANON__":[{"statement":7263,"branch":2097,"time":null,"pod":316,"condition":416,"subroutine":362}]},"11087":{"cluster_navigation":[{"statement":4833,"branch":1442,"pod":236,"time":null,"condition":241,"subroutine":270}]},"13774":{"get_zones":[{"statement":5919,"branch":1781,"time":null,"pod":271,"condition":342,"subroutine":308}]},"3958":{"link_general_permit":[{"condition":71,"subroutine":134,"statement":1649,"branch":544,"time":null,"pod":120}]},"9812":{"inherit_nat_to_subnets_in_zone":[{"condition":223,"subroutine":245,"branch":1305,"statement":4361,"time":null,"pod":211}]},"6177":{"normalize_service_rules":[{"condition":120,"subroutine":172,"statement":2678,"branch":839,"pod":154,"time":null}]},"10729":{"find_dists_and_loops":[{"subroutine":265,"condition":233,"time":null,"pod":231,"branch":1400,"statement":4720}]},"621":{"read_union":[{"subroutine":45,"condition":5,"pod":35,"time":null,"statement":164,"branch":26}]},"12817":{"check_supernet_in_zone":[{"branch":1640,"statement":5523,"time":null,"pod":258,"condition":313,"subroutine":294}]},"6766":{"__ANON__":[{"branch":936,"statement":3004,"time":null,"pod":159,"condition":138,"subroutine":181}]},"15834":{"print_nat":[{"subroutine":348,"condition":407,"time":null,"pod":303,"branch":2009,"statement":6876}]},"3466":{"order_icmp":[{"statement":1450,"branch":502,"time":null,"pod":110,"condition":67,"subroutine":123}]},"10468":{"apply_pathrestriction_optimization":[{"branch":1379,"statement":4640,"pod":227,"time":null,"condition":230,"subroutine":261}]},"3237":{"read_file":[{"time":null,"pod":94,"branch":472,"statement":1334,"subroutine":105,"condition":62}]},"4628":{"disable_behind":[{"pod":133,"time":null,"statement":1959,"branch":630,"subroutine":148,"condition":85}]},"883":{"check_flag":[{"condition":13,"subroutine":58,"statement":270,"branch":66,"pod":48,"time":null}]},"409":{"at_line":[{"branch":10,"statement":82,"time":null,"pod":12,"condition":null,"subroutine":22}]},"3778":{"link_to_real_owner":[{"condition":70,"subroutine":130,"statement":1551,"branch":524,"pod":116,"time":null}]},"4890":{"split_ip_range":[{"subroutine":151,"condition":89,"time":null,"pod":136,"statement":2093,"branch":668}]},"12347":{"verify_asa_trustpoint":[{"condition":303,"subroutine":287,"statement":5329,"branch":1586,"pod":251,"time":null}]},"14705":{"add_path_routes":[{"pod":289,"time":null,"branch":1901,"statement":6366,"subroutine":330,"condition":368}]},"8480":{"__ANON__":[{"pod":189,"time":null,"statement":3818,"branch":1158,"subroutine":217,"condition":187}]},"9292":{"link_aggregates":[{"condition":208,"subroutine":232,"statement":4146,"branch":1237,"pod":198,"time":null}]},"15747":{"__ANON__":[{"time":null,"pod":302,"statement":6847,"branch":2004,"subroutine":345,"condition":403}]},"3266":{"read_file_or_dir":[{"pod":95,"time":null,"branch":474,"statement":1349,"subroutine":106,"condition":62}]},"3354":{"is_group":[{"statement":1402,"branch":485,"pod":104,"time":null,"condition":64,"subroutine":117}]},"16227":{"address":[{"subroutine":355,"condition":412,"pod":309,"time":null,"branch":2062,"statement":7054}]},"18115":{"compile":[{"time":null,"pod":341,"branch":2251,"statement":7967,"subroutine":389,"condition":441}]},"10296":{"check_pathrestrictions":[{"subroutine":259,"condition":228,"pod":225,"time":null,"branch":1354,"statement":4564}]},"17783":{"check_output_dir":[{"subroutine":382,"condition":439,"pod":335,"time":null,"branch":2223,"statement":7830}]},"977":{"add_attribute":[{"pod":56,"time":null,"branch":75,"statement":319,"subroutine":66,"condition":13}]},"934":{"read_assign_list":[{"time":null,"pod":52,"statement":298,"branch":73,"subroutine":62,"condition":13}]},"426":{"abort_on_error":[{"subroutine":24,"condition":null,"pod":14,"time":null,"branch":12,"statement":87}]},"145":{"store_description":[{"branch":null,"statement":30,"pod":null,"time":null,"condition":null,"subroutine":10}]},"14571":{"__ANON__":[{"branch":1901,"statement":6366,"time":null,"pod":289,"condition":368,"subroutine":328}]},"455":{"internal_err":[{"subroutine":29,"condition":null,"time":null,"pod":19,"statement":101,"branch":13}]},"12612":{"setup_ref2obj":[{"time":null,"pod":253,"branch":1621,"statement":5449,"subroutine":289,"condition":308}]},"1221":{"read_nat":[{"pod":63,"time":null,"statement":439,"branch":118,"subroutine":73,"condition":17}]},"17521":{"print_prt":[{"pod":333,"time":null,"statement":7707,"branch":2184,"subroutine":380,"condition":429}]},"5805":{"remove_duplicates":[{"subroutine":162,"condition":111,"time":null,"pod":145,"statement":2507,"branch":795}]},"7235":{"show_deleted_rules2":[{"subroutine":192,"condition":158,"pod":169,"time":null,"statement":3210,"branch":1004}]},"3383":{"get_orig_prt":[{"statement":1421,"branch":490,"pod":108,"time":null,"condition":65,"subroutine":121}]},"8779":{"cluster_crosslink_routers":[{"condition":200,"subroutine":219,"statement":3896,"branch":1183,"pod":190,"time":null}]},"14806":{"generate_routing_tree1":[{"pod":292,"time":null,"statement":6400,"branch":1908,"subroutine":333,"condition":371}]},"15356":{"print_routes":[{"statement":6633,"branch":1959,"time":null,"pod":299,"condition":386,"subroutine":341}]},"11989":{"link_ipsec":[{"pod":244,"time":null,"statement":5162,"branch":1539,"subroutine":279,"condition":289}]},"12324":{"verify_subject_name":[{"subroutine":285,"condition":302,"time":null,"pod":250,"statement":5313,"branch":1581}]},"3349":{"is_interface":[{"time":null,"pod":99,"branch":485,"statement":1397,"subroutine":112,"condition":64}]},"517":{"read_int":[{"pod":24,"time":null,"branch":16,"statement":123,"subroutine":34,"condition":2}]},"6454":{"__ANON__":[{"branch":917,"statement":2938,"pod":157,"time":null,"condition":131,"subroutine":177}]},"2711":{"read_icmp_type_code":[{"condition":52,"subroutine":87,"statement":1108,"branch":392,"time":null,"pod":77}]},"8450":{"__ANON__":[{"subroutine":216,"condition":187,"time":null,"pod":189,"branch":1158,"statement":3818}]},"1001":{"check_routing":[{"condition":13,"subroutine":68,"branch":79,"statement":334,"pod":58,"time":null}]},"5186":{"get_intf":[{"pod":141,"time":null,"branch":704,"statement":2227,"subroutine":156,"condition":100}]},"9972":{"cluster_zones":[{"pod":216,"time":null,"statement":4423,"branch":1321,"subroutine":250,"condition":226}]},"6285":{"normalize_services":[{"condition":122,"subroutine":173,"branch":864,"statement":2740,"time":null,"pod":155}]},"157":{"fast_mode":[{"condition":null,"subroutine":11,"statement":34,"branch":1,"time":null,"pod":1}]},"307":{"equal":[{"branch":2,"statement":38,"time":null,"pod":2,"condition":null,"subroutine":12}]},"11904":{"path_auto_interfaces":[{"condition":284,"subroutine":278,"statement":5122,"branch":1527,"pod":243,"time":null}]},"557":{"read_ip_prefix_pair":[{"time":null,"pod":28,"branch":22,"statement":142,"subroutine":38,"condition":5}]},"9766":{"inherit_area_nat":[{"time":null,"pod":209,"branch":1303,"statement":4343,"subroutine":243,"condition":223}]},"866":{"check_nat_name":[{"statement":264,"branch":65,"pod":46,"time":null,"condition":13,"subroutine":56}]},"12360":{"expand_crypto":[{"subroutine":288,"condition":303,"pod":252,"time":null,"branch":1588,"statement":5334}]},"5201":{"get_auto_intf":[{"condition":100,"subroutine":157,"statement":2234,"branch":706,"pod":142,"time":null}]},"6662":{"show_unknown_owners":[{"statement":2938,"branch":917,"pod":157,"time":null,"condition":131,"subroutine":179}]},"10166":{"check_routers_in_nested_areas":[{"branch":1344,"statement":4506,"pod":221,"time":null,"condition":226,"subroutine":255}]},"4372":{"link_virtual_interfaces":[{"branch":600,"statement":1836,"time":null,"pod":129,"condition":74,"subroutine":144}]},"5565":{"__ANON__":[{"subroutine":161,"condition":111,"pod":145,"time":null,"branch":795,"statement":2507}]},"42":{"BEGIN":[{"pod":null,"time":null,"statement":21,"branch":null,"subroutine":7,"condition":null}]},"-1":{"__COVER__":[{"pod":342,"time":null,"statement":8010,"branch":2252,"subroutine":390,"condition":441}]},"607":{"read_string":[{"branch":25,"statement":160,"time":null,"pod":34,"condition":5,"subroutine":44}]},"4744":{"mark_disabled":[{"condition":87,"subroutine":150,"statement":2022,"branch":648,"time":null,"pod":135}]},"1038":{"check_model":[{"condition":13,"subroutine":70,"branch":85,"statement":348,"time":null,"pod":60}]},"13851":{"get_zone_cluster_borders":[{"time":null,"pod":275,"statement":5963,"branch":1792,"subroutine":312,"condition":344}]},"326":{"intersect":[{"pod":5,"time":null,"branch":3,"statement":49,"subroutine":15,"condition":null}]},"11861":{"set_auto_intf_from_border":[{"time":null,"pod":242,"statement":5093,"branch":1521,"subroutine":276,"condition":284}]},"13788":{"have_different_marks":[{"condition":342,"subroutine":309,"statement":5926,"branch":1783,"pod":272,"time":null}]},"16335":{"get_split_tunnel_nets":[{"statement":7099,"branch":2073,"time":null,"pod":314,"condition":412,"subroutine":360}]},"950":{"check_assign_pair":[{"subroutine":64,"condition":13,"time":null,"pod":54,"branch":74,"statement":307}]},"2666":{"read_port_range":[{"subroutine":85,"condition":51,"pod":75,"time":null,"branch":381,"statement":1086}]},"17116":{"print_ca_and_tunnel_group_map":[{"pod":327,"time":null,"statement":7492,"branch":2133,"subroutine":374,"condition":423}]},"941":{"check_assign_list":[{"subroutine":63,"condition":13,"time":null,"pod":53,"statement":302,"branch":73}]},"16307":{"prefix_code":[{"condition":412,"subroutine":357,"statement":7087,"branch":2072,"pod":311,"time":null}]},"17544":{"print_acls":[{"subroutine":381,"condition":430,"pod":334,"time":null,"branch":2190,"statement":7721}]},"9226":{"link_implicit_aggregate_to_zone":[{"subroutine":230,"condition":208,"pod":197,"time":null,"branch":1231,"statement":4107}]},"13561":{"__ANON__":[{"statement":5861,"branch":1760,"time":null,"pod":267,"condition":342,"subroutine":303}]},"9235":{"__ANON__":[{"subroutine":231,"condition":208,"pod":198,"time":null,"statement":4146,"branch":1237}]},"3355":{"is_protocolgroup":[{"condition":64,"subroutine":118,"statement":1403,"branch":485,"time":null,"pod":105}]},"9065":{"__ANON__":[{"subroutine":226,"condition":207,"pod":194,"time":null,"statement":4064,"branch":1221}]},"4913":{"check_host_compatibility":[{"branch":669,"statement":2106,"time":null,"pod":138,"condition":91,"subroutine":153}]},"14120":{"optimize_rules":[{"time":null,"pod":278,"branch":1836,"statement":6100,"subroutine":317,"condition":356}]},"15781":{"optimize_nat_networks":[{"condition":403,"subroutine":347,"branch":2004,"statement":6847,"pod":302,"time":null}]},"33":{"BEGIN":[{"condition":null,"subroutine":4,"statement":12,"branch":null,"pod":null,"time":null}]},"30":{"BEGIN":[{"time":null,"pod":null,"branch":null,"statement":3,"subroutine":1,"condition":null}]},"16908":{"print_ezvpn":[{"subroutine":369,"condition":422,"time":null,"pod":322,"statement":7387,"branch":2118}]},"9148":{"add_managed_hosts_to_aggregate":[{"pod":195,"time":null,"statement":4079,"branch":1224,"subroutine":228,"condition":207}]},"2696":{"read_port_ranges":[{"subroutine":86,"condition":52,"pod":76,"time":null,"statement":1100,"branch":390}]},"2827":{"read_simple_protocol":[{"condition":57,"subroutine":92,"statement":1166,"branch":415,"pod":81,"time":null}]},"894":{"check_assign":[{"time":null,"pod":49,"branch":67,"statement":275,"subroutine":59,"condition":13}]},"10425":{"traverse_loop_part":[{"subroutine":260,"condition":230,"pod":226,"time":null,"branch":1371,"statement":4623}]},"569":{"print_ip":[{"condition":5,"subroutine":40,"statement":146,"branch":22,"time":null,"pod":30}]},"9930":{"set_zones":[{"subroutine":249,"condition":224,"time":null,"pod":215,"branch":1316,"statement":4407}]},"7433":{"__ANON__":[{"subroutine":201,"condition":169,"pod":178,"time":null,"branch":1039,"statement":3382}]},"3296":{"__ANON__":[{"subroutine":108,"condition":64,"time":null,"pod":96,"branch":485,"statement":1385}]},"650":{"check_typed_name":[{"condition":6,"subroutine":46,"branch":30,"statement":180,"time":null,"pod":36}]},"7845":{"__ANON__":[{"subroutine":206,"condition":175,"time":null,"pod":182,"branch":1104,"statement":3600}]},"501":{"skip":[{"condition":1,"subroutine":32,"branch":15,"statement":117,"time":null,"pod":22}]},"8786":{"__ANON__":[{"condition":200,"subroutine":220,"branch":1188,"statement":3926,"time":null,"pod":191}]},"6099":{"substitute_auto_intf":[{"time":null,"pod":152,"statement":2639,"branch":829,"subroutine":170,"condition":115}]},"4244":{"link_subnets":[{"branch":583,"statement":1771,"pod":126,"time":null,"condition":73,"subroutine":141}]},"4193":{"__ANON__":[{"condition":73,"subroutine":140,"statement":1771,"branch":583,"time":null,"pod":126}]},"677":{"read_typed_name":[{"branch":37,"statement":194,"pod":37,"time":null,"condition":7,"subroutine":47}]},"3404":{"prepare_prt_ordering":[{"subroutine":122,"condition":66,"time":null,"pod":109,"branch":491,"statement":1427}]},"16315":{"full_prefix_code":[{"subroutine":358,"condition":412,"time":null,"pod":312,"branch":2073,"statement":7092}]},"1008":{"check_managed":[{"branch":81,"statement":337,"pod":59,"time":null,"condition":13,"subroutine":69}]},"14339":{"collect_nat_path":[{"time":null,"pod":283,"statement":6189,"branch":1853,"subroutine":322,"condition":362}]},"17963":{"init_protocols":[{"branch":2251,"statement":7923,"time":null,"pod":339,"condition":440,"subroutine":387}]},"17955":{"show_version":[{"statement":7921,"branch":2251,"time":null,"pod":338,"condition":440,"subroutine":386}]},"12666":{"collect_supernet_dst_rules":[{"condition":308,"subroutine":290,"branch":1621,"statement":5456,"time":null,"pod":254}]},"14500":{"get_route_networks":[{"condition":366,"subroutine":326,"statement":6269,"branch":1875,"time":null,"pod":287}]},"320":{"find_duplicates":[{"subroutine":14,"condition":null,"time":null,"pod":4,"statement":45,"branch":3}]},"13132":{"check_supernet_dst_collections":[{"branch":1693,"statement":5633,"time":null,"pod":261,"condition":326,"subroutine":297}]},"13475":{"check_supernet_rules":[{"statement":5770,"branch":1733,"time":null,"pod":265,"condition":333,"subroutine":301}]},"1797":{"set_pix_interface_level":[{"condition":25,"subroutine":76,"statement":708,"branch":239,"time":null,"pod":66}]},"16758":{"print_cisco_acls":[{"subroutine":366,"condition":416,"time":null,"pod":319,"branch":2100,"statement":7319}]},"29":{"BEGIN":[{"condition":null,"subroutine":null,"statement":null,"branch":null,"time":null,"pod":null}]},"12697":{"find_supernet":[{"condition":310,"subroutine":291,"branch":1626,"statement":5475,"pod":255,"time":null}]},"9749":{"check_useless_nat":[{"pod":208,"time":null,"branch":1301,"statement":4337,"subroutine":242,"condition":223}]},"16118":{"create_general_permit_rules":[{"condition":412,"subroutine":352,"statement":7003,"branch":2048,"time":null,"pod":306}]},"10814":{"get_path":[{"subroutine":268,"condition":234,"pod":234,"time":null,"branch":1406,"statement":4754}]},"17127":{"print_static_crypto_map":[{"pod":328,"time":null,"statement":7497,"branch":2133,"subroutine":375,"condition":423}]},"12007":{"link_crypto":[{"statement":5170,"branch":1541,"pod":245,"time":null,"condition":289,"subroutine":280}]},"811":{"read_intersection":[{"subroutine":52,"condition":13,"pod":42,"time":null,"branch":60,"statement":243}]},"2497":{"read_aggregate":[{"pod":70,"time":null,"branch":346,"statement":999,"subroutine":80,"condition":46}]},"7795":{"distribute_nat_info":[{"branch":1069,"statement":3475,"pod":181,"time":null,"condition":173,"subroutine":205}]},"8190":{"get_nat_network":[{"condition":178,"subroutine":210,"statement":3661,"branch":1114,"pod":184,"time":null}]},"443":{"err_msg":[{"subroutine":27,"condition":null,"time":null,"pod":17,"branch":13,"statement":95}]},"2659":{"read_protocolgroup":[{"branch":381,"statement":1082,"time":null,"pod":74,"condition":51,"subroutine":84}]},"436":{"error_atline":[{"subroutine":26,"condition":null,"pod":16,"time":null,"statement":91,"branch":13}]},"10021":{"set_area":[{"condition":226,"subroutine":252,"statement":4440,"branch":1325,"time":null,"pod":218}]},"17909":{"copy_raw":[{"subroutine":385,"condition":439,"time":null,"pod":337,"statement":7896,"branch":2242}]},"3361":{"print_rule":[{"branch":485,"statement":1405,"time":null,"pod":107,"condition":64,"subroutine":120}]},"971":{"new":[{"time":null,"pod":55,"statement":316,"branch":75,"subroutine":65,"condition":13}]},"8833":{"check_crosslink":[{"pod":191,"time":null,"branch":1188,"statement":3926,"subroutine":221,"condition":200}]},"8969":{"__ANON__":[{"condition":206,"subroutine":224,"statement":4037,"branch":1216,"pod":193,"time":null}]},"13453":{"mark_stateful":[{"pod":264,"time":null,"branch":1728,"statement":5754,"subroutine":300,"condition":332}]},"3492":{"order_proto":[{"condition":68,"subroutine":124,"branch":505,"statement":1460,"time":null,"pod":111}]},"18082":{"init_global_vars":[{"statement":7937,"branch":2251,"time":null,"pod":340,"condition":440,"subroutine":388}]},"9622":{"set_area1":[{"subroutine":239,"condition":216,"pod":205,"time":null,"statement":4287,"branch":1280}]},"7196":{"collect_redundant_rules":[{"condition":156,"subroutine":191,"branch":996,"statement":3187,"time":null,"pod":168}]},"17812":{"print_code":[{"condition":439,"subroutine":383,"statement":7843,"branch":2230,"time":null,"pod":336}]},"3151":{"read_owner":[{"condition":61,"subroutine":103,"branch":456,"statement":1302,"time":null,"pod":92}]},"31":{"BEGIN":[{"statement":6,"branch":null,"time":null,"pod":null,"condition":null,"subroutine":2}]},"315":{"unique":[{"subroutine":13,"condition":null,"pod":3,"time":null,"branch":3,"statement":42}]},"11164":{"cluster_path_mark":[{"statement":4856,"branch":1446,"time":null,"pod":237,"condition":242,"subroutine":271}]},"8951":{"__ANON__":[{"branch":1216,"statement":4037,"pod":193,"time":null,"condition":206,"subroutine":223}]},"4949":{"convert_hosts":[{"statement":2120,"branch":675,"pod":139,"time":null,"condition":94,"subroutine":154}]},"12028":{"gen_tunnel_rules":[{"condition":289,"subroutine":281,"branch":1543,"statement":5179,"time":null,"pod":246}]},"5241":{"check_auto_intf":[{"condition":101,"subroutine":158,"branch":709,"statement":2247,"pod":143,"time":null}]},"3001":{"read_attributed_object":[{"time":null,"pod":88,"branch":441,"statement":1253,"subroutine":99,"condition":61}]},"10217":{"clean_areas":[{"condition":227,"subroutine":256,"statement":4527,"branch":1348,"pod":222,"time":null}]},"14955":{"generate_routing_info":[{"branch":1921,"statement":6453,"time":null,"pod":294,"condition":376,"subroutine":335}]},"9384":{"duplicate_aggregate_to_cluster":[{"time":null,"pod":199,"branch":1247,"statement":4187,"subroutine":233,"condition":210}]},"35":{"BEGIN":[{"branch":null,"statement":18,"pod":null,"time":null,"condition":null,"subroutine":6}]},"10599":{"setpath_obj":[{"branch":1387,"statement":4680,"pod":229,"time":null,"condition":231,"subroutine":263}]},"8212":{"__ANON__":[{"branch":1123,"statement":3690,"pod":186,"time":null,"condition":186,"subroutine":212}]},"6045":{"expand_auto_intf_with_dst_list":[{"subroutine":169,"condition":114,"time":null,"pod":151,"statement":2615,"branch":824}]},"856":{"check_permit_deny":[{"time":null,"pod":45,"statement":260,"branch":64,"subroutine":55,"condition":13}]},"15036":{"find_active_routes":[{"subroutine":336,"condition":376,"pod":295,"time":null,"statement":6495,"branch":1927}]},"2447":{"move_locked_interfaces":[{"subroutine":79,"condition":45,"time":null,"pod":69,"statement":977,"branch":343}]},"365":{"keys_eq":[{"condition":null,"subroutine":19,"branch":7,"statement":69,"pod":9,"time":null}]},"3841":{"link_owners":[{"subroutine":132,"condition":70,"time":null,"pod":118,"branch":531,"statement":1584}]},"17024":{"print_crypto_filter_acl":[{"condition":422,"subroutine":371,"statement":7450,"branch":2124,"time":null,"pod":324}]},"9058":{"mark_managed_local":[{"subroutine":225,"condition":206,"pod":193,"time":null,"statement":4037,"branch":1216}]},"2767":{"gen_protocol_name":[{"time":null,"pod":79,"branch":404,"statement":1134,"subroutine":89,"condition":54}]},"15348":{"print_header":[{"branch":1958,"statement":6628,"time":null,"pod":298,"condition":386,"subroutine":340}]},"5133":{"combine_subnets":[{"condition":99,"subroutine":155,"statement":2207,"branch":700,"time":null,"pod":140}]},"14616":{"__ANON__":[{"statement":6366,"branch":1901,"time":null,"pod":289,"condition":368,"subroutine":329}]},"3216":{"read_netspoc":[{"condition":62,"subroutine":104,"statement":1325,"branch":469,"pod":93,"time":null}]},"16360":{"print_asavpn":[{"branch":2076,"statement":7112,"time":null,"pod":315,"condition":413,"subroutine":361}]},"2896":{"assign_union_allow_user":[{"pod":85,"time":null,"branch":422,"statement":1198,"subroutine":96,"condition":58}]},"4259":{"add_pathrestriction":[{"condition":73,"subroutine":142,"statement":1779,"branch":584,"pod":127,"time":null}]},"4190":{"link_subnet":[{"subroutine":139,"condition":73,"pod":125,"time":null,"statement":1745,"branch":576}]},"9608":{"zone_eq":[{"branch":1280,"statement":4285,"pod":204,"time":null,"condition":214,"subroutine":238}]},"6341":{"propagate_owners":[{"condition":122,"subroutine":174,"branch":871,"statement":2763,"pod":156,"time":null}]},"9112":{"link_reroute_permit":[{"subroutine":227,"condition":207,"pod":194,"time":null,"statement":4064,"branch":1221}]},"596":{"read_name":[{"branch":24,"statement":156,"time":null,"pod":33,"condition":5,"subroutine":43}]},"8254":{"nat_to_loopback_ok":[{"time":null,"pod":186,"statement":3690,"branch":1123,"subroutine":213,"condition":186}]},"3762":{"link_to_owner":[{"subroutine":129,"condition":69,"time":null,"pod":115,"branch":522,"statement":1543}]},"14260":{"split_rules_by_path":[{"subroutine":319,"condition":359,"time":null,"pod":280,"statement":6145,"branch":1849}]},"11653":{"loop_path_walk":[{"branch":1507,"statement":5028,"pod":239,"time":null,"condition":265,"subroutine":273}]},"13866":{"mark_dynamic_host_nets":[{"statement":5969,"branch":1792,"pod":276,"time":null,"condition":345,"subroutine":313}]},"1897":{"read_router":[{"time":null,"pod":68,"statement":749,"branch":253,"subroutine":78,"condition":27}]},"14313":{"group_path_rules":[{"time":null,"pod":282,"branch":1852,"statement":6178,"subroutine":321,"condition":362}]},"17514":{"print_address":[{"pod":332,"time":null,"statement":7705,"branch":2184,"subroutine":379,"condition":428}]},"2813":{"cache_anonymous_protocol":[{"condition":57,"subroutine":91,"branch":414,"statement":1158,"pod":80,"time":null}]},"9919":{"inherit_attributes":[{"branch":1316,"statement":4403,"pod":214,"time":null,"condition":224,"subroutine":248}]},"3872":{"BEGIN":[{"statement":24,"branch":null,"pod":null,"time":null,"condition":null,"subroutine":8}]},"9690":{"inherit_router_attributes":[{"time":null,"pod":206,"branch":1293,"statement":4318,"subroutine":240,"condition":218}]},"786":{"check_hostname":[{"time":null,"pod":40,"statement":234,"branch":57,"subroutine":50,"condition":13}]},"32":{"BEGIN":[{"pod":null,"time":null,"statement":9,"branch":null,"subroutine":3,"condition":null}]},"9731":{"nat_equal":[{"subroutine":241,"condition":222,"time":null,"pod":207,"branch":1298,"statement":4331}]},"14447":{"prepare_nat_commands":[{"subroutine":325,"condition":364,"time":null,"pod":286,"branch":1871,"statement":6240}]},"1278":{"read_network":[{"branch":129,"statement":467,"time":null,"pod":64,"condition":17,"subroutine":74}]},"14246":{"optimize_and_warn_deleted":[{"pod":279,"time":null,"statement":6138,"branch":1849,"subroutine":318,"condition":359}]},"928":{"read_list_or_null":[{"branch":72,"statement":295,"pod":51,"time":null,"condition":13,"subroutine":61}]},"3278":{"__ANON__":[{"time":null,"pod":96,"branch":485,"statement":1385,"subroutine":107,"condition":64}]},"7020":{"collect_unenforceable":[{"pod":164,"time":null,"statement":3100,"branch":962,"subroutine":187,"condition":144}]},"7296":{"collect_log":[{"condition":158,"subroutine":194,"statement":3246,"branch":1011,"time":null,"pod":171}]},"15891":{"__ANON__":[{"subroutine":350,"condition":412,"pod":305,"time":null,"statement":6954,"branch":2037}]},"15699":{"__ANON__":[{"statement":6847,"branch":2004,"pod":302,"time":null,"condition":403,"subroutine":344}]},"11719":{"path_walk":[{"time":null,"pod":240,"statement":5043,"branch":1510,"subroutine":274,"condition":271}]},"3348":{"is_router":[{"branch":485,"statement":1396,"pod":98,"time":null,"condition":64,"subroutine":111}]},"13694":{"mark_secondary":[{"subroutine":305,"condition":342,"time":null,"pod":268,"statement":5865,"branch":1760}]},"5824":{"expand_group":[{"condition":111,"subroutine":163,"statement":2520,"branch":797,"pod":146,"time":null}]},"4064":{"link_interfaces":[{"branch":560,"statement":1700,"pod":122,"time":null,"condition":73,"subroutine":136}]},"6686":{"set_service_owner":[{"pod":158,"time":null,"statement":2949,"branch":919,"subroutine":180,"condition":132}]},"16666":{"print_acl_prefix":[{"condition":416,"subroutine":363,"branch":2097,"statement":7263,"time":null,"pod":316}]},"3526":{"__ANON__":[{"pod":113,"time":null,"statement":1523,"branch":519,"subroutine":126,"condition":69}]},"1069":{"host_as_interface":[{"statement":363,"branch":90,"time":null,"pod":61,"condition":14,"subroutine":71}]},"2775":{"__ANON__":[{"subroutine":90,"condition":57,"time":null,"pod":80,"branch":414,"statement":1158}]},"802":{"read_complement":[{"subroutine":51,"condition":13,"pod":41,"time":null,"statement":240,"branch":59}]},"7400":{"expand_services":[{"statement":3297,"branch":1019,"pod":176,"time":null,"condition":165,"subroutine":199}]},"3509":{"order_ranges":[{"condition":68,"subroutine":125,"branch":505,"statement":1465,"time":null,"pod":112}]},"3356":{"is_autointerface":[{"subroutine":119,"condition":64,"time":null,"pod":106,"statement":1404,"branch":485}]},"17444":{"print_interface":[{"statement":7663,"branch":2171,"pod":331,"time":null,"condition":425,"subroutine":378}]},"12067":{"link_tunnels":[{"branch":1548,"statement":5197,"time":null,"pod":247,"condition":293,"subroutine":282}]},"2864":{"check_protocol_modifiers":[{"condition":57,"subroutine":93,"statement":1184,"branch":421,"time":null,"pod":82}]},"15756":{"__ANON__":[{"statement":6847,"branch":2004,"time":null,"pod":302,"condition":403,"subroutine":346}]},"6127":{"classify_protocols":[{"time":null,"pod":153,"branch":831,"statement":2654,"subroutine":171,"condition":115}]},"5843":{"expand_group_in_rule":[{"condition":111,"subroutine":164,"statement":2531,"branch":799,"pod":147,"time":null}]},"10794":{"setpath":[{"time":null,"pod":233,"branch":1406,"statement":4747,"subroutine":267,"condition":234}]},"13901":{"check_dynamic_nat_rules":[{"condition":347,"subroutine":314,"statement":5993,"branch":1798,"pod":277,"time":null}]},"11525":{"path_mark":[{"statement":4992,"branch":1494,"time":null,"pod":238,"condition":263,"subroutine":272}]},"13805":{"mark_secondary_rules":[{"pod":274,"time":null,"statement":5940,"branch":1786,"subroutine":311,"condition":343}]},"7565":{"set_natdomain":[{"time":null,"pod":178,"branch":1039,"statement":3382,"subroutine":202,"condition":169}]},"3347":{"is_network":[{"condition":64,"subroutine":110,"branch":485,"statement":1395,"pod":97,"time":null}]},"14774":{"get_route_path":[{"branch":1906,"statement":6391,"time":null,"pod":291,"condition":370,"subroutine":332}]},"7419":{"set_policy_distribution_ip":[{"condition":165,"subroutine":200,"branch":1019,"statement":3308,"time":null,"pod":177}]},"10532":{"optimize_pathrestrictions":[{"condition":231,"subroutine":262,"statement":4659,"branch":1384,"pod":228,"time":null}]},"585":{"read_owner_pattern":[{"condition":5,"subroutine":42,"branch":23,"statement":152,"pod":32,"time":null}]},"6837":{"convert_hosts_in_rules":[{"subroutine":183,"condition":139,"pod":160,"time":null,"branch":942,"statement":3024}]},"12248":{"crypto_behind":[{"branch":1569,"statement":5288,"time":null,"pod":248,"condition":302,"subroutine":283}]},"14543":{"set_routes_in_zone":[{"subroutine":327,"condition":367,"pod":288,"time":null,"statement":6285,"branch":1880}]},"479":{"skip_space_and_comment":[{"subroutine":30,"condition":null,"pod":20,"time":null,"branch":15,"statement":109}]},"1841":{"check_no_in_acl":[{"branch":244,"statement":725,"time":null,"pod":67,"condition":27,"subroutine":77}]},"7637":{"distribute_nat1":[{"subroutine":203,"condition":173,"time":null,"pod":179,"statement":3415,"branch":1049}]},"7329":{"expand_rules":[{"condition":159,"subroutine":197,"branch":1013,"statement":3261,"pod":174,"time":null}]},"13724":{"mark_primary":[{"pod":269,"time":null,"statement":5883,"branch":1767,"subroutine":306,"condition":342}]},"396":{"context":[{"time":null,"pod":11,"statement":76,"branch":9,"subroutine":21,"condition":null}]},"833":{"read_time_val":[{"branch":61,"statement":249,"pod":43,"time":null,"condition":13,"subroutine":53}]},"3658":{"expand_splitted_protocol":[{"branch":519,"statement":1523,"pod":113,"time":null,"condition":69,"subroutine":127}]},"16903":{"gen_crypto_rules":[{"subroutine":368,"condition":422,"pod":321,"time":null,"statement":7385,"branch":2118}]},"14358":{"distribute_nat_to_device":[{"statement":6199,"branch":1857,"time":null,"pod":284,"condition":362,"subroutine":323}]},"507":{"check_int":[{"condition":2,"subroutine":33,"branch":15,"statement":119,"pod":23,"time":null}]},"5886":{"__ANON__":[{"pod":148,"time":null,"statement":2553,"branch":810,"subroutine":165,"condition":111}]},"10104":{"find_area_subset_relations":[{"subroutine":254,"condition":226,"pod":220,"time":null,"branch":1337,"statement":4478}]},"1110":{"read_host":[{"time":null,"pod":62,"statement":387,"branch":94,"subroutine":72,"condition":14}]},"342":{"aref_delete":[{"branch":4,"statement":58,"pod":7,"time":null,"condition":null,"subroutine":17}]},"2582":{"read_area":[{"condition":46,"subroutine":82,"branch":363,"statement":1041,"time":null,"pod":72}]},"13527":{"gen_reverse_rules1":[{"subroutine":302,"condition":335,"pod":266,"time":null,"branch":1742,"statement":5798}]},"2906":{"read_service":[{"pod":86,"time":null,"statement":1205,"branch":422,"subroutine":97,"condition":58}]},"4491":{"is_redundany_group":[{"subroutine":145,"condition":79,"time":null,"pod":130,"statement":1897,"branch":613}]},"1495":{"read_interface":[{"subroutine":75,"condition":21,"time":null,"pod":65,"statement":557,"branch":168}]},"6439":{"__ANON__":[{"time":null,"pod":157,"branch":917,"statement":2938,"subroutine":176,"condition":131}]},"16699":{"print_acl_suffix":[{"condition":416,"subroutine":364,"branch":2098,"statement":7287,"time":null,"pod":317}]},"15850":{"distribute_rule":[{"time":null,"pod":304,"branch":2010,"statement":6882,"subroutine":349,"condition":407}]},"374":{"warn_msg":[{"subroutine":20,"condition":null,"pod":10,"time":null,"branch":9,"statement":74}]},"16888":{"generate_acls":[{"pod":320,"time":null,"branch":2117,"statement":7377,"subroutine":367,"condition":422}]},"2646":{"read_group":[{"condition":51,"subroutine":83,"statement":1074,"branch":380,"time":null,"pod":73}]},"34":{"BEGIN":[{"branch":null,"statement":15,"time":null,"pod":null,"condition":null,"subroutine":5}]},"5307":{"expand_group1":[{"condition":103,"subroutine":159,"branch":718,"statement":2286,"time":null,"pod":144}]},"14896":{"generate_routing_tree":[{"pod":293,"time":null,"branch":1918,"statement":6434,"subroutine":334,"condition":376}]},"2885":{"read_protocol":[{"statement":1192,"branch":422,"pod":84,"time":null,"condition":58,"subroutine":95}]},"9799":{"inherit_attributes_from_area":[{"pod":210,"time":null,"statement":4354,"branch":1305,"subroutine":244,"condition":223}]},"12776":{"find_matching_supernet":[{"condition":313,"subroutine":293,"statement":5511,"branch":1638,"pod":257,"time":null}]},"15686":{"print_pix_static":[{"condition":398,"subroutine":343,"branch":1996,"statement":6795,"time":null,"pod":301}]},"4181":{"link_routers":[{"pod":124,"time":null,"branch":576,"statement":1740,"subroutine":138,"condition":73}]},"14423":{"add_networks":[{"condition":363,"subroutine":324,"branch":1868,"statement":6227,"pod":285,"time":null}]}},"pod":[[145,"store_description"],[157,"fast_mode"],[307,"equal"],[315,"unique"],[320,"find_duplicates"],[326,"intersect"],[332,"max"],[342,"aref_delete"],[356,"aref_eq"],[365,"keys_eq"],[374,"warn_msg"],[396,"context"],[409,"at_line"],[416,"check_abort"],[426,"abort_on_error"],[431,"set_abort_immediately"],[436,"error_atline"],[443,"err_msg"],[450,"syntax_err"],[455,"internal_err"],[479,"skip_space_and_comment"],[493,"check"],[501,"skip"],[507,"check_int"],[517,"read_int"],[524,"check_ip"],[537,"read_ip"],[545,"read_ip_prefix"],[557,"read_ip_prefix_pair"],[562,"gen_ip"],[569,"print_ip"],[574,"read_identifier"],[585,"read_owner_pattern"],[596,"read_name"],[607,"read_string"],[621,"read_union"],[650,"check_typed_name"],[677,"read_typed_name"],[706,"read_extended_name"],[775,"read_user_id"],[786,"check_hostname"],[802,"read_complement"],[811,"read_intersection"],[833,"read_time_val"],[840,"add_description"],[856,"check_permit_deny"],[866,"check_nat_name"],[876,"split_typed_name"],[883,"check_flag"],[894,"check_assign"],[912,"read_list"],[928,"read_list_or_null"],[934,"read_assign_list"],[941,"check_assign_list"],[950,"check_assign_pair"],[971,"new"],[977,"add_attribute"],[986,"check_radius_attributes"],[1001,"check_routing"],[1008,"check_managed"],[1038,"check_model"],[1069,"host_as_interface"],[1110,"read_host"],[1221,"read_nat"],[1278,"read_network"],[1495,"read_interface"],[1797,"set_pix_interface_level"],[1841,"check_no_in_acl"],[1897,"read_router"],[2447,"move_locked_interfaces"],[2497,"read_aggregate"],[2547,"check_router_attributes"],[2582,"read_area"],[2646,"read_group"],[2659,"read_protocolgroup"],[2666,"read_port_range"],[2696,"read_port_ranges"],[2711,"read_icmp_type_code"],[2739,"read_proto_nr"],[2767,"gen_protocol_name"],[2813,"cache_anonymous_protocol"],[2827,"read_simple_protocol"],[2864,"check_protocol_modifiers"],[2881,"read_typed_name_or_simple_protocol"],[2885,"read_protocol"],[2896,"assign_union_allow_user"],[2906,"read_service"],[2990,"read_pathrestriction"],[3001,"read_attributed_object"],[3079,"read_isakmp"],[3117,"read_ipsec"],[3124,"read_crypto"],[3151,"read_owner"],[3216,"read_netspoc"],[3237,"read_file"],[3266,"read_file_or_dir"],[3332,"show_read_statistics"],[3347,"is_network"],[3348,"is_router"],[3349,"is_interface"],[3350,"is_host"],[3351,"is_subnet"],[3352,"is_area"],[3353,"is_zone"],[3354,"is_group"],[3355,"is_protocolgroup"],[3356,"is_autointerface"],[3361,"print_rule"],[3383,"get_orig_prt"],[3404,"prepare_prt_ordering"],[3466,"order_icmp"],[3492,"order_proto"],[3509,"order_ranges"],[3658,"expand_splitted_protocol"],[3713,"order_protocols"],[3762,"link_to_owner"],[3778,"link_to_real_owner"],[3797,"expand_watchers"],[3841,"link_owners"],[3933,"link_policy_distribution_point"],[3958,"link_general_permit"],[4004,"link_areas"],[4064,"link_interfaces"],[4119,"check_interface_ip"],[4181,"link_routers"],[4190,"link_subnet"],[4244,"link_subnets"],[4259,"add_pathrestriction"],[4273,"link_pathrestrictions"],[4372,"link_virtual_interfaces"],[4491,"is_redundany_group"],[4499,"check_ip_addresses"],[4599,"link_topology"],[4628,"disable_behind"],[4681,"check_bridged_networks"],[4744,"mark_disabled"],[4890,"split_ip_range"],[4906,"owner_eq"],[4913,"check_host_compatibility"],[4949,"convert_hosts"],[5133,"combine_subnets"],[5186,"get_intf"],[5201,"get_auto_intf"],[5241,"check_auto_intf"],[5307,"expand_group1"],[5805,"remove_duplicates"],[5824,"expand_group"],[5843,"expand_group_in_rule"],[5893,"check_unused_groups"],[5917,"expand_protocols"],[5978,"split_protocols"],[6045,"expand_auto_intf_with_dst_list"],[6099,"substitute_auto_intf"],[6127,"classify_protocols"],[6177,"normalize_service_rules"],[6285,"normalize_services"],[6341,"propagate_owners"],[6662,"show_unknown_owners"],[6686,"set_service_owner"],[6803,"apply_src_dst_modifier"],[6837,"convert_hosts_in_rules"],[6918,"add_rules"],[6948,"get_zone"],[6998,"add_managed_hosts"],[7020,"collect_unenforceable"],[7085,"show_unenforceable"],[7130,"warn_useless_unenforceable"],[7141,"show_deleted_rules1"],[7196,"collect_redundant_rules"],[7235,"show_deleted_rules2"],[7276,"warn_unused_overlaps"],[7296,"collect_log"],[7306,"check_log"],[7320,"normalize_log"],[7329,"expand_rules"],[7391,"print_rulecount"],[7400,"expand_services"],[7419,"set_policy_distribution_ip"],[7565,"set_natdomain"],[7637,"distribute_nat1"],[7783,"distribute_nat"],[7795,"distribute_nat_info"],[8089,"invert_nat_set"],[8162,"adjust_crypto_nat"],[8190,"get_nat_network"],[8208,"check_subnets"],[8254,"nat_to_loopback_ok"],[8281,"by_name"],[8288,"find_subnets_in_zone"],[8555,"find_subnets_in_nat_domain"],[8779,"cluster_crosslink_routers"],[8833,"check_crosslink"],[8936,"get_managed_local_clusters"],[9058,"mark_managed_local"],[9112,"link_reroute_permit"],[9148,"add_managed_hosts_to_aggregate"],[9193,"link_aggregate_to_zone"],[9226,"link_implicit_aggregate_to_zone"],[9292,"link_aggregates"],[9384,"duplicate_aggregate_to_cluster"],[9421,"get_any"],[9477,"get_cluster_aggregates"],[9490,"set_zone1"],[9563,"set_zone_cluster"],[9608,"zone_eq"],[9622,"set_area1"],[9690,"inherit_router_attributes"],[9731,"nat_equal"],[9749,"check_useless_nat"],[9766,"inherit_area_nat"],[9799,"inherit_attributes_from_area"],[9812,"inherit_nat_to_subnets_in_zone"],[9874,"inherit_nat_in_zone"],[9901,"cleanup_after_inheritance"],[9919,"inherit_attributes"],[9930,"set_zones"],[9972,"cluster_zones"],[9993,"prepare_area_borders"],[10021,"set_area"],[10046,"set_areas"],[10104,"find_area_subset_relations"],[10166,"check_routers_in_nested_areas"],[10217,"clean_areas"],[10230,"set_zone"],[10251,"check_virtual_interfaces"],[10296,"check_pathrestrictions"],[10425,"traverse_loop_part"],[10468,"apply_pathrestriction_optimization"],[10532,"optimize_pathrestrictions"],[10599,"setpath_obj"],[10696,"set_loop_cluster"],[10729,"find_dists_and_loops"],[10756,"process_loops"],[10794,"setpath"],[10814,"get_path"],[10914,"cluster_path_mark1"],[11087,"cluster_navigation"],[11164,"cluster_path_mark"],[11525,"path_mark"],[11653,"loop_path_walk"],[11719,"path_walk"],[11850,"single_path_walk"],[11861,"set_auto_intf_from_border"],[11904,"path_auto_interfaces"],[11989,"link_ipsec"],[12007,"link_crypto"],[12028,"gen_tunnel_rules"],[12067,"link_tunnels"],[12248,"crypto_behind"],[12292,"verify_asa_vpn_attributes"],[12324,"verify_subject_name"],[12347,"verify_asa_trustpoint"],[12360,"expand_crypto"],[12612,"setup_ref2obj"],[12666,"collect_supernet_dst_rules"],[12697,"find_supernet"],[12723,"find_zone_network"],[12776,"find_matching_supernet"],[12817,"check_supernet_in_zone"],[12901,"check_supernet_src_rule"],[13056,"check_supernet_dst_rule"],[13132,"check_supernet_dst_collections"],[13170,"find_smaller_prt"],[13224,"check_for_transient_supernet_rule"],[13453,"mark_stateful"],[13475,"check_supernet_rules"],[13527,"gen_reverse_rules1"],[13661,"gen_reverse_rules"],[13694,"mark_secondary"],[13724,"mark_primary"],[13750,"mark_local_secondary"],[13774,"get_zones"],[13788,"have_different_marks"],[13798,"have_set_and_equal_marks"],[13805,"mark_secondary_rules"],[13851,"get_zone_cluster_borders"],[13866,"mark_dynamic_host_nets"],[13901,"check_dynamic_nat_rules"],[14120,"optimize_rules"],[14246,"optimize_and_warn_deleted"],[14260,"split_rules_by_path"],[14300,"remove_unenforceable_rules"],[14313,"group_path_rules"],[14339,"collect_nat_path"],[14358,"distribute_nat_to_device"],[14423,"add_networks"],[14447,"prepare_nat_commands"],[14500,"get_route_networks"],[14543,"set_routes_in_zone"],[14705,"add_path_routes"],[14742,"add_end_routes"],[14774,"get_route_path"],[14806,"generate_routing_tree1"],[14896,"generate_routing_tree"],[14955,"generate_routing_info"],[15036,"find_active_routes"],[15065,"fix_bridged_hops"],[15089,"check_and_convert_routes"],[15348,"print_header"],[15356,"print_routes"],[15604,"print_nat1"],[15686,"print_pix_static"],[15781,"optimize_nat_networks"],[15834,"print_nat"],[15850,"distribute_rule"],[16001,"add_router_acls"],[16118,"create_general_permit_rules"],[16133,"distribute_general_permit"],[16197,"rules_distribution"],[16227,"address"],[16297,"ios_route_code"],[16307,"prefix_code"],[16315,"full_prefix_code"],[16325,"print_acl_placeholder"],[16335,"get_split_tunnel_nets"],[16360,"print_asavpn"],[16666,"print_acl_prefix"],[16699,"print_acl_suffix"],[16712,"print_iptables_acls"],[16758,"print_cisco_acls"],[16888,"generate_acls"],[16903,"gen_crypto_rules"],[16908,"print_ezvpn"],[16994,"print_crypto_acl"],[17024,"print_crypto_filter_acl"],[17047,"print_crypto_map_attributes"],[17090,"print_tunnel_group"],[17116,"print_ca_and_tunnel_group_map"],[17127,"print_static_crypto_map"],[17205,"print_dynamic_crypto_map"],[17255,"print_crypto"],[17444,"print_interface"],[17514,"print_address"],[17521,"print_prt"],[17544,"print_acls"],[17783,"check_output_dir"],[17812,"print_code"],[17909,"copy_raw"],[17955,"show_version"],[17963,"init_protocols"],[18082,"init_global_vars"],[18115,"compile"]],"file":"lib/Netspoc/Compiler/Pass1.pm"}
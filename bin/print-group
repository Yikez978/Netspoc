#!/usr/bin/perl -CSDAL

=head1 NAME

print-group - Show elements of a netspoc group definition

=head1 SYNOPSIS

print-group [options] FILE|DIR 'group:name,...'

=head1 DESCRIPTION

This program prints the elements of a netspoc group definition.  By default it
shows a line with IP/prefixlen and name for each element separated by tab
character. Group is a simple group, some automatic group, or a union or
intersection or complement of simpler groups.

=head1 OPTIONS

=over 4

=item B<-nat> name

Uses network:name as reference when resolving IP address in a NAT environment.

=item B<-unused> 

Show only elements not used in any rules.

=item B<-name>

Show only name of elements

=item B<-ip>

Show only IP address of elements

=item B<-owner>

Show owner of elements.

=item B<-quiet>

Don't print progress messages.

=item B<-help>

Prints a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 COPYRIGHT AND DISCLAIMER

(c) 2014 by Heinz Knutzen <heinz.knutzen@googlemail.com>

This program uses module Netspoc.pm,
a Network Security Policy Compiler,
http://hknutzen.github.com/Netspoc

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

=cut

use strict;
use warnings;
use Netspoc;
use Getopt::Long;
use Pod::Usage;

our $VERSION = '3.063'; # VERSION: inserted by DZP::OurPkgVersion

####################################################################
# Argument processing
####################################################################

my $nat_net;
my $show_unused;
my $show_ip;
my $show_name;
my $show_owner;
my $quiet;
my $help;
my $man;
GetOptions ( 'nat=s'  => \$nat_net,
	     'unused' => \$show_unused,
	     'ip!'    => \$show_ip,
	     'name!'  => \$show_name,
             'owner!' => \$show_owner,
             'quiet!' => \$quiet,
	     'help|?' => \$help,
	     man => \$man,
	     ) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;
$show_ip or $show_name or $show_ip = $show_name = 1;

my $in_path = shift @ARGV or pod2usage(2);
my $name = shift @ARGV or pod2usage(2);

####################################################################
# Main program
####################################################################

my $file_config = &read_config($in_path);
&set_config($file_config, { verbose => !$quiet });

# Parse group definition(s).
$Netspoc::input = $name;
$Netspoc::current_file = 'group definition';
$Netspoc::line = 1;
my @parsed;
Netspoc::skip_space_and_comment();
while (1) {
    push @parsed, Netspoc::read_intersection;
    Netspoc::skip_space_and_comment;
    last if pos $Netspoc::input == length $Netspoc::input;
    Netspoc::check(',');
}

# Read and process Netspoc configuration file or directory.
&read_file_or_dir($in_path);
&link_topology();
&mark_disabled();
&set_zone();
&distribute_nat_info();
&setpath();
Netspoc::find_subnets_in_zone();
Netspoc::convert_hosts();
if ($show_owner) {
    Netspoc::propagate_owners();
}
&abort_on_error();

# Find network for resolving NAT addresses.
my $no_nat_set;
if($nat_net) {
    my $net = $networks{$nat_net} or 
	die "Unknown network:$nat_net of option '-n'\n";
    $no_nat_set = $net->{nat_domain}->{no_nat_set};
}

# Expand group definition(s).
my $elements = 
    Netspoc::expand_group_in_rule(\@parsed, 'print-group', 'no_combine');

# Find unused objects by marking used objects.
if ($show_unused) {
    &order_protocols();
    &expand_services(0);
    &abort_on_error();
    for my $type ('deny', 'supernet', 'permit') {
	for my $rule (@{ $expanded_rules{$type} }) {
	    for my $where ('src', 'dst') {
		my $obj = $rule->{$where};
		if (is_host $obj) {
		    for my $subnet (@{ $obj->{subnets} }) {
			$subnet->{is_used} = 1;
		    }
                    $obj->{network}->{is_used} = 1;
		}
                elsif (is_interface $obj) {
		    $obj->{is_used} = 1;
                    $obj->{network}->{is_used} = 1;
                }                    
		else {
		    $obj->{is_used} = 1;
		}
	    }
	}
    }
    $elements = [ grep { not($_->{is_used}) } @$elements ];
}

# Collect IP address, mask and name.
my @info = map { my $v = is_autointerface($_) 
                       ? [ -1, -1] 
                       : Netspoc::address($_, $no_nat_set); 
		 $v->[2] = $_->{name};
                 $v->[3] = $_->{owner}->{name} if $show_owner && $_->{owner};
		 $v } @$elements;

abort_on_error();

# Sort by IP address and print results.
for my $aref (sort { $a->[0] <=> $b->[0] } @info) {
    my ($ip, $mask, $name, $owner) = @$aref;
    my @result;
    if ($show_ip) {
        if (-1 == $ip) {
            push @result, 'unknown';
        }
        else {
            my $prefix = Netspoc::mask2prefix($mask);
            push @result, (print_ip($ip) . ($prefix == 32 ? '' : "/$prefix"));
        }
    }
    if ($show_name) {
        push @result, $name;
    }
    if ($show_owner) {
        $owner ||= 'none';
        push @result, $owner;
    }
    print join("\t", @result), "\n";
}



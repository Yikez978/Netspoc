#!/usr/bin/perl
# print-group
#
# Prints the contents of a netspoc group as lines of ip or ip/prefixlen.
#
# Uses module Netspoc.pm,
# a Network Security Policy Compiler
# http://netspoc.berlios.de
# (c) 2009 by Heinz Knutzen <heinzknutzen@users.berlios.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

use strict;
use warnings;
use FindBin;
use lib $FindBin::Bin;
use Netspoc;
use locale;


####################################################################
# Argument processing
####################################################################
sub usage() {
    die "Usage: $0 [-n nat-net ] {in-file | in-directory} group-name\n";
}

####################################################################
# Main program
####################################################################

my $nat_net;
if($ARGV[0] eq '-n') {
    shift;
    $nat_net = shift or usage;
}

my $config = shift @ARGV or usage;

# Read and process Netspoc configuration file or directory.
&read_file_or_dir($config);
&link_topology();
&mark_disabled();
&distribute_nat_info();
&setany();
&setpath();
Netspoc::convert_hosts();

my $nat_map;
if($nat_net) {
    my $net = $networks{$nat_net} or 
	err_msg "Unknown network:$nat_net of option '-n'";
    $nat_map = $net->{nat_domain}->{nat_map};
}

my $name = shift or usage;
my $elements = Netspoc::expand_group([['group', $name]], $0, 'convert_hosts');
my @pairs = map { Netspoc::address($_, $nat_map) } @$elements;
for my $pair (sort { $a->[0] <=> $b->[0] } @pairs) {
    my ($ip, $mask) = @$pair;
    my $prefix = Netspoc::mask2prefix($mask);
    print print_ip($ip);
    if($prefix != 32) {
	print "/$prefix";
    }
    print "\n";
}
	


#!/usr/bin/perl

=head1 NAME

cut-netspoc - Print parts of a netspoc configuration to stdout

=head1 SYNOPSIS

cut-netspoc [options] FILE|DIR [service:name] ...

=head1 DESCRIPTION

Reads a Netspoc configuration and prints parts of this configuration
to STDOUT. If one or more services are given as argument, only those
parts are printed, that are referenced by given serices. If no service
is given, it acts as if all services are specified. This is useful to
eliminate all disabled parts of the topology.

=head1 OPTIONS

=item B<-q>

Quiet, don't print status messages.

=item B<-help>

Prints a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 COPYRIGHT AND DISCLAIMER

(c) 2015 by Heinz Knutzen <heinz.knutzen@googlemail.com>

http://hknutzen.github.com/Netspoc

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

=cut

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use Netspoc::Compiler::GetArgs qw(read_config combine_config);
use Netspoc::Compiler::Common;
use Netspoc::Compiler::Pass1;
use Encode qw(decode_utf8);

our $VERSION = '4.6'; # VERSION: inserted by DZP::OurPkgVersion

####################################################################
# Argument processing
####################################################################
my $quiet;
my $help;
my $man;
GetOptions ( 'quiet!' => \$quiet,
	     'help|?' => \$help,
	     man => \$man,
	     ) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

my $path = shift @ARGV;

# Give each source part an index to preserve original order.
my $src_index = 1;

# Enhanced version of read_netspoc, which stores source code of each
# global definition.
sub read_netspoc_with_src {
    my $pre    = pos $input;
    my $object = &read_netspoc();
    my $post   = pos $input;
    $object->{src_code} = substr $input, $pre, $post - $pre;
    $object->{src_index} = $src_index++;

#    print STDERR "$object->{name} $pre-$post\n";
    return $object;
}

sub change_attribute_src_code {
    my ($attr, $object, $replace) = @_;
    my $code = $object->{src_code};

    # Find attribute outside of comment.
    if (not $code =~ m/ ^[^#]* \Q$attr\E (?=[\s;=#]) /gmx) {

        # Don't try to change unknown attribute.
        info("Can't find '$attr' in $object->{name}");
        return;
    }
    my $start = pos($code) - length($attr);

    # Helper functions to parse attribute value.
    my $skip_space_and_comment = sub {
        $code =~ /\G (?: \s* | (?: [#] .* (?: \n | $ )))*/gcx;
    };
    my $check = sub {
        my ($string) = @_;
        $skip_space_and_comment->();
        return $code =~ /\G\Q$string\E/gc;
    };
    my $read_token = sub {
        $skip_space_and_comment->();
        $code =~ /\G [^=,;\s#]* /gcx;
    };
    my $read_attr_body;
    $read_attr_body = sub {
        if ($check->(';')) {

            # Attribute has no value; finished.
        }
        elsif ($check->('=')) {

            # Read complex value.
            if ($check->('{')) {
                while (1) {
                    last if $check->('}');
                    $read_token->();
                    $read_attr_body->();
                }
            }

            # Read comma separated list of values.
            else {
                while (1) {
                    last if $check->(';');
                    $read_token->();
                    $check->(',');
                }
            }
        }
    };
    $read_attr_body->();
    my $end = pos($code);

    # Remove leading white space and trailing line break.
    if (not $replace) {

        # Find trailing line break.
        $code =~ /\G [ \t]* (?: [#] .* )? (?: \n | $ )/gcx;
        $end = pos($code);

        # Find leading white space.
        pos($code) = $start;
        if ($code =~ /([ \t]*)\G/g) {
            $start -= length($1);
        }
    }
    my $len = $end - $start;
    substr($object->{src_code}, $start, $len) = $replace;
}

sub remove_attribute_src_code {
    my ($attr, $object) = @_;
    change_attribute_src_code($attr, $object, '');
}

# This function is called by path_walk to mark all managed routers
# on path from src to dst of $rule with attribute {is_used}.
sub mark_topology {
    my ($rule, $in_intf, $out_intf) = @_;
    my $router = ($in_intf || $out_intf)->{router};
    $router->{is_used} = 1;
#    debug "Used $router->{name}";
    if ($in_intf) {
        $in_intf->{is_used} = 1;
        $in_intf->{network}->{is_used} = 1;
    }
    if ($out_intf) {
        $out_intf->{is_used} = 1;
        $out_intf->{network}->{is_used} = 1;
    }
    return;
}

# Mark unmanaged routers and networks
# between marked and managed parts of topology.
sub path_unmanaged {
    my ($obj, $in_interface) = @_;
    return 1 if $obj->{is_used};
    return if $obj->{managed} || $obj->{semi_managed};
    return if $obj->{active_path};

    local $obj->{active_path} = 1;
    my $result = 0;
    for my $interface (@{ $obj->{interfaces} }) {
        next if $interface eq $in_interface;
        my $next = $interface->{is_network($obj) ? 'router' : 'network'};
	if (path_unmanaged($next, $interface)) {
	    $obj->{is_used} = 1;
            $interface->{is_used} = 1;
#	    debug "Marked $interface->{name}";
	    $result = 1;
	}
    }
    return $result;
}

sub mark_unmanaged {
    for my $network (values %networks) {
	next if not $network->{is_used};
#        debug "Path unmanaged $network->{name}";
	for my $interface (@{ $network->{interfaces} }) {
	    my $router = $interface->{router};
#	    debug "Try $router->{name} $interface->{name}";
	    if (path_unmanaged($router, $interface)) {
                $interface->{is_used} = 1;
#                debug "Marked $interface->{name}";
            }                
	}
    }
    return;
}	

sub mark_path {
    my ($src, $dst) = @_;
    my $rule = {src => $src, dst => $dst, prt => {}};
#    debug "Path $src->{name} $dst->{name}";
    &single_path_walk($rule, \&mark_topology);
    return;
}

# We can't use %aggregates from Netspoc.pm because it only holds named
# aggregates. But we need unnamed aggregates like any:[network:XX]
# as well.
my @all_zones;
sub get_zones {
    my %all_zones;
    for my $network (values %networks) {
        next if $network->{disabled};
        my $zone = $network->{zone};
        $all_zones{$zone} = $zone;
    }
    @all_zones = values %all_zones;
    return;
}
	
####################################################################
# Main program
####################################################################

my $file_config = &read_config($path);
$config = combine_config($file_config, 
                    {time_stamps => 1, max_errors => 9999, verbose => !$quiet});
init_global_vars();
&show_version();

# Read and process netspoc configuration data.
# Remember source code of each global definition.
&read_file_or_dir($path, \&read_netspoc_with_src);

my %name2var = ( service => \%services);

if (@ARGV) {

    # Read names of services from command line.
    for my $arg (map { decode_utf8($_, 1) } @ARGV) {
        my ($type, $name) = split_typed_name $arg;
        my $ref = $name2var{$type} or pod2usage(2);
        my $thing = $ref->{$name} or fatal_err "Unknown $arg";
        $thing->{is_used} = 1;
    }

    # Delete unwanted global definitions.
    for my $ref (values %name2var) {
        for my $name (keys %$ref) {
            unless ($ref->{$name}->{is_used}) {
                delete $ref->{$name};
            }
        }
    }
}

# Retain all services, if no argument is given.
# Only remove disabled parts.

&order_protocols();
&link_topology();
&mark_disabled();
&set_zone();
&distribute_nat_info();
&setpath();
find_subnets_in_zone();
link_reroute_permit();
normalize_services();
expand_services();

# Process rules of services.
sub process_rules {
    my ($expanded_rules) = @_;
    for my $type ('deny', 'permit') {
	for my $rule (@{ $expanded_rules->{$type} }) {
	    for my $where ('src', 'dst') {

		# path_walk only handles managed routers and interfaces.
		# Mark all objects additionally here.
		my $obj = $rule->{$where};
		my $type = ref $obj;
		if ($type eq 'Network') {
#		    debug "Used $obj->{name}";
		    $obj->{is_used} = 1;
		}
		elsif ($type eq 'Host') {
		    $obj->{is_used} = 1;
#		    debug "Used $obj->{name}";
		    $obj->{network}->{is_used} = 1;
		}
		elsif ($type eq 'Interface') {
		    $obj->{is_used} = 1;
#		    debug "Used $obj->{name}";
		    $obj->{router}->{is_used} = 1;
		    $obj->{network}->{is_used} = 1;
		}
		else {
		    fatal_err "Unexpected type $type";
		}		    
	    }
	    &single_path_walk($rule, \&mark_topology);
	    if($rule->{orig_prt}){
		$rule->{orig_prt}->{is_used} = 1;
	    } else {
		$rule->{prt}->{is_used} = 1;
	    }
	}
    }
    return;
}

# Mark parts of topology which are referenced by rules of services.
process_rules(\%expanded_rules);

# Mark networks inside marked aggregates.
get_zones();
for my $zone (@all_zones) {
    for my $aggregate (values %{ $zone->{ipmask2aggregate} }) {
        $aggregate->{is_used} or next;
#        debug "Marking networks of $aggregate->{name} in $zone->{name}";
        for my $network (@{ $aggregate->{networks} }) {
            $network->{is_used} = 1;
        }
    }
}

# Mark zones having attributes that influence their networks.
for my $network (values %networks) {
    $network->{is_used} or next;
    my $zone = $network->{zone};
    my $aggregate0 = $zone->{ipmask2aggregate}->{'0/0'};

    # Simplifies test below.
    $aggregate0->{owner} = $zone->{owner};

    grep { $zone->{$_} } qw(has_unenforceable nat no_in_acl) or next;
    $aggregate0->{is_used} = 1;
    $zone->{is_used} = 1;
}

for my $zone (@all_zones) {
    $zone->{is_used} or next;
    if (my $link = $zone->{link}) {
        $link->{is_used} = 1;
    }
}

# Mark areas having attributes that influence their networks.
for my $zone (@all_zones) {
    $zone->{is_used} or next;
    for my $area (values %{ $zone->{areas} }) {
        $area->{nat} or next;
        $area->{is_used} = 1;
    }
}

# Mark interfaces which are referenced by used areas.
for my $area (values %areas) {
    $area->{is_used} or next;
    if (my $anchor = $area->{anchor}) {
        $anchor->{is_used} = 1;
    }
    else {
        for my $interface (@{ $area->{border} }, @{ $area->{inclusive_border} }) 
        {
            $interface->{is_used} = 1;
            $interface->{router}->{is_used} = 1;
            $interface->{network}->{is_used} = 1;
        }
    }
}

# Mark networks having attributes that influence their subnets.
for my $network (values %networks) {
    $network->{is_used} or next;
    my $up = $network->{up} or next;
    $up->{nat} or next;
    $network->{zone} eq $up->{zone} or next;
    $up->{is_used} = 1;
}

# Call this after topology has been marked.
&expand_crypto();

# 1. call to mark unmanaged parts of topology.
# Needed to mark unmanaged crypto routers.
mark_unmanaged();

# Mark bridge and bridged networks.
for my $network (values %networks) {
    $network->{is_used} or next;
    $network->{bridged} or next;
    for my $bridge_in (@{ $network->{interfaces} }) {
        $bridge_in->{ip} eq 'bridged' or next;
        $bridge_in->{is_used} = 1;
        my $bridge = $bridge_in->{router};
        $bridge->{is_used} = 1;
        for my $bridge_out (@{ $bridge->{interfaces} }) {
            if ($bridge_out->{hardware}->{name} eq 'device' && 
                $bridge->{model}->{class} eq 'ASA') {
                $bridge_out->{is_used} = 1;
            }
            elsif ($bridge_out->{ip} eq 'bridged') {
                $bridge_out->{is_used} = 1;
                $bridge_out->{network}->{is_used} = 1;
            }
        }                                           
    }
}

# Mark fragments of marked crypto routers.
for my $router (values %routers) {
    $router->{is_used} or next;
    for my $interface (get_intf($router)) {
        my $fragment = $interface->{router};
        next if $fragment eq $router;
#        debug "Fragment: $fragment->{name}";
        $fragment->{is_used} = 1;
    }
}

for my $router (values %routers) {
    $router->{is_used} or next;
    for my $interface (get_intf($router)) {
        $interface->{is_used} or next;

	# Remove unused networks referenced in attribute reroute_permit.
	if (my $networks = $interface->{reroute_permit}) {
            my @used_networks = grep { $_->{is_used} } @$networks;
            if (not @used_networks) {
                remove_attribute_src_code('reroute_permit', $router);
            }
            elsif(@$networks != @used_networks) {
                my $used_net_names = 
                    join ', ', map { $_->{name} } @used_networks;
                my $new_code = "reroute_permit = $used_net_names;";
                change_attribute_src_code('reroute_permit', $router, $new_code);
            }
	}
 
	# Mark crypto definitions which are referenced by
	# already marked interfaces.  
	my $mark_crypto = sub {
	    my ($crypto) = @_;
	    $crypto->{is_used} = 1;
	    my $type = $crypto->{type};
	    $type->{is_used} = 1;
	    $type->{key_exchange}->{is_used} = 1;
	};
	
	if ($interface->{ip} eq 'tunnel') {
	    $mark_crypto->($interface->{crypto});
            my $peers = $interface->{peers};
            my $real_intf = $interface->{real_interface};
            for my $peer (@$peers) {
                mark_path($real_intf, $peer->{real_interface}); 
            }

            # Mark possibly unused crypto, referenced at hub.
            if (my $crypto_list = $real_intf->{hub}) {
                $mark_crypto->($_) for @$crypto_list;
            }
	}

        # Mark crypto, referenced at hub without any tunnels.
        if (my $crypto_list = $interface->{hub}) {
            $mark_crypto->($_) for @$crypto_list;
        }

        # Mark networks referenced by interfaces 
        # implictly marked by expand_group.
        if ($interface->{is_used}) {
            $interface->{network}->{is_used} = 1;
        }
    }

    # Remove unused hosts referenced in attribute radius_servers.
    if (my $hosts = $router->{radius_servers}) {
	for my $host (@$hosts) {
            my $used_host_names = 
                join ', ', map { $_->{name} } grep { $_->{is_used} } @$hosts;
            my $new_code = "radius_servers = $used_host_names;";
            change_attribute_src_code('radius_servers', $router, $new_code);
	}
    }
}

# 2. call to mark unmanaged parts of topology.
# Needed to mark crypto path of unmanaged crypto routers.
mark_unmanaged();

# Remove definitions of unused hosts from networks.
for my $network (values %networks) {
    $network->{is_used} or next;
    my $hosts = $network->{hosts};

    # Retain at least one host of network with ID hosts.
    if ($network->{has_id_hosts}) {
        if (not grep { $_->{is_used} } @$hosts) {
            $hosts->[0]->{is_used} = 1;
        }
    }

    for my $host (@$hosts) {
        next if $host->{is_used};
        my $name = $host->{name};

        # Remove trailing network name of ID-host.
        if ($name =~ /^host:id:/) {
            $name =~ s/ [.] [^.]+ $ //x;
        }
        remove_attribute_src_code($name, $network);
    }
}

# Remove definitions of unused interfaces from routers
for my $router (values %routers) {
    $router->{is_used} or next;
    for my $interface (get_intf($router)) {
        next if $interface->{is_used};
        next if $interface->{ip} eq 'tunnel';

        # Rename "interface:router.network" to "interface:network".
        my $name = $interface->{name};
        $name =~ s/ : [^.]+ [.] /:/x;

        # Rename "interface:network.virtual" to "interface:network".
        # (internally we use virtual interface as main interface.)
        $name =~ s/[.]virtual$//;

        remove_attribute_src_code($name, $router);
    }
}

# Remove one or multiple occurences of attribute 'owner'.
# Multiple from embedded host or interface definiton.
for my $object (values %networks, values %routers,
                values %areas, values %aggregates)
{
    $object->{is_used} or next;
    $object->{src_code} or next;
    while ($object->{src_code} =~ /^[^#]*owner *=/m) {
        remove_attribute_src_code('owner', $object);
    }
}

# Remove attribute 'sub_owner'.
for my $service (values %services) {
    $service->{sub_owner} or next;
    remove_attribute_src_code('sub_owner', $service);
}    

# Remove attribute 'router_attributes' 
# with 'owner', 'policy_distribution_point' and 'general_permit'.
for my $area (values %areas) {
    $area->{is_used} or next;
    $area->{router_attributes} or next;
    remove_attribute_src_code('router_attributes', $area);
}

# Remove attribute 'policy_distribution_point'
for my $router (values %routers) {
    $router->{is_used} or next;
    $router->{policy_distribution_point} or next;
    remove_attribute_src_code('policy_distribution_point', $router);
}

sub by_index {
    return $a->{src_index} <=> $b->{src_index}
}

# Print marked parts of netspoc configuration.
# Routers and networks have been marked by mark_topology.
# Protocols have been marked while @expanded_rules have been processed above.
# Groups and protocolroups objects have been marked during expand_services.
for my $object ( sort by_index map { $_->{src_index} ? ($_) : () }
    values %routers,
    values %networks,
    values %aggregates,
    values %areas,
    values %groups,
    values %protocols,
    values %protocolgroups,
    values %isakmp,
    values %ipsec,
    values %crypto,
  )
{
    if ($object->{is_used}) {

        # There are some internal objects without src_code.
        if (my $src_code = $object->{src_code}) {
            print $src_code, "\n";
        }
    }
}

# Source of pathrestrictions can't be used literally,
# but must be reconstructed from internal data structure.
for my $restrict (sort by_index values %pathrestrictions) {
    my $used = 0;
    for my $interface (@{ $restrict->{elements} }) {
        if ($interface->{is_used}) {
            $used++;
        }
        else {
            $interface = undef;
        }
    }
    next if $used < 2;
    print "$restrict->{name} =\n";
    for my $interface (@{ $restrict->{elements} }) {
        next unless $interface;
        next if $interface->{ip} eq 'tunnel';
        print " $interface->{name},\n";
    }
    print ";\n";
}

# All unwanted services have already been deleted above.
for my $service (sort by_index values %services) {
    print $service->{src_code}, "\n";
}

#!/usr/bin/perl
# cut-netspoc
# Print parts of a netspoc configuration to stdout.
# http://hknutzen.github.com/Netspoc
# (c) 2012 by Heinz Knutzen <heinz.knutzen@googlemail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

use strict;
use warnings;
use FindBin;
use lib $FindBin::Bin;
use Netspoc;
#use open ':locale';
use locale;

# VERSION: inserted by DZP::OurPkgVersion

####################################################################
# Argument processing
####################################################################
sub usage() {
    die "Usage: $0 {in-file | in-directory} service:name ...\n";
}

# Enhanced version of read_netspoc, which stores source code of each
# global definition.
sub read_netspoc_with_src () {
    my $pre    = pos $Netspoc::input;
    my $object = &read_netspoc();
    my $post   = pos $Netspoc::input;
    $object->{src_code} = substr $Netspoc::input, $pre, $post - $pre;

#    print STDERR "$object->{name} $pre-$post\n";
    return $object;
}


# Not only networks on path, but all connected networks need to be marked
# to get a valid topology.
sub mark_adjacent_networks {
    my ($router) =@_;
    for my $interface (@{ $router->{interfaces} }) {
        $interface->{network}->{is_used} = 1;
    }
}

# This function is called by path_walk to mark all managed routers and
# adjacent networks on path from src to dst of $rule with attribute {is_used}.
sub mark_topology( $$$ ) {
    my ($rule, $in_intf, $out_intf) = @_;
    my $router = ($in_intf || $out_intf)->{router};
    $router->{is_used} = 1;
#    Netspoc::debug "Used $router->{name}";
    mark_adjacent_networks($router);
}

# Mark unmanaged routers and adjacent networks 
# between marked and managed parts of topology.
sub path_unmanaged {
    my ($obj, $in_interface) = @_;
    return 1 if $obj->{is_used};
    return 0 if $obj->{managed};
    return 0 if $obj->{is_checked};

    $obj->{is_checked} = 1;
    my $result = 0;
    for my $interface (@{ $obj->{interfaces} }) {
        next if $interface eq $in_interface;
        my $next = $interface->{is_network($obj) ? 'router' : 'network'};
	if (path_unmanaged($next, $interface)) {
	    $obj->{is_used} = 1;
#	    Netspoc::debug "Marked $obj->{name}";
	    if (is_router($obj)) {
		mark_adjacent_networks($obj);
	    }
	    $result = 1;
	}
    }
    return $result;
}

sub mark_unmanaged {
    for my $network (values %networks) {
	next if not $network->{is_used};
	for my $interface (@{ $network->{interfaces} }) {
	    my $router = $interface->{router};
	    path_unmanaged($router, $interface);
	}
    }
}	
	
####################################################################
# Main program
####################################################################

my $config = shift @ARGV or usage;
&show_version();

# Read and process netspoc configuration data.
# Remember source code of each global definition.
&read_file_or_dir($config, \&read_netspoc_with_src);

my %name2var = ( service => \%services, 

                 # Still support old syntax.
                 policy  =>\%services);

# Read names of services from command line.
for my $arg (@ARGV) {
    my ($type, $name) = split_typed_name $arg;
    my $ref = $name2var{$type} or usage;
    my $thing = $ref->{$name} or fatal_err "Unknown $arg";
    $thing->{is_used} = 1;
}

# Delete unwanted global definitions.
for my $ref (values %name2var) {
    for my $name (keys %$ref) {
	unless ($ref->{$name}->{is_used}) {
	    delete $ref->{$name};
	}
    }
}

&order_protocols();
&link_topology();
&mark_disabled();
&distribute_nat_info();
&set_zone();
&setpath();
&find_subnets();
&expand_services(1);
&abort_on_error();

# Process rules of services.
sub process_rules ( $ ) {
    my ($expanded_rules) = @_;
    for my $type ('deny', 'supernet', 'permit') {
	for my $rule (@{ $expanded_rules->{$type} }) {
	    for my $where ('src', 'dst') {

		# path_walk only handles managed routers and adjacent networks.
		# Mark all objects additionally here.
		my $obj = $rule->{$where};
		my $type = ref $obj;
		if ($type eq 'Network') {
#		    Netspoc::debug "Used $obj->{name}";
		    $obj->{is_used} = 1;
		}
		elsif ($type eq 'Subnet') {
		    $obj->{network}->{is_used} = 1;
#		    Netspoc::debug "Used $obj->{network}->{name}";
		}
		elsif ($type eq 'Interface') {
		    my $router = $obj->{router};
#		    Netspoc::debug "Used $router->{name}";
		    $router->{is_used} = 1;
		    mark_adjacent_networks($router);
		}
		else {
		    fatal_err "Unexpected type $type";
		}		    
	    }
	    &path_walk($rule, \&mark_topology);
	    if($rule->{orig_prt}){
		$rule->{orig_prt}->{is_used} = 1;
	    } else {
		$rule->{prt}->{is_used} = 1;
	    }
	}
    }
}

# Mark parts of topology which are referenced by rules of services.
process_rules \%expanded_rules;

# Mark interfaces which are referenced by areas.
for my $area (values %areas) {
    if ($area->{is_used}) {
        if (my $anchor = $area->{anchor}) {
            $anchor->{is_used} = 1;
        }
        else {
            for my $interface (@{ $area->{border} }) {
                mark_topology undef, $interface, undef;
            }
        }
    }
}

# Mark networks inside aggregates.
for my $zone (values %zones) {
    for my $aggregate (values %{ $zone->{ipmask2aggregate} }) {
        if($aggregate->{is_used}) {
            for my $network (@{ $aggregate->{networks} }) {
                $network->{is_used} = 1;
            }
        }
    }
}

# Mark unmanaged parts of topology.
mark_unmanaged();

# Mark hosts inside networks.
for my $network (values %networks) {
    if($network->{is_used}) {
	for my $host (@{ $network->{hosts} }) {
	    $host->{is_used} = 1;
	}
    }
}

# Call this after topology has been marked.
&expand_crypto();

for my $router (values %routers) {
    next unless $router->{is_used};
    for my $interface (@{$router->{interfaces}}) {

	# Mark networks referenced in attribute reroute_permit.
	if ($interface->{reroute_permit}) {
	    for my $net (@{ $interface->{reroute_permit} }) {
		my $rule = {src => $interface, dst => $net, prt => {}};
		&path_walk($rule, \&mark_topology);
	    }
	}
 
	# Mark crypto definitions which are referenced by
	# already marked interfaces.  
	my $mark_crypto = sub {
	    my ($crypto) = @_;
	    $crypto->{is_used} = 1;
	    my $type = $crypto->{type};
	    $type->{is_used} = 1;
	    $type->{key_exchange}->{is_used} = 1;
	};
	
	if (my $aref = $interface->{hub}) {
	    $mark_crypto->($_) for @$aref;
	}
	elsif (my $crypto = $interface->{spoke}) {
	    $mark_crypto->($crypto);
	}
    }

    # Mark radius servers referenced in attribute radius_servers.
    if ($router->{radius_servers}) {
	for my $host (@{$router->{radius_servers}}) {

	    # Take an arbitrary interface and get the interface 
	    # in direction to $host.
	    my ($src) = 
		Netspoc::path_auto_interfaces($router->{interfaces}->[0], 
					     $host);
	    my $rule = {src => $src, dst => $host, prt => {}};
	    &path_walk($rule, \&mark_topology);
	}
    }
}

for my $obj (values %areas, values %Netspoc::aggregates,values %networks, values %hosts,
	     values %routers) 
{
    next if not $obj->{is_used};
    if (my $owner = $obj->{owner}) {
	$owner->{is_used} = 1;
    }
}
for my $area (values %areas) {
    next if not $area->{is_used};
    my $router_attributes = $area->{router_attributes} or next;
    if (my $owner = $router_attributes->{owner}) {
	$owner->{is_used} = 1;
    }
}
    
# Print marked parts of netspoc configuration.
# Routers and networks have been marked by mark_topology.
# Protocols have been marked while %expanded_rules have been processed above.
# Groups and protocolroups objects have been marked during expand_services.
for my $object (
    values %routers,
    values %networks,
    values %Netspoc::aggregates,
    values %areas,
    values %groups,
    values %protocols,
    values %protocolgroups,
    values %isakmp,
    values %ipsec,
    values %crypto,
    values %owners
  )
{
    if ($object->{is_used}) {

        # There are some internal objects without src_code.
        if (my $src_code = $object->{src_code}) {
            print $src_code, "\n";
        }
    }
}

# Source of pathrestrictions can't be used literally,
# but must be reconstructed from internal data structure.
for my $restrict (values %pathrestrictions) {
    my $used = 0;
    for my $interface (@{ $restrict->{elements} }) {
        if ($interface->{router}->{is_used}) {
            $used++;
        }
        else {
            $interface = undef;
        }
    }
    next if $used < 2;
    print "$restrict->{name} =\n";
    for my $interface (@{ $restrict->{elements} }) {
        next unless $interface;
        print " $interface->{name},\n";
    }
    print ";\n";
}

# Find global NAT definitions which are bound by used interfaces.
if (keys %global_nat) {
    my %used_nat;
    for my $interface (values %interfaces) {
        $interface->{router}->{is_used} or next;
        my $nat_tag = $interface->{bind_nat} or next;
        $used_nat{$nat_tag} = 1;
    }
    for my $nat_tag (keys %global_nat) {
        next unless $used_nat{$nat_tag};
        print $global_nat{$nat_tag}->{src_code}, "\n";
    }
}

# All unwanted services have already been deleted above.
for my $service (values %services) {
    print $service->{src_code}, "\n";
}

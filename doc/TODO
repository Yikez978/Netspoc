ToDo list for NetSPoC, a Network Security Policy Compiler

- Problem with stateless routers and optimization:
  We use IP > TCP during optimization, but we don't automatically
  allow answer packets for IP rules.
  Possible solution: IP rules let pass traffic in both directions. 

- Comments for ACL entries with 'any' as src or dst are sometimes
  wrong / misleading.

- Separate NetSPoC functionality into a perl module. This would allow
  to build some interesting query tools:
  - policy query: give a description of a data packet and answer if it
    is allowed to pass with the current policy.
  - Which rules are applicable to a network object?
  - What are the managed routers between A and B?

- Extend language to easily denote all managed devices
  (e.g. router:[managed])

- Extend language to easily denote the interface 'on the right side'
  to src or dst (e.g. interface:router.[auto])

- Refine code generation for 'deny any' rules. Currently, not only the
  access from / to a security domain is restricted, but for any
  network object on the path to dst / from src.

- Make NetSPoC aware of network address translation
  - dynamic with pools
  - static for hosts and networks

- In a second step generate NAT code

- Description and code generation for IPSec tunnels

- Give a graphical representation of the topology, for example using
  the graphviz library (http://www.graphviz.org/).

- Allow the network topology to have loops.
  This has low priority for me.
  I think this change would introduce much more complicated
  algorithms. 

Done:

- Code generation for IOS routers without firewall feature set

- Currently netspoc dies when generating routing entries for unnumered
  interfaces. Workaround: don't use unnumered interfaces at managed
  routers.

- Restrict access to interfaces of managed routers. Currently, if a
  user is allowed to access a network behind a managed router, she gets
  access to the outgoing interface as well.

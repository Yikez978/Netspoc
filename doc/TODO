ToDo list for NetSPoC, a Network Security Policy Compiler

- Documentation: add examples for network address translation and path
  restriction. 

- We are working on a HTML interface for NetSPoC including a
  graphical representation of the topology, using the graphviz library
  (http://www.graphviz.org/).

- Generate NAT code for other devices than PIX.

- Check for duplicate IP addresses or subnet relation even for
  translated IP addresses.

- Add documentation for loops / cyclic graphs

- Description and code generation for IPSec tunnels

- With multiple interfaces at one hardware interface, there might be
  missing automatically generated deny rules for 'any' rules or they
  may be in wrong order.

- Currently there is a small problem if an interface is used as
  destination of a rule and if there is a path restriction at the same
  interface: access to the interface would be denied, because the
  interface is located inside the router behind the restricting
  interface, but routing for this interface would be generated because
  the interface having an IP of it's network, is located before the
  restricting interface.
  Possible solution: Generate only a host route for an interface.

- If we have a loop with only three routers and a rule with src inside
  the loop and dst an 'any' object outside of the loop, netspoc
  generates useless deny rules which try to prevent src accessing its
  own security domain.

- For a rule with src outside of a loop and dst inside or behind the
  loop, we get duplicate ACLs at the router, where packets from src
  enter the loop.

- Too many duplicate 'any' acls for routers inside a loop.
  Disable optimization for 'any' rules inside of loops more selectivly.

- Build test case for 'any_dst_group' optimization

- Refine code generation for 'deny any' rules. Currently, not only the
  access from / to a security domain is restricted, but for all
  network objects on the path to dst / from src.

============================================================================
Done:
============================================================================

- Add support for nested loops and path restrictions

- Support of virtual IP addresses for HSRP / VRRP

- Extend language to easily denote all managed devices
  (e.g. interface:[managed].[all])

- Extend language to easily denote the interface 'on the right side'
  to src or dst (e.g. interface:router.[auto])

- Make NetSPoC aware of network address translation
  - dynamic with pools
  - static for hosts and networks

- Problem with stateless routers and optimization:
  We use IP > TCP during optimization, but we don't automatically
  allow answer packets for IP rules. This may result in missing 
  ACLs for TCP answer packets after optimization.
  Solution: rules for stateless routers are handled separately internally.

- Separate NetSPoC functionality into a perl module. This would allow
  to build some interesting query tools:
  - policy query: give a description of a data packet and answer if it
    is allowed to pass with the current policy.
  - Which rules are applicable to a network object?
  - What are the managed routers between A and B?

- Allow the network topology to have loops.

- Code generation for IOS routers without firewall feature set

- Currently netspoc dies when generating routing entries for unnumered
  interfaces. Workaround: don't use unnumered interfaces at managed
  routers.

- Restrict access to interfaces of managed routers. Currently, if a
  user is allowed to access a network behind a managed router, she gets
  access to the outgoing interface as well.

- Comments for ACL entries with 'any' as src or dst are sometimes
  wrong / misleading.

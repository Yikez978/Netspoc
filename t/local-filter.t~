#!/usr/bin/perl

use strict;
use Test::More;
use Test::Differences;
use lib 't';
use Test_Netspoc;

my ($title, $in, $out1, $head1, $out2, $head2, $out3, $head3);

############################################################
$title = 'Non matching mask of filter_only attribute';
############################################################

$in = <<END;
network:n1 = { ip = 10.62.1.32/27; }
router:d32 = {
 model = ASA;
 managed = local;
 filter_only =  10.62.0.0/8;
 interface:n1 = { ip = 10.62.1.33; hardware = vlan1; }
}
END

$out1 = <<END;
Error: IP and mask don't match at line 5 of STDIN
Error: network:n1 doesn't match attribute 'filter_only' of router:d32
END

eq_or_diff(compile_err($in), $out1, $title);

############################################################
$title = 'Local network doesn\'t match filter_only attribute';
############################################################

$in =~ s'/8'/24';

$out1 = <<END;
Error: network:n1 doesn't match attribute 'filter_only' of router:d32
END

eq_or_diff(compile_err($in), $out1, $title);

############################################################
$title = "Missing attribute 'filter_only'";
############################################################

$in =~ s/filter_only/#filter_only/;

$out1 = <<'END';
Error: Missing attribut 'filter_only' for router:d32
Error: network:n1 doesn't match attribute 'filter_only' of router:d32
END

eq_or_diff(compile_err($in), $out1, $title);

############################################################
$title = 'NAT not allowed';
############################################################

$in = <<END;
network:n1 = { ip = 10.62.1.32/27; nat:n1 = { ip = 10.62.3.0; } }
router:d32 = {
 model = ASA;
 managed = local;
 filter_only =  10.62.0.0/19;
 interface:n1 = { ip = 10.62.1.33; hardware = vlan1; }
 interface:n2 = { ip = 10.62.2.1; hardware = vlan2; bind_nat = n1;}
}
network:n2 = { ip = 10.62.2.0/27; }
END

$out1 = <<END;
Error: Attribute 'bind_nat' is not allowed at interface of router:d32 with 'managed = local'
END

eq_or_diff(compile_err($in), $out1, $title);

############################################################
$title = "Cluster must have identical values in attribute 'filter_only'";
############################################################

$in = <<END;
network:n1 = { ip = 10.62.1.32/27; }

router:d32 = {
 model = ASA;
 managed = local;
 filter_only =  10.62.240.0/22, 10.62.0.0/19;
 interface:n1 = { ip = 10.62.1.33; hardware = vlan1; }
 interface:vlan14 = { ip = 10.62.242.1; hardware = outside; }
}

network:vlan14 = { ip = 10.62.242.0/29; }

router:d12 = {
 model = NX-OS;
 managed = local;
 filter_only =  10.62.240.0/21, 10.62.0.0/19,;
 interface:vlan14 = { ip = 10.62.242.2; hardware = vlan14; }
  interface:n2 = { ip = 10.62.2.1; hardware = vlan2; }
}

network:n2 = { ip = 10.62.2.0/27; }
END

$out1 = <<END;
Error: router:d12 and router:d32 must have identical values in attribute 'filter_only'
END

eq_or_diff(compile_err($in), $out1, $title);

############################################################
$title = "Aggregates must match attribute 'filter_only'";
############################################################

# aggregate 0/0 is ignored, because it is available in every zone.

$in = <<END;
any:n1 = { link = network:n1; }
any:n1_10_62 = { ip = 10.62.0.0/16; link = network:n1; }
network:n1 = { ip = 10.62.1.32/27; }
router:d32 = {
 model = ASA;
 managed = local;
 filter_only =  10.62.0.0/19;
 interface:n1 = { ip = 10.62.1.33; hardware = vlan1; }
}
END

$out1 = <<END;
Error: any:n1_10_62 doesn\'t match attribute \'filter_only\' of router:d32
END

eq_or_diff(compile_err($in), $out1, $title);

############################################################
done_testing;

__DATA__

network:n1 = { ip = 10.62.1.32/27; }
network:n2 = { ip = 10.62.2.0/27; }

router:d32 = {
 model = ASA;
 managed = local;
 filter_only =  10.62.240.0/21, 10.62.0.0/19,;
 interface:n1 = { ip = 10.62.1.33; hardware = vlan1; }
 interface:n2 = { ip = 10.62.2.1; hardware = vlan2; }
 interface:trans = { ip = 10.62.241.1; hardware = outside; }
}

network:trans = { ip = 10.62.241.0/29; }

router:d31 = {
 model = ASA;
 managed;
 interface:trans = { ip = 10.62.241.2; hardware = inside; }
 interface:extern = { ip = 10.125.3.1; hardware = outside; }
}

network:extern = { ip = 10.125.3.0/24; }

service:test = {
# disabled;
 user = network:n1;
 permit src = user;
        dst = network:n2, network:trans;
        prt = tcp 80;
}

service:extern = {
 user = network:n1, network:n2;
 permit src = user;
        dst = network:extern;
        prt = tcp 25;
 permit src = network:extern;
        dst = user;
        prt = tcp 25;
}

global:permit = icmp;

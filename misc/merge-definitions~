#!/usr/bin/perl
# merge-definitions
# Merge two files containing global definitions.
# http://hknutzen.github.com/Netspoc
# (c) 2014 by Heinz Knutzen <heinz.knutzen@googlemail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

use strict;
use warnings;
use FindBin;
use lib $FindBin::Bin;
use Netspoc;
#use open ':locale';
use locale;

# VERSION: inserted by DZP::OurPkgVersion

####################################################################
# Argument processing
####################################################################
sub usage {
    die "Usage: $0 file1 file2\n";
}

# Enhanced version of read_netspoc, which stores source code of each
# global definition.
sub read_netspoc_with_src {
    my $pre    = pos $Netspoc::input;
    my $object = &Netspoc::read_netspoc();
    my $post   = pos $Netspoc::input;
    $object->{src_code} = substr($Netspoc::input, $pre, $post - $pre) . "\n";

#    print STDERR "$object->{name} $pre-$post\n";
    return $object;
}
	
####################################################################
# Main program
####################################################################

my $file1 = shift @ARGV or usage;
my $file2 = shift @ARGV or usage;
@ARGV and usage;


# Read and process netspoc configuration data.
# Remember source code of each global definition.
&Netspoc::read_file_or_dir($file1, \&read_netspoc_with_src);
my %d1 = %Netspoc::definitions;
%Netspoc::definitions = ();
&Netspoc::read_file_or_dir($file2, \&read_netspoc_with_src);
my %d2 = %Netspoc::definitions;

my %seen;
for my $type (sort keys %d1) {
    my $h1 = $d1{$type};
    my $h2 = $d2{$type};
    for my $name (sort keys %$h1) {
        my $v1 = $h1->{$name};
        my $code1 = $v1->{src_code} or next;
        if ($h2) {
            if (my $v2 = $h2->{$name}) {
                $seen{$v2} = 1;
                my $code2 = $v2->{src_code};
                my $copy1 = $code1;
                my $copy2 = $code2;
                $copy1 =~ s/\s//g;
                $copy2 =~ s/\s//g;
                if ($copy1 eq $copy2) {
                    print STDERR "Identical $type:$name\n";
                    print $code1;
                }
                else {
                    print STDERR "Duplicate $type:$name\n";
                    print $code1;
                    print $code2;
                }
            }
        }
        else {
            print $code1;
        }
    }
}
for my $type (sort keys %d2) {
    my $h2 = $d2{$type};
    for my $name (sort keys %$h2) {
        my $v2 = $h2->{$name};
        $seen{$v2} and next;
        my $code2 = $v2->{src_code} or next;
        print $code2;
    }
} 

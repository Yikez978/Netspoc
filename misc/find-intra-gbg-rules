#!/usr/bin/perl
# find-intra-gbg-rules
# Part of Netspoc, a Network Security Policy Compiler
# http://netspoc.berlios.de
# (c) 2009 by Heinz Knutzen <heinzknutzen@users.berlios.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# $Id$

use strict;
use warnings;
use File::Spec ();
use File::Basename ();

# Get directory of this script.
# If this script is called setuid it is running in taint mode.
# We can untaint the directory part of the script name,
# because it is set by calling C wrapper script 
# and can't be modified by the calling user.
my $path;
BEGIN {
    $path = File::Basename::dirname(File::Spec->rel2abs($0));
    $path =~ /(.*)/;	# untaint
    $path = $1;
}
use lib $path;
use Netspoc;

####################################################################
# Main program
####################################################################

my($in_path, $out_dir) = &read_args();
&show_version();
&read_file_or_dir($in_path);
#&show_read_statistics();
&order_services();
&link_topology();
&mark_disabled();
&distribute_nat_info();
&find_subnets();
&setany();
&setpath();
&expand_policies(1);	# 1: expand hosts to subnets
       
Netspoc::info("Find intra GBG rules");
my %gbg2policy;
my %gbgpolicy;
for my $type ('deny', 'any', 'permit') {
    for my $rule (@{$expanded_rules{$type}}) {
	my($src, $dst) = @{$rule}{qw(src dst)};
	next if is_autointerface $src;
	next if is_autointerface $dst;
	my $src_any = Netspoc::get_any2($src);
	my $dst_any = Netspoc::get_any2($dst);
	my $src_areas = $src_any->{areas} or next;
	my $dst_areas = $dst_any->{areas} or next;
	my %areas;
	my @same;
	my $policy = $rule->{rule}->{policy};
	my $pname = $policy->{name};
	next if $pname =~ /ping_local/;
	for my $area (values %$src_areas) {
	    my $name = $area->{name};
	    $name =~ /^area:g\d/ or next;
	    $areas{$name} = $name;
	    $gbgpolicy{$pname} = 1;
	}
	for my $area (values %$dst_areas) {
	    my $name = $area->{name};
	    $name =~ /^area:g\d/ or next;
	    if($areas{$name}) {
		$gbg2policy{$name}->{$pname} = 1;
	    }
	    $gbgpolicy{$pname} = 1;
	}
    }
}

for my $gbg (sort { my ($an) = ($a =~ /(\d+)/); 
		    my ($bn) = ($b =~ /(\d+)/); 
		    $an <=> $bn; }
	     keys %gbg2policy) 
{
    my $count = keys %{ $gbg2policy{$gbg} };
    print "$gbg $count\n";
    for my $policy (sort keys %{ $gbg2policy{$gbg} }) {
	print " $policy\n";
    }
}

my $count = keys %gbgpolicy;
print "GBG policies: $count\n";



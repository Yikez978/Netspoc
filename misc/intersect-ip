#!/usr/bin/perl
# intersect-ip
#
# Reads two lists of ip addresses
# first list: ip or ip/prefix
# second list: ip, ip1-ip2, ip/prefix
#
# Outputs all addresses of list2, which are contained in an element of list1.

use strict;
use warnings;
use FindBin;
use lib $FindBin::Bin;
use Netspoc;

####################################################################
# Argument processing
####################################################################
sub usage() {
    die "Usage: $0 [-v] ip-list1 [ip-list2]\n";
}

my $vice_versa;
if($ARGV[0] eq '-v') {
    shift;
    $vice_versa = 1;
}

####################################################################
# Argument to read_file; reads ip, ip-ip or ip/prefixlen
# Each address is stored as an anonymous hash, 
# thus we can add additional attributes later.
####################################################################
my @objects;
sub read_ip_stream() {
    my $ip = read_ip();
    if (Netspoc::check('-')) {
	my $ip2 = read_ip();
	my $orig = print_ip($ip).'-'.print_ip($ip2);
	$ip <= $ip2 or err_msg "Illegal range: $orig";
	my @ip_mask = Netspoc::split_ip_range($ip, $ip2);
	for my $ip_mask (@ip_mask) {
	    my $object = {};
	    my ($ip, $mask) = @$ip_mask;
	    my $orig;
	    if($mask == 0xffffffff) {
		$orig = print_ip($ip);
	    }
	    else {
		my $end = (Netspoc::complement_32bit $mask) + $ip;
		$orig = print_ip($ip).'-'.print_ip($end);
	    }
	    $object->{ip} = $ip;
	    $object->{mask} = $mask;
	    $object->{orig} = $orig;
	    push @objects, $object;
	}
    }
    elsif(Netspoc::check('/')) {
	my $prefixlen = Netspoc::read_int();
	my $mask = Netspoc::prefix2mask($prefixlen);
	my $object = {};
	$object->{ip} = $ip;
	$object->{mask} = $mask;
	$object->{orig} = print_ip($ip)."/$prefixlen";
	push @objects, $object;
    }
    else {
	my $object = {};
	$object->{ip} = $ip;
	$object->{mask} = 0xffffffff;
	$object->{orig} = print_ip($ip);
	push @objects, $object;
    }
}

# read from file
my $list1 = shift or usage;# read from file
my $list2 = shift || '-';

# read a space separated list of ip addresses
# Undef input record separator.
local $/;
&read_file($list1, \&read_ip_stream);
my @list1 = @objects;
@objects = ();
&read_file($list2, \&read_ip_stream);
my @list2 = @objects;
@objects = ();

# prepare efficient lookup of network objects of list1
my %mask_ip_hash;
for my $obj (@list1) {
    my $ip = $obj->{ip};
    my $mask = $obj->{mask};
    $mask_ip_hash{$mask}->{$ip} = $obj;
}

my @found;
my @unknown;
 OBJ:
for my $obj (@list2) {
    my $ip = $obj->{ip};
    my $ip2 = $obj->{ip2};
    my $mask = $obj->{mask} || 0xffffffff;

    my $m = $mask;
    my $i = $ip;
    while($m) {
	$i &= $m;
	if(my $ip_hash = $mask_ip_hash{$m}) {
	    if(my $net = $ip_hash->{$i}) {
		if($ip2 && (($ip2 & $m) != $i)) {
		}
		else {
		    push @found, $obj;
		    next OBJ;
		}
	    }
	}
	# Clear upper bit, because left shift is undefined otherwise.
	$m &= 0x7fffffff;
	$m <<= 1;
    }
    push @unknown, $obj;
}

# Print result.
for my $obj ($vice_versa ? @unknown : @found) {
    print "$obj->{orig}\n";
}
